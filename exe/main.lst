
exe/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vector       00000410  00000000  00000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026cc  00000410  00000410  00008410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  00002adc  00002adc  0000aadc  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .data         00000400  1fff8000  00002b30  00010000  2**9
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000430  1fff8400  00002f30  00010400  2**2
                  ALLOC
  5 .comment      0000002a  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00001030  00000000  00000000  00010430  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001780  00000000  00000000  00011460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000fbbc  00000000  00000000  00012be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003c0a  00000000  00000000  0002279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006742  00000000  00000000  000263a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00003ea0  00000000  00000000  0002cae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003c86  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004973  00000000  00000000  0003460e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 0000002d  00000000  00000000  00038f81  2**0
                  CONTENTS, READONLY
 15 .debug_pubtypes 0000181b  00000000  00000000  00038fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c80  00000000  00000000  0003a7c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
     410:	f248 4300 	movw	r3, #33792	; 0x8400
     414:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
     418:	781a      	ldrb	r2, [r3, #0]
     41a:	b90a      	cbnz	r2, 420 <__do_global_dtors_aux+0x10>
     41c:	2001      	movs	r0, #1
     41e:	7018      	strb	r0, [r3, #0]
     420:	4770      	bx	lr
     422:	bf00      	nop

00000424 <frame_dummy>:
     424:	f248 0000 	movw	r0, #32768	; 0x8000
     428:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
     42c:	b508      	push	{r3, lr}
     42e:	6803      	ldr	r3, [r0, #0]
     430:	b12b      	cbz	r3, 43e <__cs3_region_zero_size_ram+0xe>
     432:	f240 0300 	movw	r3, #0
     436:	f2c0 0300 	movt	r3, #0
     43a:	b103      	cbz	r3, 43e <__cs3_region_zero_size_ram+0xe>
     43c:	4798      	blx	r3
     43e:	bd08      	pop	{r3, pc}

00000440 <system_start>:
    .global system_start
	.code 16
	.syntax unified
	.type system_start, function
system_start:
	cpsid f   /* disable all exceptions */
     440:	b671      	cpsid	f

	/* 初始化GPRs */
	mov     r0,#0
     442:	f04f 0000 	mov.w	r0, #0
	mov     r1,#0
     446:	f04f 0100 	mov.w	r1, #0
	mov     r2,#0
     44a:	f04f 0200 	mov.w	r2, #0
	mov     r3,#0
     44e:	f04f 0300 	mov.w	r3, #0
	mov     r4,#0
     452:	f04f 0400 	mov.w	r4, #0
	mov     r5,#0
     456:	f04f 0500 	mov.w	r5, #0
	mov     r6,#0
     45a:	f04f 0600 	mov.w	r6, #0
	mov     r7,#0
     45e:	f04f 0700 	mov.w	r7, #0
	mov     r8,#0
     462:	f04f 0800 	mov.w	r8, #0
	mov     r9,#0
     466:	f04f 0900 	mov.w	r9, #0
	mov     r10,#0
     46a:	f04f 0a00 	mov.w	sl, #0
	mov     r11,#0
     46e:	f04f 0b00 	mov.w	fp, #0
	mov     r12,#0
     472:	f04f 0c00 	mov.w	ip, #0

    /*
	 *  msp setting
     */
	mov r0, #0
     476:	f04f 0000 	mov.w	r0, #0
	msr control, r0
     47a:	f380 8814 	msr	CONTROL, r0
	isb
     47e:	f3bf 8f6f 	isb	sy

	/*
     * set default stack pointer
     */
	ldr r0, =__onchip_ram_end
     482:	4804      	ldr	r0, [pc, #16]	; (494 <init_phase1+0x6>)
	msr msp, r0
     484:	f380 8808 	msr	MSP, r0

	ldr r0, =hardware_init_hook
     488:	4803      	ldr	r0, [pc, #12]	; (498 <init_phase1+0xa>)
    cbz r0, init_phase1
     48a:	b100      	cbz	r0, 48e <init_phase1>
	blx r0
     48c:	4780      	blx	r0

0000048e <init_phase1>:
     */
	/*ldr r0, =p_system_stack
	ldr r1, [r0]
	msr msp, r1*/

    b __cs3_start_c
     48e:	f002 bad5 	b.w	2a3c <__cs3_start_c>
     492:	0000      	.short	0x0000
     494:	20008000 	.word	0x20008000
     498:	0000049d 	.word	0x0000049d

0000049c <hardware_init_hook>:


/**
 * @brief 硬件初始化，调用该函数之前应准备好堆栈
 */
void hardware_init_hook(void) {
     49c:	b580      	push	{r7, lr}
     49e:	af00      	add	r7, sp, #0
    /* Disable the WDOG module */
    /* WDOG_UNLOCK: WDOGUNLOCK=0xC520 */
    WDOG_UNLOCK = (uint16_t)0xC520U;     /* Key 1 */
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <hardware_init_hook+0x50>)
     4a2:	f24c 5220 	movw	r2, #50464	; 0xc520
     4a6:	81da      	strh	r2, [r3, #14]
    /* WDOG_UNLOCK : WDOGUNLOCK=0xD928 */
    WDOG_UNLOCK  = (uint16_t)0xD928U;    /* Key 2 */
     4a8:	4b10      	ldr	r3, [pc, #64]	; (4ec <hardware_init_hook+0x50>)
     4aa:	f64d 1228 	movw	r2, #55592	; 0xd928
     4ae:	81da      	strh	r2, [r3, #14]
    /* WDOG_STCTRLH: ??=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,??=0,STNDBYEN=1,
     * WAITEN=1,STOPEN=1,DBGEN=0,ALLOWUPDATE=1,WINEN=0,IRQRSTEN=0,CLKSRC=1,WDOGEN=0 
     */
    WDOG_STCTRLH = (uint16_t)0x01D2U;
     4b0:	4b0e      	ldr	r3, [pc, #56]	; (4ec <hardware_init_hook+0x50>)
     4b2:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
     4b6:	801a      	strh	r2, [r3, #0]

    /* 使能IO端口时钟 */
    SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     4b8:	490d      	ldr	r1, [pc, #52]	; (4f0 <hardware_init_hook+0x54>)
     4ba:	4b0d      	ldr	r3, [pc, #52]	; (4f0 <hardware_init_hook+0x54>)
     4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     4c0:	f103 0338 	add.w	r3, r3, #56	; 0x38
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	f443 5278 	orr.w	r2, r3, #15872	; 0x3e00
     4ca:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     4ce:	f103 0338 	add.w	r3, r3, #56	; 0x38
     4d2:	601a      	str	r2, [r3, #0]
                | SIM_SCGC5_PORTC_MASK
                | SIM_SCGC5_PORTD_MASK
                | SIM_SCGC5_PORTE_MASK);

    /* 初始化时钟 */
    pll_init(PLL_100MHZ, XTAL_8MHZ);
     4d4:	f04f 0003 	mov.w	r0, #3
     4d8:	f04f 0103 	mov.w	r1, #3
     4dc:	f000 f80a 	bl	4f4 <pll_init>

    /* 调试时钟 */
    trace_clk_init();
     4e0:	f000 f954 	bl	78c <trace_clk_init>

    /* flexbus时钟使能 */
    fb_clk_init();
     4e4:	f000 f96e 	bl	7c4 <fb_clk_init>
    MC_PMPROT = (uint8_t)0x00U;          /* Setup Power mode protection register */
    /* Common initialization of the CPU registers */
    /* NVICIP20: PRI20=0 */
    NVICIP20 = (uint8_t)0x00U;
#endif  
}
     4e8:	bd80      	pop	{r7, pc}
     4ea:	bf00      	nop
     4ec:	40052000 	.word	0x40052000
     4f0:	40047000 	.word	0x40047000

000004f4 <pll_init>:
 * @param crystal_val   晶振选项：2-32 Mhz
 *
 * @return >0 系统时钟频率 <0 失败
 */
static int32_t pll_init(uint8_t clk_option, uint8_t crystal_val)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	4602      	mov	r2, r0
     4fc:	460b      	mov	r3, r1
     4fe:	71fa      	strb	r2, [r7, #7]
     500:	71bb      	strb	r3, [r7, #6]
    int32_t pll_freq;
    /* 参数检查 */
    if (clk_option > PLL_100MHZ) 
     502:	79fb      	ldrb	r3, [r7, #7]
     504:	2b03      	cmp	r3, #3
     506:	d902      	bls.n	50e <pll_init+0x1a>
        return -1;
     508:	f04f 33ff 	mov.w	r3, #4294967295
     50c:	e0e2      	b.n	6d4 <pll_init+0x1e0>
    if (crystal_val > XTAL_32MHZ)
     50e:	79bb      	ldrb	r3, [r7, #6]
     510:	2b0f      	cmp	r3, #15
     512:	d902      	bls.n	51a <pll_init+0x26>
        return -1;
     514:	f04f 33ff 	mov.w	r3, #4294967295
     518:	e0dc      	b.n	6d4 <pll_init+0x1e0>
    
    /* SIM_SOPT2: PLLFLLSEL=0 */
    /* Select FLL as a clock source for various peripherals */
    SIM_SOPT2 &= (uint32_t)~0x00010000UL; 
     51a:	4971      	ldr	r1, [pc, #452]	; (6e0 <pll_init+0x1ec>)
     51c:	4b70      	ldr	r3, [pc, #448]	; (6e0 <pll_init+0x1ec>)
     51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     522:	f103 0304 	add.w	r3, r3, #4
     526:	681b      	ldr	r3, [r3, #0]
     528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
     52c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     530:	f103 0304 	add.w	r3, r3, #4
     534:	601a      	str	r2, [r3, #0]
    /* SIM_SOPT1: OSC32KSEL=0 */
    /* System oscillator drives 32 kHz clock for various peripherals */
    SIM_SOPT1 &= (uint32_t)~0x00080000UL;
     536:	4b6a      	ldr	r3, [pc, #424]	; (6e0 <pll_init+0x1ec>)
     538:	4a69      	ldr	r2, [pc, #420]	; (6e0 <pll_init+0x1ec>)
     53a:	6812      	ldr	r2, [r2, #0]
     53c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
     540:	601a      	str	r2, [r3, #0]
       
    /* 使能外部晶振，如果使用了无源晶振可能还需要设定电容匹配 */
    OSC_CR = (uint8_t)0x80U; 
     542:	4b68      	ldr	r3, [pc, #416]	; (6e4 <pll_init+0x1f0>)
     544:	f04f 0280 	mov.w	r2, #128	; 0x80
     548:	701a      	strb	r2, [r3, #0]
    /* SIM_SOPT2: MCGCLKSEL=0 */
    SIM_SOPT2 &= (uint32_t)~0x01UL;  
     54a:	4965      	ldr	r1, [pc, #404]	; (6e0 <pll_init+0x1ec>)
     54c:	4b64      	ldr	r3, [pc, #400]	; (6e0 <pll_init+0x1ec>)
     54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     552:	f103 0304 	add.w	r3, r3, #4
     556:	681b      	ldr	r3, [r3, #0]
     558:	f023 0201 	bic.w	r2, r3, #1
     55c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     560:	f103 0304 	add.w	r3, r3, #4
     564:	601a      	str	r2, [r3, #0]
    /* Very high frequency range selected for the crystal oscillator */
    MCG_C2 = MCG_C2_RANGE(2);
     566:	4b60      	ldr	r3, [pc, #384]	; (6e8 <pll_init+0x1f4>)
     568:	f04f 0220 	mov.w	r2, #32
     56c:	705a      	strb	r2, [r3, #1]
    /* FRDIV=3, set the FLL ref divider to keep the ref clock in range */
    /* (even if FLL is not being used) 8 MHz / 256 = 31.25 kHz */
    /* IREFS=0, select the external clock */
    /* IRCLKEN=0, disable IRCLK (can enable it if desired) */
    /* IREFSTEN=0, disable IRC in stop mode (can keep it enabled in stop if desired) */
    MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
     56e:	4b5e      	ldr	r3, [pc, #376]	; (6e8 <pll_init+0x1f4>)
     570:	f04f 0298 	mov.w	r2, #152	; 0x98
     574:	701a      	strb	r2, [r3, #0]
    /* MCG_C4: DMX32=0,DRST_DRS=0 */
    MCG_C4 &= (uint8_t)~(uint8_t)0xE0U;                           
     576:	4b5c      	ldr	r3, [pc, #368]	; (6e8 <pll_init+0x1f4>)
     578:	4a5b      	ldr	r2, [pc, #364]	; (6e8 <pll_init+0x1f4>)
     57a:	78d2      	ldrb	r2, [r2, #3]
     57c:	b2d2      	uxtb	r2, r2
     57e:	f002 021f 	and.w	r2, r2, #31
     582:	b2d2      	uxtb	r2, r2
     584:	70da      	strb	r2, [r3, #3]
    /* MCG_C5: ??=0,PLLCLKEN=0,PLLSTEN=0,PRDIV=1 */
    MCG_C5 = (uint8_t)0x01U;                             
     586:	4b58      	ldr	r3, [pc, #352]	; (6e8 <pll_init+0x1f4>)
     588:	f04f 0201 	mov.w	r2, #1
     58c:	711a      	strb	r2, [r3, #4]
    /* MCG_C6: LOLIE=0,PLLS=0,CME=0,VDIV=0 */
    MCG_C6 = (uint8_t)0x00U; 
     58e:	4b56      	ldr	r3, [pc, #344]	; (6e8 <pll_init+0x1f4>)
     590:	f04f 0200 	mov.w	r2, #0
     594:	715a      	strb	r2, [r3, #5]

    /* 等待晶振稳定    */
    while (!(MCG_S & MCG_S_OSCINIT_MASK));  
     596:	bf00      	nop
     598:	4b53      	ldr	r3, [pc, #332]	; (6e8 <pll_init+0x1f4>)
     59a:	799b      	ldrb	r3, [r3, #6]
     59c:	b2db      	uxtb	r3, r3
     59e:	f003 0302 	and.w	r3, r3, #2
     5a2:	2b00      	cmp	r3, #0
     5a4:	d0f8      	beq.n	598 <pll_init+0xa4>
    /* 等待参考时钟状态位清零 */
    while (MCG_S & MCG_S_IREFST_MASK);
     5a6:	bf00      	nop
     5a8:	4b4f      	ldr	r3, [pc, #316]	; (6e8 <pll_init+0x1f4>)
     5aa:	799b      	ldrb	r3, [r3, #6]
     5ac:	b2db      	uxtb	r3, r3
     5ae:	f003 0310 	and.w	r3, r3, #16
     5b2:	2b00      	cmp	r3, #0
     5b4:	d1f8      	bne.n	5a8 <pll_init+0xb4>
    /* 等待时钟状态位显示时钟源来自外部参考时钟 */
    while ((MCG_S & 0x0CU) != 0x08U); 
     5b6:	bf00      	nop
     5b8:	4b4b      	ldr	r3, [pc, #300]	; (6e8 <pll_init+0x1f4>)
     5ba:	799b      	ldrb	r3, [r3, #6]
     5bc:	b2db      	uxtb	r3, r3
     5be:	f003 030c 	and.w	r3, r3, #12
     5c2:	2b08      	cmp	r3, #8
     5c4:	d1f8      	bne.n	5b8 <pll_init+0xc4>
    /* FBE mode */
        
    /* MCG_C6: LOLIE=0,PLLS=1,CME=0,VDIV=0 */
    MCG_C6 = (uint8_t)0x40U;
     5c6:	4b48      	ldr	r3, [pc, #288]	; (6e8 <pll_init+0x1f4>)
     5c8:	f04f 0240 	mov.w	r2, #64	; 0x40
     5cc:	715a      	strb	r2, [r3, #5]
    /* Wait until external reference clock is selected as MCG output */ 
    while((MCG_S & 0x0CU) != 0x08U);
     5ce:	bf00      	nop
     5d0:	4b45      	ldr	r3, [pc, #276]	; (6e8 <pll_init+0x1f4>)
     5d2:	799b      	ldrb	r3, [r3, #6]
     5d4:	b2db      	uxtb	r3, r3
     5d6:	f003 030c 	and.w	r3, r3, #12
     5da:	2b08      	cmp	r3, #8
     5dc:	d1f8      	bne.n	5d0 <pll_init+0xdc>
    /* PBE mode */

    /* switch to PEE mode */    
    /* 配置PLL分频器来匹配所用的晶振,PLL来源为2 Mhz */
    MCG_C5 = MCG_C5_PRDIV(crystal_val);  
     5de:	4b42      	ldr	r3, [pc, #264]	; (6e8 <pll_init+0x1f4>)
     5e0:	79ba      	ldrb	r2, [r7, #6]
     5e2:	f002 021f 	and.w	r2, r2, #31
     5e6:	b2d2      	uxtb	r2, r2
     5e8:	711a      	strb	r2, [r3, #4]

    /* 选择PLL VCO分频器，系统时钟分频器取决于时钟选项 */
    switch (clk_option) {
     5ea:	79fb      	ldrb	r3, [r7, #7]
     5ec:	2b03      	cmp	r3, #3
     5ee:	d84f      	bhi.n	690 <pll_init+0x19c>
     5f0:	a201      	add	r2, pc, #4	; (adr r2, 5f8 <pll_init+0x104>)
     5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     5f6:	bf00      	nop
     5f8:	00000609 	.word	0x00000609
     5fc:	0000062b 	.word	0x0000062b
     600:	0000064d 	.word	0x0000064d
     604:	0000066f 	.word	0x0000066f
        case PLL_48MHZ:
            /* MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2 */
            set_sys_dividers(0,0,0,1);
     608:	f04f 0000 	mov.w	r0, #0
     60c:	f04f 0100 	mov.w	r1, #0
     610:	f04f 0200 	mov.w	r2, #0
     614:	f04f 0301 	mov.w	r3, #1
     618:	f000 f870 	bl	6fc <set_sys_dividers>
            /* 设置VCO分频器，使能PLL为48MHz, LOLIE=0, PLLS=1, CME=0, VDIV=0 */
            MCG_C6 = MCG_C6_PLLS_MASK; /* VDIV = 0 (x24) */
     61c:	4b32      	ldr	r3, [pc, #200]	; (6e8 <pll_init+0x1f4>)
     61e:	f04f 0240 	mov.w	r2, #64	; 0x40
     622:	715a      	strb	r2, [r3, #5]
            pll_freq = 48000000;
     624:	4b31      	ldr	r3, [pc, #196]	; (6ec <pll_init+0x1f8>)
     626:	60fb      	str	r3, [r7, #12]
            break;
     628:	e033      	b.n	692 <pll_init+0x19e>
        case PLL_50MHZ:
            /* MCG=PLL, core = MCG, bus = MCG, FlexBus = MCG, Flash clock= MCG/2 */
            set_sys_dividers(0,0,0,1);
     62a:	f04f 0000 	mov.w	r0, #0
     62e:	f04f 0100 	mov.w	r1, #0
     632:	f04f 0200 	mov.w	r2, #0
     636:	f04f 0301 	mov.w	r3, #1
     63a:	f000 f85f 	bl	6fc <set_sys_dividers>
            /* 设置VCO分频器，使能PLL为50MHz, LOLIE=0, PLLS=1, CME=0, VDIV=1 */
            MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(1); /* VDIV = 1 (x25) */
     63e:	4b2a      	ldr	r3, [pc, #168]	; (6e8 <pll_init+0x1f4>)
     640:	f04f 0241 	mov.w	r2, #65	; 0x41
     644:	715a      	strb	r2, [r3, #5]
            pll_freq = 50000000;
     646:	4b2a      	ldr	r3, [pc, #168]	; (6f0 <pll_init+0x1fc>)
     648:	60fb      	str	r3, [r7, #12]
            break;
     64a:	e022      	b.n	692 <pll_init+0x19e>
        case PLL_96MHZ:
            /* MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4 */
            set_sys_dividers(0,1,1,3);
     64c:	f04f 0000 	mov.w	r0, #0
     650:	f04f 0101 	mov.w	r1, #1
     654:	f04f 0201 	mov.w	r2, #1
     658:	f04f 0303 	mov.w	r3, #3
     65c:	f000 f84e 	bl	6fc <set_sys_dividers>
            /* 设置VCO分频器，使能PLL为96MHz, LOLIE=0, PLLS=1, CME=0, VDIV=24 */
            MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(24); /* VDIV = 24 (x48) */
     660:	4b21      	ldr	r3, [pc, #132]	; (6e8 <pll_init+0x1f4>)
     662:	f04f 0258 	mov.w	r2, #88	; 0x58
     666:	715a      	strb	r2, [r3, #5]
            pll_freq = 96000000;
     668:	4b22      	ldr	r3, [pc, #136]	; (6f4 <pll_init+0x200>)
     66a:	60fb      	str	r3, [r7, #12]
            break;
     66c:	e011      	b.n	692 <pll_init+0x19e>
        case PLL_100MHZ:
            /* MCG=PLL, core = MCG, bus = MCG/2, FlexBus = MCG/2, Flash clock= MCG/4 */
            set_sys_dividers(0,1,1,3);
     66e:	f04f 0000 	mov.w	r0, #0
     672:	f04f 0101 	mov.w	r1, #1
     676:	f04f 0201 	mov.w	r2, #1
     67a:	f04f 0303 	mov.w	r3, #3
     67e:	f000 f83d 	bl	6fc <set_sys_dividers>
            /* 设置VCO分频器，使能PLL为100MHz, LOLIE=0, PLLS=1, CME=0, VDIV=26 */
            MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(26); /* VDIV = 26 (x50) */
     682:	4b19      	ldr	r3, [pc, #100]	; (6e8 <pll_init+0x1f4>)
     684:	f04f 025a 	mov.w	r2, #90	; 0x5a
     688:	715a      	strb	r2, [r3, #5]
            pll_freq = 100000000;
     68a:	4b1b      	ldr	r3, [pc, #108]	; (6f8 <pll_init+0x204>)
     68c:	60fb      	str	r3, [r7, #12]
            break;
     68e:	e000      	b.n	692 <pll_init+0x19e>
        default:
            break;
     690:	bf00      	nop
    }
    /* wait for PLL status bit to set */
    while (!(MCG_S & MCG_S_PLLST_MASK));
     692:	bf00      	nop
     694:	4b14      	ldr	r3, [pc, #80]	; (6e8 <pll_init+0x1f4>)
     696:	799b      	ldrb	r3, [r3, #6]
     698:	b2db      	uxtb	r3, r3
     69a:	f003 0320 	and.w	r3, r3, #32
     69e:	2b00      	cmp	r3, #0
     6a0:	d0f8      	beq.n	694 <pll_init+0x1a0>
    /* Wait for LOCK bit to set */
    while (!(MCG_S & MCG_S_LOCK_MASK)); 
     6a2:	bf00      	nop
     6a4:	4b10      	ldr	r3, [pc, #64]	; (6e8 <pll_init+0x1f4>)
     6a6:	799b      	ldrb	r3, [r3, #6]
     6a8:	b2db      	uxtb	r3, r3
     6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
     6ae:	2b00      	cmp	r3, #0
     6b0:	d0f8      	beq.n	6a4 <pll_init+0x1b0>

    /* 通过清零CLKS位来进入PEE模式 */
    /* CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0 */
    MCG_C1 &= ~MCG_C1_CLKS_MASK;
     6b2:	4b0d      	ldr	r3, [pc, #52]	; (6e8 <pll_init+0x1f4>)
     6b4:	4a0c      	ldr	r2, [pc, #48]	; (6e8 <pll_init+0x1f4>)
     6b6:	7812      	ldrb	r2, [r2, #0]
     6b8:	b2d2      	uxtb	r2, r2
     6ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     6be:	b2d2      	uxtb	r2, r2
     6c0:	701a      	strb	r2, [r3, #0]
    
    /* 等待时钟状态位更新 */
    /* Wait until output of the PLL is selected */
    while((MCG_S & 0x0CU) != 0x0CU);  
     6c2:	bf00      	nop
     6c4:	4b08      	ldr	r3, [pc, #32]	; (6e8 <pll_init+0x1f4>)
     6c6:	799b      	ldrb	r3, [r3, #6]
     6c8:	b2db      	uxtb	r3, r3
     6ca:	f003 030c 	and.w	r3, r3, #12
     6ce:	2b0c      	cmp	r3, #12
     6d0:	d1f8      	bne.n	6c4 <pll_init+0x1d0>
  
    /* 开始进入PEE模式 */
    
    return pll_freq;
     6d2:	68fb      	ldr	r3, [r7, #12]
}
     6d4:	4618      	mov	r0, r3
     6d6:	f107 0710 	add.w	r7, r7, #16
     6da:	46bd      	mov	sp, r7
     6dc:	bd80      	pop	{r7, pc}
     6de:	bf00      	nop
     6e0:	40047000 	.word	0x40047000
     6e4:	40065000 	.word	0x40065000
     6e8:	40064000 	.word	0x40064000
     6ec:	02dc6c00 	.word	0x02dc6c00
     6f0:	02faf080 	.word	0x02faf080
     6f4:	05b8d800 	.word	0x05b8d800
     6f8:	05f5e100 	.word	0x05f5e100

000006fc <set_sys_dividers>:
 * @param sys_bus   系统总线时钟
 * @param flex_bus  外部总线时钟
 * @param flash     内部flash时钟
 */
static void set_sys_dividers(uint8_t mcg, uint8_t sys_bus, uint8_t flex_bus, uint8_t flash)
{
     6fc:	b480      	push	{r7}
     6fe:	b085      	sub	sp, #20
     700:	af00      	add	r7, sp, #0
     702:	71f8      	strb	r0, [r7, #7]
     704:	71b9      	strb	r1, [r7, #6]
     706:	717a      	strb	r2, [r7, #5]
     708:	713b      	strb	r3, [r7, #4]
    uint32_t temp_reg;
    volatile uint8_t i;
    /* 保存FMC_PFAPR当前的值 */
    temp_reg = FMC_PFAPR;
     70a:	4b1e      	ldr	r3, [pc, #120]	; (784 <set_sys_dividers+0x88>)
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	60fb      	str	r3, [r7, #12]
    
    /* 通过M&PFD置位M0PFD来禁止预取功能 */
    FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
     710:	4b1c      	ldr	r3, [pc, #112]	; (784 <set_sys_dividers+0x88>)
     712:	4a1c      	ldr	r2, [pc, #112]	; (784 <set_sys_dividers+0x88>)
     714:	6812      	ldr	r2, [r2, #0]
     716:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
     71a:	601a      	str	r2, [r3, #0]
             | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
             | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
    
    /* 给时钟分频器设置期望值   */
    SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(mcg) | SIM_CLKDIV1_OUTDIV2(sys_bus) 
     71c:	4b1a      	ldr	r3, [pc, #104]	; (788 <set_sys_dividers+0x8c>)
     71e:	79fa      	ldrb	r2, [r7, #7]
     720:	ea4f 7102 	mov.w	r1, r2, lsl #28
     724:	79ba      	ldrb	r2, [r7, #6]
     726:	ea4f 6202 	mov.w	r2, r2, lsl #24
     72a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
     72e:	4311      	orrs	r1, r2
              | SIM_CLKDIV1_OUTDIV3(flex_bus) | SIM_CLKDIV1_OUTDIV4(flash);
     730:	797a      	ldrb	r2, [r7, #5]
     732:	ea4f 5202 	mov.w	r2, r2, lsl #20
     736:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
     73a:	4311      	orrs	r1, r2
     73c:	793a      	ldrb	r2, [r7, #4]
     73e:	ea4f 4202 	mov.w	r2, r2, lsl #16
     742:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
     746:	ea41 0202 	orr.w	r2, r1, r2
    FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
             | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
             | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
    
    /* 给时钟分频器设置期望值   */
    SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(mcg) | SIM_CLKDIV1_OUTDIV2(sys_bus) 
     74a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
     74e:	f103 0304 	add.w	r3, r3, #4
     752:	601a      	str	r2, [r3, #0]
              | SIM_CLKDIV1_OUTDIV3(flex_bus) | SIM_CLKDIV1_OUTDIV4(flash);
    
    /* 等待分频器改变 */
    for (i = 0 ; i < flash ; i++);
     754:	f04f 0300 	mov.w	r3, #0
     758:	72fb      	strb	r3, [r7, #11]
     75a:	e005      	b.n	768 <set_sys_dividers+0x6c>
     75c:	7afb      	ldrb	r3, [r7, #11]
     75e:	b2db      	uxtb	r3, r3
     760:	f103 0301 	add.w	r3, r3, #1
     764:	b2db      	uxtb	r3, r3
     766:	72fb      	strb	r3, [r7, #11]
     768:	7afb      	ldrb	r3, [r7, #11]
     76a:	b2db      	uxtb	r3, r3
     76c:	793a      	ldrb	r2, [r7, #4]
     76e:	429a      	cmp	r2, r3
     770:	d8f4      	bhi.n	75c <set_sys_dividers+0x60>
    
    /* 从新存FMC_PFAPR的原始值 */
    FMC_PFAPR = temp_reg;
     772:	4b04      	ldr	r3, [pc, #16]	; (784 <set_sys_dividers+0x88>)
     774:	68fa      	ldr	r2, [r7, #12]
     776:	601a      	str	r2, [r3, #0]

    return;
}
     778:	f107 0714 	add.w	r7, r7, #20
     77c:	46bd      	mov	sp, r7
     77e:	bc80      	pop	{r7}
     780:	4770      	bx	lr
     782:	bf00      	nop
     784:	4001f000 	.word	0x4001f000
     788:	40047000 	.word	0x40047000

0000078c <trace_clk_init>:

/**
 * @brief 跟踪时钟初始化
 */
static void trace_clk_init(void)
{
     78c:	b480      	push	{r7}
     78e:	af00      	add	r7, sp, #0
    /* 设置跟踪时钟为内核时钟 */
    SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;
     790:	490a      	ldr	r1, [pc, #40]	; (7bc <trace_clk_init+0x30>)
     792:	4b0a      	ldr	r3, [pc, #40]	; (7bc <trace_clk_init+0x30>)
     794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     798:	f103 0304 	add.w	r3, r3, #4
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     7a2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     7a6:	f103 0304 	add.w	r3, r3, #4
     7aa:	601a      	str	r2, [r3, #0]
    /* 在PTA6引脚上使能TRACE_CLKOU功能 */
    PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
     7ac:	4b04      	ldr	r3, [pc, #16]	; (7c0 <trace_clk_init+0x34>)
     7ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
     7b2:	619a      	str	r2, [r3, #24]
}
     7b4:	46bd      	mov	sp, r7
     7b6:	bc80      	pop	{r7}
     7b8:	4770      	bx	lr
     7ba:	bf00      	nop
     7bc:	40047000 	.word	0x40047000
     7c0:	40049000 	.word	0x40049000

000007c4 <fb_clk_init>:

/**
 * @brief FlexBus时钟初始化
 */
static void fb_clk_init(void)
{
     7c4:	b480      	push	{r7}
     7c6:	af00      	add	r7, sp, #0
    /* 使能FlexBus模块时钟 */
    SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
     7c8:	4b08      	ldr	r3, [pc, #32]	; (7ec <fb_clk_init+0x28>)
     7ca:	4a08      	ldr	r2, [pc, #32]	; (7ec <fb_clk_init+0x28>)
     7cc:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
     7d0:	6812      	ldr	r2, [r2, #0]
     7d2:	f042 0201 	orr.w	r2, r2, #1
     7d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
     7da:	601a      	str	r2, [r3, #0]
    /* 在PTA6引脚上使能FB_CLKOUT功能 */
    PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
     7dc:	4b04      	ldr	r3, [pc, #16]	; (7f0 <fb_clk_init+0x2c>)
     7de:	f44f 62a0 	mov.w	r2, #1280	; 0x500
     7e2:	60da      	str	r2, [r3, #12]
}
     7e4:	46bd      	mov	sp, r7
     7e6:	bc80      	pop	{r7}
     7e8:	4770      	bx	lr
     7ea:	bf00      	nop
     7ec:	40047000 	.word	0x40047000
     7f0:	4004b000 	.word	0x4004b000

000007f4 <uart_init>:
 *    @return  1     初始化失败
 *
 *    @note
 */
ER uart_init (ID uart_no, uint32_t sys_clk, uint32_t baud)
{
     7f4:	b590      	push	{r4, r7, lr}
     7f6:	b087      	sub	sp, #28
     7f8:	af00      	add	r7, sp, #0
     7fa:	60f8      	str	r0, [r7, #12]
     7fc:	60b9      	str	r1, [r7, #8]
     7fe:	607a      	str	r2, [r7, #4]
    register uint32_t sbr, brfa;
    uint8_t temp;

    /* 配置UART功能的GPIO接口 开启时钟 */
    switch(UART_ID_SET(uart_no))
     800:	68fb      	ldr	r3, [r7, #12]
     802:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
     806:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
     80a:	2b05      	cmp	r3, #5
     80c:	f200 8086 	bhi.w	91c <uart_init+0x128>
     810:	a201      	add	r2, pc, #4	; (adr r2, 818 <uart_init+0x24>)
     812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     816:	bf00      	nop
     818:	00000831 	.word	0x00000831
     81c:	000008c1 	.word	0x000008c1
     820:	00000865 	.word	0x00000865
     824:	00000893 	.word	0x00000893
     828:	00000837 	.word	0x00000837
     82c:	000008ef 	.word	0x000008ef
            else if(UART0_RX==PTB16)
                PORTB_PCR16 = PORT_PCR_MUX(0x3);     /* 在PTB16上使能UART0_RXD */
            else if(UART0_RX==PTD7)
                PORTD_PCR7 = PORT_PCR_MUX(0x3);      /* 在PTD7上使能UART0_RXD */
            else
                return E_PIN;
     830:	f06f 0305 	mvn.w	r3, #5
     834:	e0e1      	b.n	9fa <uart_init+0x206>

        case UART1:
            if(UART1_RX==PTC3)
                PORTC_PCR3 = PORT_PCR_MUX(0x3);      /* 在PTC3上使能UART1_RXD */
            else if(UART1_RX==PTE1)
                PORTE_PCR1 = PORT_PCR_MUX(0x3);      /* 在PTE1上使能UART1_RXD */
     836:	4b73      	ldr	r3, [pc, #460]	; (a04 <uart_init+0x210>)
     838:	f44f 7240 	mov.w	r2, #768	; 0x300
     83c:	605a      	str	r2, [r3, #4]
                return E_PIN;

            if(UART1_TX==PTC4)
                PORTC_PCR4 = PORT_PCR_MUX(0x3);      /* 在PTC4上使能UART1_RXD */
            else if(UART1_TX==PTE0)
                PORTE_PCR0 = PORT_PCR_MUX(0x3);      /* 在PTE0上使能UART1_RXD */
     83e:	4b71      	ldr	r3, [pc, #452]	; (a04 <uart_init+0x210>)
     840:	f44f 7240 	mov.w	r2, #768	; 0x300
     844:	601a      	str	r2, [r3, #0]
            else
                return E_PIN;

            SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
     846:	4970      	ldr	r1, [pc, #448]	; (a08 <uart_init+0x214>)
     848:	4b6f      	ldr	r3, [pc, #444]	; (a08 <uart_init+0x214>)
     84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     84e:	f103 0334 	add.w	r3, r3, #52	; 0x34
     852:	681b      	ldr	r3, [r3, #0]
     854:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     858:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     85c:	f103 0334 	add.w	r3, r3, #52	; 0x34
     860:	601a      	str	r2, [r3, #0]

            break;
     862:	e05e      	b.n	922 <uart_init+0x12e>

        case UART2:
            PORTD_PCR3 = PORT_PCR_MUX(0x3);         /* 在PTD3上使能UART2_TXD功能 */
     864:	4b69      	ldr	r3, [pc, #420]	; (a0c <uart_init+0x218>)
     866:	f44f 7240 	mov.w	r2, #768	; 0x300
     86a:	60da      	str	r2, [r3, #12]
            PORTD_PCR2 = PORT_PCR_MUX(0x3);         /* 在PTD2上使能UART2_RXD */
     86c:	4b67      	ldr	r3, [pc, #412]	; (a0c <uart_init+0x218>)
     86e:	f44f 7240 	mov.w	r2, #768	; 0x300
     872:	609a      	str	r2, [r3, #8]
            SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
     874:	4964      	ldr	r1, [pc, #400]	; (a08 <uart_init+0x214>)
     876:	4b64      	ldr	r3, [pc, #400]	; (a08 <uart_init+0x214>)
     878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     87c:	f103 0334 	add.w	r3, r3, #52	; 0x34
     880:	681b      	ldr	r3, [r3, #0]
     882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     886:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     88a:	f103 0334 	add.w	r3, r3, #52	; 0x34
     88e:	601a      	str	r2, [r3, #0]

            break;
     890:	e047      	b.n	922 <uart_init+0x12e>

        case UART3:
            if(UART3_RX==PTB10)
                PORTB_PCR10 = PORT_PCR_MUX(0x3);     /* 在PTB10上使能UART3_RXD */
            else if(UART3_RX==PTC16)
                PORTC_PCR16 = PORT_PCR_MUX(0x3);     /* 在PTC16上使能UART3_RXD */
     892:	4b5f      	ldr	r3, [pc, #380]	; (a10 <uart_init+0x21c>)
     894:	f44f 7240 	mov.w	r2, #768	; 0x300
     898:	641a      	str	r2, [r3, #64]	; 0x40
                return E_PIN;

            if(UART3_TX==PTB11)
                PORTB_PCR11 = PORT_PCR_MUX(0x3);     /* 在PTB11上使能UART3_RXD */
            else if(UART3_TX==PTC17)
                PORTC_PCR17 = PORT_PCR_MUX(0x3);     /* 在PTC17上使能UART3_RXD */
     89a:	4b5d      	ldr	r3, [pc, #372]	; (a10 <uart_init+0x21c>)
     89c:	f44f 7240 	mov.w	r2, #768	; 0x300
     8a0:	645a      	str	r2, [r3, #68]	; 0x44
            else if(UART3_TX==PTE4)
                PORTE_PCR4 = PORT_PCR_MUX(0x3);      /* 在PTE4上使能UART3_RXD */
            else
                return E_PIN;

            SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;
     8a2:	4959      	ldr	r1, [pc, #356]	; (a08 <uart_init+0x214>)
     8a4:	4b58      	ldr	r3, [pc, #352]	; (a08 <uart_init+0x214>)
     8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     8aa:	f103 0334 	add.w	r3, r3, #52	; 0x34
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8b4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     8b8:	f103 0334 	add.w	r3, r3, #52	; 0x34
     8bc:	601a      	str	r2, [r3, #0]

            break;
     8be:	e030      	b.n	922 <uart_init+0x12e>

        case UART4:
            if(UART4_RX==PTC14)
                PORTC_PCR14 = PORT_PCR_MUX(0x3);     /* 在PTC14上使能UART4_RXD */
            else if(UART4_RX==PTE25)
                PORTE_PCR25 = PORT_PCR_MUX(0x3);     /* 在PTE25上使能UART4_RXD */
     8c0:	4b50      	ldr	r3, [pc, #320]	; (a04 <uart_init+0x210>)
     8c2:	f44f 7240 	mov.w	r2, #768	; 0x300
     8c6:	665a      	str	r2, [r3, #100]	; 0x64
                return E_PIN;

            if(UART4_TX==PTC15)
                PORTC_PCR15 = PORT_PCR_MUX(0x3);     /* 在PTC15上使能UART4_RXD */
            else if(UART4_TX==PTE24)
                PORTE_PCR24 = PORT_PCR_MUX(0x3);     /* 在PTE24上使能UART4_RXD */
     8c8:	4b4e      	ldr	r3, [pc, #312]	; (a04 <uart_init+0x210>)
     8ca:	f44f 7240 	mov.w	r2, #768	; 0x300
     8ce:	661a      	str	r2, [r3, #96]	; 0x60
            else
                return E_PIN;

            SIM_SCGC1 |= SIM_SCGC1_UART4_MASK;
     8d0:	494d      	ldr	r1, [pc, #308]	; (a08 <uart_init+0x214>)
     8d2:	4b4d      	ldr	r3, [pc, #308]	; (a08 <uart_init+0x214>)
     8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     8d8:	f103 0328 	add.w	r3, r3, #40	; 0x28
     8dc:	681b      	ldr	r3, [r3, #0]
     8de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     8e2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     8e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
     8ea:	601a      	str	r2, [r3, #0]

            break;
     8ec:	e019      	b.n	922 <uart_init+0x12e>

        case UART5:
            if(UART5_RX==PTD8)
                PORTD_PCR8 = PORT_PCR_MUX(0x3);     /* 在PTD8上使能UART5_RXD */
            else if(UART5_RX==PTE9)
                PORTE_PCR9 = PORT_PCR_MUX(0x3);     /* 在PTE9上使能UART5_RXD */
     8ee:	4b45      	ldr	r3, [pc, #276]	; (a04 <uart_init+0x210>)
     8f0:	f44f 7240 	mov.w	r2, #768	; 0x300
     8f4:	625a      	str	r2, [r3, #36]	; 0x24
                return E_PIN;

            if(UART5_TX==PTD9)
                PORTD_PCR9 = PORT_PCR_MUX(0x3);     /* 在PTD9上使能UART5_RXD */
            else if(UART5_TX==PTE8)
                PORTE_PCR8 = PORT_PCR_MUX(0x3);     /* 在PTE8上使能UART5_RXD */
     8f6:	4b43      	ldr	r3, [pc, #268]	; (a04 <uart_init+0x210>)
     8f8:	f44f 7240 	mov.w	r2, #768	; 0x300
     8fc:	621a      	str	r2, [r3, #32]
            else
                return E_PIN;

            SIM_SCGC1 |= SIM_SCGC1_UART5_MASK;
     8fe:	4942      	ldr	r1, [pc, #264]	; (a08 <uart_init+0x214>)
     900:	4b41      	ldr	r3, [pc, #260]	; (a08 <uart_init+0x214>)
     902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     906:	f103 0328 	add.w	r3, r3, #40	; 0x28
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     910:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
     914:	f103 0328 	add.w	r3, r3, #40	; 0x28
     918:	601a      	str	r2, [r3, #0]

            break;
     91a:	e002      	b.n	922 <uart_init+0x12e>
        default:
            return E_PAR;
     91c:	f06f 0302 	mvn.w	r3, #2
     920:	e06b      	b.n	9fa <uart_init+0x206>
            break;
    }

    /* 获取串口的基址 */
    UART_MemMapPtr uart_ch = uart_get_base_address(uart_no);
     922:	68f8      	ldr	r0, [r7, #12]
     924:	f000 fa52 	bl	dcc <uart_get_base_address>
     928:	6178      	str	r0, [r7, #20]

    /* 禁止发送接受 */
    UART_C2_REG(uart_ch) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
     92a:	697b      	ldr	r3, [r7, #20]
     92c:	78db      	ldrb	r3, [r3, #3]
     92e:	b2db      	uxtb	r3, r3
     930:	f023 030c 	bic.w	r3, r3, #12
     934:	b2da      	uxtb	r2, r3
     936:	697b      	ldr	r3, [r7, #20]
     938:	70da      	strb	r2, [r3, #3]

    /*  配置成8位无校验模式
     ** 设置UART数据格式、校验方式和停止位位数。通过设置UART模块控制寄存器C1实现 */
    UART_C1_REG(uart_ch) = 0;
     93a:	697b      	ldr	r3, [r7, #20]
     93c:	f04f 0200 	mov.w	r2, #0
     940:	709a      	strb	r2, [r3, #2]

    /* 计算波特率，串口0、1使用内核时钟，其它串口使用外设时钟，系统时钟为外设时钟的2倍 */
    if ((uart_ch == UART0_BASE_PTR) | (uart_ch == UART1_BASE_PTR))
     942:	697a      	ldr	r2, [r7, #20]
     944:	4b33      	ldr	r3, [pc, #204]	; (a14 <uart_init+0x220>)
     946:	429a      	cmp	r2, r3
     948:	bf14      	ite	ne
     94a:	2300      	movne	r3, #0
     94c:	2301      	moveq	r3, #1
     94e:	b2da      	uxtb	r2, r3
     950:	6979      	ldr	r1, [r7, #20]
     952:	4b31      	ldr	r3, [pc, #196]	; (a18 <uart_init+0x224>)
     954:	4299      	cmp	r1, r3
     956:	bf14      	ite	ne
     958:	2300      	movne	r3, #0
     95a:	2301      	moveq	r3, #1
     95c:	b2db      	uxtb	r3, r3
     95e:	ea42 0303 	orr.w	r3, r2, r3
     962:	b2db      	uxtb	r3, r3
     964:	2b00      	cmp	r3, #0
     966:	d006      	beq.n	976 <uart_init+0x182>
    {
        sys_clk = sys_clk * 2000;    /* 内核时钟 换算单位 --> khz */
     968:	68bb      	ldr	r3, [r7, #8]
     96a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
     96e:	fb02 f303 	mul.w	r3, r2, r3
     972:	60bb      	str	r3, [r7, #8]
     974:	e005      	b.n	982 <uart_init+0x18e>
    }
    else
    {
        sys_clk = sys_clk * 1000;    /* 内部总线时钟 换算单位 --> khz */
     976:	68bb      	ldr	r3, [r7, #8]
     978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     97c:	fb02 f303 	mul.w	r3, r2, r3
     980:	60bb      	str	r3, [r7, #8]
    }

    /* 设置 UART 数据通讯波特率。通过设置 UART 模块的波特率寄存器 */
    sbr = (uint16_t)((sys_clk)/(baud << 4));
     982:	687b      	ldr	r3, [r7, #4]
     984:	ea4f 1303 	mov.w	r3, r3, lsl #4
     988:	68ba      	ldr	r2, [r7, #8]
     98a:	fbb2 f3f3 	udiv	r3, r2, r3
     98e:	b29b      	uxth	r3, r3
     990:	461c      	mov	r4, r3

    /* Save off the current value of the UARTx_BDH except for the SBR field */
    temp = UART_BDH_REG(uart_ch) & ~(UART_BDH_SBR(0x1F));
     992:	697b      	ldr	r3, [r7, #20]
     994:	781b      	ldrb	r3, [r3, #0]
     996:	b2db      	uxtb	r3, r3
     998:	f023 031f 	bic.w	r3, r3, #31
     99c:	74fb      	strb	r3, [r7, #19]

    UART_BDH_REG(uart_ch) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
     99e:	f404 53f8 	and.w	r3, r4, #7936	; 0x1f00
     9a2:	ea4f 2313 	mov.w	r3, r3, lsr #8
     9a6:	b2db      	uxtb	r3, r3
     9a8:	f003 031f 	and.w	r3, r3, #31
     9ac:	b2da      	uxtb	r2, r3
     9ae:	7cfb      	ldrb	r3, [r7, #19]
     9b0:	ea42 0303 	orr.w	r3, r2, r3
     9b4:	b2da      	uxtb	r2, r3
     9b6:	697b      	ldr	r3, [r7, #20]
     9b8:	701a      	strb	r2, [r3, #0]
    UART_BDL_REG(uart_ch) = (uint8_t)(sbr & UART_BDL_SBR_MASK);
     9ba:	b2e2      	uxtb	r2, r4
     9bc:	697b      	ldr	r3, [r7, #20]
     9be:	705a      	strb	r2, [r3, #1]

    /* Determine if a fractional divider is needed to get closer to the baud rate
     **brfa = (((sys_clk*32000)/(baud * 16)) - (sbr * 32))  */
    brfa = (((sys_clk << 5)/(baud << 4)) - (sbr << 5));
     9c0:	68bb      	ldr	r3, [r7, #8]
     9c2:	ea4f 1243 	mov.w	r2, r3, lsl #5
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
     9cc:	fbb2 f2f3 	udiv	r2, r2, r3
     9d0:	ea4f 1344 	mov.w	r3, r4, lsl #5
     9d4:	1ad4      	subs	r4, r2, r3

    /* Save off the current value of the UARTx_C4 register except for the BRFA field */
    temp = UART_C4_REG(uart_ch) & ~(UART_C4_BRFA(0x1F));
     9d6:	697b      	ldr	r3, [r7, #20]
     9d8:	7a9b      	ldrb	r3, [r3, #10]
     9da:	b2db      	uxtb	r3, r3
     9dc:	f023 031f 	bic.w	r3, r3, #31
     9e0:	74fb      	strb	r3, [r7, #19]

    UART_C4_REG(uart_ch) = temp |  UART_C4_BRFA(brfa);
     9e2:	b2e3      	uxtb	r3, r4
     9e4:	f003 031f 	and.w	r3, r3, #31
     9e8:	b2da      	uxtb	r2, r3
     9ea:	7cfb      	ldrb	r3, [r7, #19]
     9ec:	ea42 0303 	orr.w	r3, r2, r3
     9f0:	b2da      	uxtb	r2, r3
     9f2:	697b      	ldr	r3, [r7, #20]
     9f4:	729a      	strb	r2, [r3, #10]

    /*  设置是否允许接收和发送中断。通过设置 UART 模块的 C2 寄存器的
     ** RIE 和 TIE 位实现。如果使能中断，必须首先实现中断服务程序 */

    return E_OK;
     9f6:	f04f 0300 	mov.w	r3, #0
}
     9fa:	4618      	mov	r0, r3
     9fc:	f107 071c 	add.w	r7, r7, #28
     a00:	46bd      	mov	sp, r7
     a02:	bd90      	pop	{r4, r7, pc}
     a04:	4004d000 	.word	0x4004d000
     a08:	40047000 	.word	0x40047000
     a0c:	4004c000 	.word	0x4004c000
     a10:	4004b000 	.word	0x4004b000
     a14:	4006a000 	.word	0x4006a000
     a18:	4006b000 	.word	0x4006b000

00000a1c <uart_getready>:
 *
 *  @return 0
 */
Inline bool_t
uart_getready(SIOPCB *p_siopcb)
{
     a1c:	b480      	push	{r7}
     a1e:	b085      	sub	sp, #20
     a20:	af00      	add	r7, sp, #0
     a22:	6078      	str	r0, [r7, #4]
    uint_t time = 0;
     a24:	f04f 0300 	mov.w	r3, #0
     a28:	60fb      	str	r3, [r7, #12]

    /* 等待发送缓冲区空 */
    while(!(UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_RDRF_MASK))
     a2a:	e010      	b.n	a4e <uart_getready+0x32>
    {
        time++;
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	f103 0301 	add.w	r3, r3, #1
     a32:	60fb      	str	r3, [r7, #12]
        if(time > 0xFFBB)
     a34:	68fa      	ldr	r2, [r7, #12]
     a36:	f64f 73bb 	movw	r3, #65467	; 0xffbb
     a3a:	429a      	cmp	r2, r3
     a3c:	d907      	bls.n	a4e <uart_getready+0x32>
        {
            /* 发送超时 */
            return (UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_RDRF_MASK);
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	791b      	ldrb	r3, [r3, #4]
     a46:	b2db      	uxtb	r3, r3
     a48:	f003 0320 	and.w	r3, r3, #32
     a4c:	e00f      	b.n	a6e <uart_getready+0x52>
uart_getready(SIOPCB *p_siopcb)
{
    uint_t time = 0;

    /* 等待发送缓冲区空 */
    while(!(UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_RDRF_MASK))
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	791b      	ldrb	r3, [r3, #4]
     a56:	b2db      	uxtb	r3, r3
     a58:	f003 0320 	and.w	r3, r3, #32
     a5c:	2b00      	cmp	r3, #0
     a5e:	d0e5      	beq.n	a2c <uart_getready+0x10>
            return (UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_RDRF_MASK);
        }
    }

    /* 发送成功 */
    return (UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_RDRF_MASK);
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	681b      	ldr	r3, [r3, #0]
     a66:	791b      	ldrb	r3, [r3, #4]
     a68:	b2db      	uxtb	r3, r3
     a6a:	f003 0320 	and.w	r3, r3, #32
}
     a6e:	4618      	mov	r0, r3
     a70:	f107 0714 	add.w	r7, r7, #20
     a74:	46bd      	mov	sp, r7
     a76:	bc80      	pop	{r7}
     a78:	4770      	bx	lr
     a7a:	bf00      	nop

00000a7c <uart_putready>:
/**
 * @brief ready to output
 */
Inline bool_t
uart_putready(SIOPCB *p_siopcb)
{
     a7c:	b480      	push	{r7}
     a7e:	b085      	sub	sp, #20
     a80:	af00      	add	r7, sp, #0
     a82:	6078      	str	r0, [r7, #4]
    uint_t time = 0;
     a84:	f04f 0300 	mov.w	r3, #0
     a88:	60fb      	str	r3, [r7, #12]

    /* 等待发送缓冲区空 */
    while(!(UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_TDRE_MASK))
     a8a:	e010      	b.n	aae <uart_putready+0x32>
    {
        time++;
     a8c:	68fb      	ldr	r3, [r7, #12]
     a8e:	f103 0301 	add.w	r3, r3, #1
     a92:	60fb      	str	r3, [r7, #12]
        if(time > 0xFFBB)
     a94:	68fa      	ldr	r2, [r7, #12]
     a96:	f64f 73bb 	movw	r3, #65467	; 0xffbb
     a9a:	429a      	cmp	r2, r3
     a9c:	d907      	bls.n	aae <uart_putready+0x32>
        {
            /* 发送超时 */
            return (UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_TDRE_MASK);
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	791b      	ldrb	r3, [r3, #4]
     aa6:	b2db      	uxtb	r3, r3
     aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     aac:	e00f      	b.n	ace <uart_putready+0x52>
uart_putready(SIOPCB *p_siopcb)
{
    uint_t time = 0;

    /* 等待发送缓冲区空 */
    while(!(UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_TDRE_MASK))
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	791b      	ldrb	r3, [r3, #4]
     ab6:	b2db      	uxtb	r3, r3
     ab8:	b2db      	uxtb	r3, r3
     aba:	b25b      	sxtb	r3, r3
     abc:	2b00      	cmp	r3, #0
     abe:	dae5      	bge.n	a8c <uart_putready+0x10>
            return (UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_TDRE_MASK);
        }
    }

    /* 发送成功 */
    return (UART_S1_REG(p_siopcb->p_siopinib->uart_base) & UART_S1_TDRE_MASK);
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	681b      	ldr	r3, [r3, #0]
     ac6:	791b      	ldrb	r3, [r3, #4]
     ac8:	b2db      	uxtb	r3, r3
     aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
     ace:	4618      	mov	r0, r3
     ad0:	f107 0714 	add.w	r7, r7, #20
     ad4:	46bd      	mov	sp, r7
     ad6:	bc80      	pop	{r7}
     ad8:	4770      	bx	lr
     ada:	bf00      	nop

00000adc <uart_getchar>:
/**
 * @brief get an char from input reg or buffer
 */
Inline uint8_t
uart_getchar(SIOPCB *p_siopcb)
{
     adc:	b480      	push	{r7}
     ade:	b083      	sub	sp, #12
     ae0:	af00      	add	r7, sp, #0
     ae2:	6078      	str	r0, [r7, #4]
    /* Return the 8-bit data from the receiver */
    return UART_D_REG(p_siopcb->p_siopinib->uart_base);
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	79db      	ldrb	r3, [r3, #7]
     aec:	b2db      	uxtb	r3, r3
}
     aee:	4618      	mov	r0, r3
     af0:	f107 070c 	add.w	r7, r7, #12
     af4:	46bd      	mov	sp, r7
     af6:	bc80      	pop	{r7}
     af8:	4770      	bx	lr
     afa:	bf00      	nop

00000afc <uart_putchar>:
/**
 * @brief write an char into the send reg or buffer
 */
Inline void
uart_putchar(SIOPCB *p_siopcb, uint8_t c)
{
     afc:	b480      	push	{r7}
     afe:	b083      	sub	sp, #12
     b00:	af00      	add	r7, sp, #0
     b02:	6078      	str	r0, [r7, #4]
     b04:	460b      	mov	r3, r1
     b06:	70fb      	strb	r3, [r7, #3]
    /* 发送数据 */
    UART_D_REG(p_siopcb->p_siopinib->uart_base) = c;
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	681b      	ldr	r3, [r3, #0]
     b0e:	78fa      	ldrb	r2, [r7, #3]
     b10:	71da      	strb	r2, [r3, #7]
}
     b12:	f107 070c 	add.w	r7, r7, #12
     b16:	46bd      	mov	sp, r7
     b18:	bc80      	pop	{r7}
     b1a:	4770      	bx	lr

00000b1c <sio_initialize>:
/**
 * @brief initial sio
 */
void
sio_initialize(intptr_t exinf)
{
     b1c:	b480      	push	{r7}
     b1e:	b085      	sub	sp, #20
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
    uint_t  i;

    /*
     *  init the control block
     */
    for (p_siopcb = siopcb_table, i = 0; i < TNUM_SIOP; p_siopcb++, i++) {
     b24:	4b0e      	ldr	r3, [pc, #56]	; (b60 <sio_initialize+0x44>)
     b26:	60fb      	str	r3, [r7, #12]
     b28:	f04f 0300 	mov.w	r3, #0
     b2c:	60bb      	str	r3, [r7, #8]
     b2e:	e00e      	b.n	b4e <sio_initialize+0x32>
        p_siopcb->p_siopinib = &(siopinib_table[i]);
     b30:	68bb      	ldr	r3, [r7, #8]
     b32:	ea4f 02c3 	mov.w	r2, r3, lsl #3
     b36:	4b0b      	ldr	r3, [pc, #44]	; (b64 <sio_initialize+0x48>)
     b38:	18d2      	adds	r2, r2, r3
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	601a      	str	r2, [r3, #0]
    uint_t  i;

    /*
     *  init the control block
     */
    for (p_siopcb = siopcb_table, i = 0; i < TNUM_SIOP; p_siopcb++, i++) {
     b3e:	68fb      	ldr	r3, [r7, #12]
     b40:	f103 0314 	add.w	r3, r3, #20
     b44:	60fb      	str	r3, [r7, #12]
     b46:	68bb      	ldr	r3, [r7, #8]
     b48:	f103 0301 	add.w	r3, r3, #1
     b4c:	60bb      	str	r3, [r7, #8]
     b4e:	68bb      	ldr	r3, [r7, #8]
     b50:	2b01      	cmp	r3, #1
     b52:	d9ed      	bls.n	b30 <sio_initialize+0x14>
        p_siopcb->p_siopinib = &(siopinib_table[i]);
    }
}
     b54:	f107 0714 	add.w	r7, r7, #20
     b58:	46bd      	mov	sp, r7
     b5a:	bc80      	pop	{r7}
     b5c:	4770      	bx	lr
     b5e:	bf00      	nop
     b60:	1fff87e4 	.word	0x1fff87e4
     b64:	00002adc 	.word	0x00002adc

00000b68 <sio_opn_por>:
/**
 * @brief open serail IO
 */
SIOPCB *
sio_opn_por(ID siopid, intptr_t exinf)
{
     b68:	b580      	push	{r7, lr}
     b6a:	b086      	sub	sp, #24
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
     b70:	6039      	str	r1, [r7, #0]
    const SIOPINIB  *p_siopinib;
    SIOPCB  *p_siopcb = get_siopcb(siopid);
     b72:	687a      	ldr	r2, [r7, #4]
     b74:	4613      	mov	r3, r2
     b76:	ea4f 0383 	mov.w	r3, r3, lsl #2
     b7a:	189b      	adds	r3, r3, r2
     b7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
     b80:	461a      	mov	r2, r3
     b82:	4b32      	ldr	r3, [pc, #200]	; (c4c <sio_opn_por+0xe4>)
     b84:	18d3      	adds	r3, r2, r3
     b86:	617b      	str	r3, [r7, #20]
    
    p_siopinib = p_siopcb->p_siopinib;
     b88:	697b      	ldr	r3, [r7, #20]
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	613b      	str	r3, [r7, #16]
    p_siopcb->exinf = exinf;
     b8e:	697b      	ldr	r3, [r7, #20]
     b90:	683a      	ldr	r2, [r7, #0]
     b92:	605a      	str	r2, [r3, #4]

    /* 第一次打开需要初始化 */
    if (!(p_siopcb->intialized)) {
     b94:	697b      	ldr	r3, [r7, #20]
     b96:	691b      	ldr	r3, [r3, #16]
     b98:	2b00      	cmp	r3, #0
     b9a:	d10a      	bne.n	bb2 <sio_opn_por+0x4a>
        uart_init (siopid, TARGET_UART_CLK, TARGET_UART_BAUD);
     b9c:	6878      	ldr	r0, [r7, #4]
     b9e:	f24c 3150 	movw	r1, #50000	; 0xc350
     ba2:	f44f 4261 	mov.w	r2, #57600	; 0xe100
     ba6:	f7ff fe25 	bl	7f4 <uart_init>
        p_siopcb->intialized = TRUE;
     baa:	697b      	ldr	r3, [r7, #20]
     bac:	f04f 0201 	mov.w	r2, #1
     bb0:	611a      	str	r2, [r3, #16]

    /**
     *  允许串口发送和接收工作
     */
     /* 获取串口的基址 */
    UART_MemMapPtr uart_ch = uart_get_base_address(siopid);
     bb2:	6878      	ldr	r0, [r7, #4]
     bb4:	f000 f90a 	bl	dcc <uart_get_base_address>
     bb8:	60f8      	str	r0, [r7, #12]
    UART_C2_REG(uart_ch) |= (UART_C2_TE_MASK | UART_C2_RE_MASK);
     bba:	68fb      	ldr	r3, [r7, #12]
     bbc:	78db      	ldrb	r3, [r3, #3]
     bbe:	b2db      	uxtb	r3, r3
     bc0:	f043 030c 	orr.w	r3, r3, #12
     bc4:	b2da      	uxtb	r2, r3
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	70da      	strb	r2, [r3, #3]

    /**
     *  使能中断
     */
    switch(UART_ID_SET(siopid))
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
     bd0:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
     bd4:	2b05      	cmp	r3, #5
     bd6:	d827      	bhi.n	c28 <sio_opn_por+0xc0>
     bd8:	a201      	add	r2, pc, #4	; (adr r2, be0 <sio_opn_por+0x78>)
     bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bde:	bf00      	nop
     be0:	00000bf9 	.word	0x00000bf9
     be4:	00000c11 	.word	0x00000c11
     be8:	00000c29 	.word	0x00000c29
     bec:	00000c29 	.word	0x00000c29
     bf0:	00000c29 	.word	0x00000c29
     bf4:	00000c29 	.word	0x00000c29
    {
        case UART0:
            exc_install(INT_UART0_RX_TX, sio_handler0);
     bf8:	f04f 003d 	mov.w	r0, #61	; 0x3d
     bfc:	4914      	ldr	r1, [pc, #80]	; (c50 <sio_opn_por+0xe8>)
     bfe:	f000 f943 	bl	e88 <exc_install>
            exc_set_pri(INT_UART0_RX_TX, SIO_PRI);
     c02:	f04f 003d 	mov.w	r0, #61	; 0x3d
     c06:	f04f 0102 	mov.w	r1, #2
     c0a:	f000 f951 	bl	eb0 <exc_set_pri>
            break;
     c0e:	e00b      	b.n	c28 <sio_opn_por+0xc0>
        case UART3:
            //exc_install(INT_UART3_RX_TX, sio_handler3);
            //exc_set_pri(INT_UART3_RX_TX, SIO_PRI);
            break;
        case UART4:
            exc_install(INT_UART4_RX_TX, sio_handler4);
     c10:	f04f 0045 	mov.w	r0, #69	; 0x45
     c14:	490f      	ldr	r1, [pc, #60]	; (c54 <sio_opn_por+0xec>)
     c16:	f000 f937 	bl	e88 <exc_install>
            exc_set_pri(INT_UART4_RX_TX, SIO_PRI);
     c1a:	f04f 0045 	mov.w	r0, #69	; 0x45
     c1e:	f04f 0102 	mov.w	r1, #2
     c22:	f000 f945 	bl	eb0 <exc_set_pri>
            break;
     c26:	bf00      	nop
            //exc_install(INT_UART5_RX_TX, sio_handler5);
            //exc_set_pri(INT_UART5_RX_TX, SIO_PRI);
            break;
    }
    /* 开放UART接收中断 */
    UART_C2_REG(uart_ch)|=UART_C2_RIE_MASK;
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	78db      	ldrb	r3, [r3, #3]
     c2c:	b2db      	uxtb	r3, r3
     c2e:	f043 0320 	orr.w	r3, r3, #32
     c32:	b2da      	uxtb	r2, r3
     c34:	68fb      	ldr	r3, [r7, #12]
     c36:	70da      	strb	r2, [r3, #3]
    /* 开接收引脚的IRQ中断 */
    exc_enable(INT_UART4_RX_TX);
     c38:	f04f 0045 	mov.w	r0, #69	; 0x45
     c3c:	f000 f964 	bl	f08 <exc_enable>

    /* something left to do */
    return(p_siopcb);
     c40:	697b      	ldr	r3, [r7, #20]
}
     c42:	4618      	mov	r0, r3
     c44:	f107 0718 	add.w	r7, r7, #24
     c48:	46bd      	mov	sp, r7
     c4a:	bd80      	pop	{r7, pc}
     c4c:	1fff87e4 	.word	0x1fff87e4
     c50:	00000c59 	.word	0x00000c59
     c54:	00000ce9 	.word	0x00000ce9

00000c58 <sio_handler0>:
/**
 * @brief serial interrupt io handler
 */
void
sio_handler0(void)
{
     c58:	b580      	push	{r7, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	af00      	add	r7, sp, #0
    uint32_t status = 0;
     c5e:	f04f 0300 	mov.w	r3, #0
     c62:	607b      	str	r3, [r7, #4]
    SIOPCB *p_siopcb = &(siopcb_table[0]);
     c64:	4b1f      	ldr	r3, [pc, #124]	; (ce4 <sio_handler0+0x8c>)
     c66:	603b      	str	r3, [r7, #0]
     * The UnIIR must be read in order to clear the interrupt prior to exiting the
     * Interrupt Service Routine.
     */

    /* 关中断 */
    exc_disable(INT_UART0_RX_TX);
     c68:	f04f 003d 	mov.w	r0, #61	; 0x3d
     c6c:	f000 f9e0 	bl	1030 <exc_disable>

    do
    {
        //status = sil_rew_mem(p_siopcb->p_siopinib->uart_base+UxIIR);
        switch(status & 0x0E)
     c70:	687b      	ldr	r3, [r7, #4]
     c72:	f003 030e 	and.w	r3, r3, #14
     c76:	f1a3 0302 	sub.w	r3, r3, #2
     c7a:	2b0a      	cmp	r3, #10
     c7c:	d824      	bhi.n	cc8 <sio_handler0+0x70>
     c7e:	a201      	add	r2, pc, #4	; (adr r2, c84 <sio_handler0+0x2c>)
     c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c84:	00000cbd 	.word	0x00000cbd
     c88:	00000cc9 	.word	0x00000cc9
     c8c:	00000cb1 	.word	0x00000cb1
     c90:	00000cc9 	.word	0x00000cc9
     c94:	00000cc9 	.word	0x00000cc9
     c98:	00000cc9 	.word	0x00000cc9
     c9c:	00000cc9 	.word	0x00000cc9
     ca0:	00000cc9 	.word	0x00000cc9
     ca4:	00000cc9 	.word	0x00000cc9
     ca8:	00000cc9 	.word	0x00000cc9
     cac:	00000cc9 	.word	0x00000cc9
          case 0x6:
                  /* Rx Error */
                  break;
          case 0x4:
                  /* Rx int */
                  sio_irdy_rcv(p_siopcb->exinf);
     cb0:	683b      	ldr	r3, [r7, #0]
     cb2:	685b      	ldr	r3, [r3, #4]
     cb4:	4618      	mov	r0, r3
     cb6:	f000 ffbd 	bl	1c34 <sio_irdy_rcv>
                  break;
     cba:	e006      	b.n	cca <sio_handler0+0x72>
          case 0xc:
                  /* Rx timeout, read the RBR */
                  break;
          case 0x2:
                  sio_irdy_snd(p_siopcb->exinf);
     cbc:	683b      	ldr	r3, [r7, #0]
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	4618      	mov	r0, r3
     cc2:	f000 ff59 	bl	1b78 <sio_irdy_snd>
                  break;
     cc6:	e000      	b.n	cca <sio_handler0+0x72>
                  /* Tx int */
          default :
                  break;
     cc8:	bf00      	nop

         }
    }while(!(status & 0x1));
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	f003 0301 	and.w	r3, r3, #1
     cd0:	2b00      	cmp	r3, #0
     cd2:	d0cd      	beq.n	c70 <sio_handler0+0x18>

    /* 开中断 */
    exc_enable(INT_UART0_RX_TX);
     cd4:	f04f 003d 	mov.w	r0, #61	; 0x3d
     cd8:	f000 f916 	bl	f08 <exc_enable>

}
     cdc:	f107 0708 	add.w	r7, r7, #8
     ce0:	46bd      	mov	sp, r7
     ce2:	bd80      	pop	{r7, pc}
     ce4:	1fff87e4 	.word	0x1fff87e4

00000ce8 <sio_handler4>:
/**
 * @brief  for seari IO. lpc2478 has 3 serail io
 */
void
sio_handler4(void)
{    
     ce8:	b580      	push	{r7, lr}
     cea:	b082      	sub	sp, #8
     cec:	af00      	add	r7, sp, #0
    SIOPCB *p_siopcb = &(siopcb_table[1]);
     cee:	4b09      	ldr	r3, [pc, #36]	; (d14 <sio_handler4+0x2c>)
     cf0:	607b      	str	r3, [r7, #4]

    //status = sil_rew_mem(p_siopcb->p_siopinib->uart_base+UxIIR);
    /* 关中断 */
    exc_disable(INT_UART4_RX_TX);
     cf2:	f04f 0045 	mov.w	r0, #69	; 0x45
     cf6:	f000 f99b 	bl	1030 <exc_disable>

    sio_irdy_rcv(p_siopcb->exinf);
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	685b      	ldr	r3, [r3, #4]
     cfe:	4618      	mov	r0, r3
     d00:	f000 ff98 	bl	1c34 <sio_irdy_rcv>

    /* 开中断 */
    exc_enable(INT_UART4_RX_TX);
     d04:	f04f 0045 	mov.w	r0, #69	; 0x45
     d08:	f000 f8fe 	bl	f08 <exc_enable>
}
     d0c:	f107 0708 	add.w	r7, r7, #8
     d10:	46bd      	mov	sp, r7
     d12:	bd80      	pop	{r7, pc}
     d14:	1fff87f8 	.word	0x1fff87f8

00000d18 <sio_snd_chr>:
 * @brief output an char by serial io
 *        callback routine
 */
bool_t
sio_snd_chr( SIOPCB *siopcb, char_t c)
{
     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
     d20:	460b      	mov	r3, r1
     d22:	70fb      	strb	r3, [r7, #3]
    if (uart_putready(siopcb)){
     d24:	6878      	ldr	r0, [r7, #4]
     d26:	f7ff fea9 	bl	a7c <uart_putready>
     d2a:	4603      	mov	r3, r0
     d2c:	2b00      	cmp	r3, #0
     d2e:	d007      	beq.n	d40 <sio_snd_chr+0x28>
        uart_putchar(siopcb, c);
     d30:	78fb      	ldrb	r3, [r7, #3]
     d32:	6878      	ldr	r0, [r7, #4]
     d34:	4619      	mov	r1, r3
     d36:	f7ff fee1 	bl	afc <uart_putchar>
        return(TRUE);
     d3a:	f04f 0301 	mov.w	r3, #1
     d3e:	e001      	b.n	d44 <sio_snd_chr+0x2c>
    }
    return(FALSE);
     d40:	f04f 0300 	mov.w	r3, #0
}
     d44:	4618      	mov	r0, r3
     d46:	f107 0708 	add.w	r7, r7, #8
     d4a:	46bd      	mov	sp, r7
     d4c:	bd80      	pop	{r7, pc}
     d4e:	bf00      	nop

00000d50 <sio_rcv_chr>:
 *  @brief  input an char by serial io
 *           callback routine
 */
int_t
sio_rcv_chr(SIOPCB *siopcb)
{
     d50:	b580      	push	{r7, lr}
     d52:	b082      	sub	sp, #8
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
    if (uart_getready(siopcb)) {
     d58:	6878      	ldr	r0, [r7, #4]
     d5a:	f7ff fe5f 	bl	a1c <uart_getready>
     d5e:	4603      	mov	r3, r0
     d60:	2b00      	cmp	r3, #0
     d62:	d004      	beq.n	d6e <sio_rcv_chr+0x1e>
        return((int_t)(uint8_t)uart_getchar(siopcb));
     d64:	6878      	ldr	r0, [r7, #4]
     d66:	f7ff feb9 	bl	adc <uart_getchar>
     d6a:	4603      	mov	r3, r0
     d6c:	e001      	b.n	d72 <sio_rcv_chr+0x22>
    }
    return (-1);
     d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
     d72:	4618      	mov	r0, r3
     d74:	f107 0708 	add.w	r7, r7, #8
     d78:	46bd      	mov	sp, r7
     d7a:	bd80      	pop	{r7, pc}

00000d7c <sio_ena_cbr>:
/**
 * @brief  enable serial io callback routine
 */
void
sio_ena_cbr(SIOPCB *siopcb, uint_t cbrtn)
{
     d7c:	b480      	push	{r7}
     d7e:	b085      	sub	sp, #20
     d80:	af00      	add	r7, sp, #0
     d82:	6078      	str	r0, [r7, #4]
     d84:	6039      	str	r1, [r7, #0]
    const SIOPINIB  *p_siopinib;

    p_siopinib = siopcb->p_siopinib;
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	60fb      	str	r3, [r7, #12]

    switch (cbrtn) {
     d8c:	683b      	ldr	r3, [r7, #0]
     d8e:	2b01      	cmp	r3, #1
     d90:	d001      	beq.n	d96 <sio_ena_cbr+0x1a>
     d92:	2b02      	cmp	r3, #2
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) | 0x02);
            break;
        case SIO_RDY_RCV:
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) | 0x01);
            /* enable Rx interrupt */
            break;
     d94:	e000      	b.n	d98 <sio_ena_cbr+0x1c>

    switch (cbrtn) {
        case SIO_RDY_SND:
            /* enable Tx interrupt */
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) | 0x02);
            break;
     d96:	bf00      	nop
        case SIO_RDY_RCV:
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) | 0x01);
            /* enable Rx interrupt */
            break;
    }
}
     d98:	f107 0714 	add.w	r7, r7, #20
     d9c:	46bd      	mov	sp, r7
     d9e:	bc80      	pop	{r7}
     da0:	4770      	bx	lr
     da2:	bf00      	nop

00000da4 <sio_dis_cbr>:
/**
 * @brief disable callback routine
 */
void
sio_dis_cbr(SIOPCB *siopcb, uint_t cbrtn)
{
     da4:	b480      	push	{r7}
     da6:	b085      	sub	sp, #20
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
     dac:	6039      	str	r1, [r7, #0]

    const SIOPINIB  *p_siopinib;

    p_siopinib = siopcb->p_siopinib;
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	681b      	ldr	r3, [r3, #0]
     db2:	60fb      	str	r3, [r7, #12]

    switch (cbrtn) {
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	2b01      	cmp	r3, #1
     db8:	d001      	beq.n	dbe <sio_dis_cbr+0x1a>
     dba:	2b02      	cmp	r3, #2
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) & 0xfd);
            break;
        case SIO_RDY_RCV:
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) & 0xfe);
            /* disable Rx interrupt */
            break;
     dbc:	e000      	b.n	dc0 <sio_dis_cbr+0x1c>

    switch (cbrtn) {
        case SIO_RDY_SND:
            /* disable Tx interrupt */
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) & 0xfd);
            break;
     dbe:	bf00      	nop
        case SIO_RDY_RCV:
            //sil_wrb_mem(p_siopinib->uart_base+UxIER,sil_reb_mem(p_siopinib->uart_base+UxIER) & 0xfe);
            /* disable Rx interrupt */
            break;
    }
}
     dc0:	f107 0714 	add.w	r7, r7, #20
     dc4:	46bd      	mov	sp, r7
     dc6:	bc80      	pop	{r7}
     dc8:	4770      	bx	lr
     dca:	bf00      	nop

00000dcc <uart_get_base_address>:
 *
 * @return 串口的基址值
 */
static UART_MemMapPtr
uart_get_base_address(ID uart_no)
{
     dcc:	b480      	push	{r7}
     dce:	b083      	sub	sp, #12
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
    switch(UART_ID_SET(uart_no))
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
     dda:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
     dde:	2b05      	cmp	r3, #5
     de0:	d81a      	bhi.n	e18 <uart_get_base_address+0x4c>
     de2:	a201      	add	r2, pc, #4	; (adr r2, de8 <uart_get_base_address+0x1c>)
     de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     de8:	00000e01 	.word	0x00000e01
     dec:	00000e11 	.word	0x00000e11
     df0:	00000e09 	.word	0x00000e09
     df4:	00000e0d 	.word	0x00000e0d
     df8:	00000e05 	.word	0x00000e05
     dfc:	00000e15 	.word	0x00000e15
    {
        case UART0:
            return UART0_BASE_PTR;
     e00:	4b09      	ldr	r3, [pc, #36]	; (e28 <uart_get_base_address+0x5c>)
     e02:	e00b      	b.n	e1c <uart_get_base_address+0x50>
            break;
        case UART1:
            return UART1_BASE_PTR;
     e04:	4b09      	ldr	r3, [pc, #36]	; (e2c <uart_get_base_address+0x60>)
     e06:	e009      	b.n	e1c <uart_get_base_address+0x50>
            break;
        case UART2:
            return UART2_BASE_PTR;
     e08:	4b09      	ldr	r3, [pc, #36]	; (e30 <uart_get_base_address+0x64>)
     e0a:	e007      	b.n	e1c <uart_get_base_address+0x50>
            break;
        case UART3:
            return UART3_BASE_PTR;
     e0c:	4b09      	ldr	r3, [pc, #36]	; (e34 <uart_get_base_address+0x68>)
     e0e:	e005      	b.n	e1c <uart_get_base_address+0x50>
            break;
        case UART4:
            return UART4_BASE_PTR;
     e10:	4b09      	ldr	r3, [pc, #36]	; (e38 <uart_get_base_address+0x6c>)
     e12:	e003      	b.n	e1c <uart_get_base_address+0x50>
            break;
        case UART5:
            return UART5_BASE_PTR;
     e14:	4b09      	ldr	r3, [pc, #36]	; (e3c <uart_get_base_address+0x70>)
     e16:	e001      	b.n	e1c <uart_get_base_address+0x50>
            break;
        default :
            return NULL;
     e18:	f04f 0300 	mov.w	r3, #0
    }
}
     e1c:	4618      	mov	r0, r3
     e1e:	f107 070c 	add.w	r7, r7, #12
     e22:	46bd      	mov	sp, r7
     e24:	bc80      	pop	{r7}
     e26:	4770      	bx	lr
     e28:	4006a000 	.word	0x4006a000
     e2c:	4006b000 	.word	0x4006b000
     e30:	4006c000 	.word	0x4006c000
     e34:	4006d000 	.word	0x4006d000
     e38:	400ea000 	.word	0x400ea000
     e3c:	400eb000 	.word	0x400eb000

00000e40 <clear_faultmask>:
 * @brief clear faultmask
 *
 * @return 
 */
Inline void clear_faultmask(void)
{
     e40:	b480      	push	{r7}
     e42:	af00      	add	r7, sp, #0
	Asm ("cpsie f":::"memory");
     e44:	b661      	cpsie	f
}
     e46:	46bd      	mov	sp, r7
     e48:	bc80      	pop	{r7}
     e4a:	4770      	bx	lr

00000e4c <clear_primask>:
 * @brief clear interrupt priority mask
 *
 * @return 
 */
Inline void
clear_primask(void){
     e4c:	b480      	push	{r7}
     e4e:	af00      	add	r7, sp, #0
	Asm("cpsie i":::"memory");
     e50:	b662      	cpsie	i
}
     e52:	46bd      	mov	sp, r7
     e54:	bc80      	pop	{r7}
     e56:	4770      	bx	lr

00000e58 <set_basepri>:
 * @param val base priority
 *
 * @return 
 */
Inline void
set_basepri(uint32_t val){
     e58:	b480      	push	{r7}
     e5a:	b083      	sub	sp, #12
     e5c:	af00      	add	r7, sp, #0
     e5e:	6078      	str	r0, [r7, #4]
	Asm("msr BASEPRI, %0" : : "r"(val) : "memory");
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	f383 8811 	msr	BASEPRI, r3
}
     e66:	f107 070c 	add.w	r7, r7, #12
     e6a:	46bd      	mov	sp, r7
     e6c:	bc80      	pop	{r7}
     e6e:	4770      	bx	lr

00000e70 <nmi_handler>:

/**
 * @brief 
 */
void nmi_handler(void)
{
     e70:	b480      	push	{r7}
     e72:	af00      	add	r7, sp, #0
	while(1);
     e74:	e7fe      	b.n	e74 <nmi_handler+0x4>
     e76:	bf00      	nop

00000e78 <hard_fault_handler>:

/**
 * @brief 
 */
void hard_fault_handler(void)
{
     e78:	b480      	push	{r7}
     e7a:	af00      	add	r7, sp, #0
	while(1);
     e7c:	e7fe      	b.n	e7c <hard_fault_handler+0x4>
     e7e:	bf00      	nop

00000e80 <default_exc_handler>:

/**
 * @brief 
 */
void default_exc_handler(void)
{
     e80:	b480      	push	{r7}
     e82:	af00      	add	r7, sp, #0
	while(1);
     e84:	e7fe      	b.n	e84 <default_exc_handler+0x4>
     e86:	bf00      	nop

00000e88 <exc_install>:
 *
 * @param excno exception no.	
 * @param exchdr exception handler
 */
void exc_install(uint32_t excno, FP exchdr)
{
     e88:	b480      	push	{r7}
     e8a:	b083      	sub	sp, #12
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
     e90:	6039      	str	r1, [r7, #0]
	 *(((FP*)vector_table) + excno) = exchdr;
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	ea4f 0283 	mov.w	r2, r3, lsl #2
     e98:	4b04      	ldr	r3, [pc, #16]	; (eac <exc_install+0x24>)
     e9a:	18d3      	adds	r3, r2, r3
     e9c:	683a      	ldr	r2, [r7, #0]
     e9e:	601a      	str	r2, [r3, #0]
}
     ea0:	f107 070c 	add.w	r7, r7, #12
     ea4:	46bd      	mov	sp, r7
     ea6:	bc80      	pop	{r7}
     ea8:	4770      	bx	lr
     eaa:	bf00      	nop
     eac:	1fff8200 	.word	0x1fff8200

00000eb0 <exc_set_pri>:
 *
 * @param excno	exception no.
 * @param pri	exception priority
 */
void exc_set_pri(uint32_t excno, uint8_t pri)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
	if (excno <= 15 && excno >= 4) {	/* system excepitons */
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	2b0f      	cmp	r3, #15
     ec0:	d80b      	bhi.n	eda <exc_set_pri+0x2a>
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	2b03      	cmp	r3, #3
     ec6:	d908      	bls.n	eda <exc_set_pri+0x2a>
		*((volatile uint8_t *)(0xE000ED18 + excno)) = (pri & 0xF) << 4;
     ec8:	687a      	ldr	r2, [r7, #4]
     eca:	4b0d      	ldr	r3, [pc, #52]	; (f00 <exc_set_pri+0x50>)
     ecc:	18d3      	adds	r3, r2, r3
     ece:	78fa      	ldrb	r2, [r7, #3]
     ed0:	ea4f 1202 	mov.w	r2, r2, lsl #4
     ed4:	b2d2      	uxtb	r2, r2
     ed6:	701a      	strb	r2, [r3, #0]
     ed8:	e00c      	b.n	ef4 <exc_set_pri+0x44>
	}	
	else if (excno > 15) {	/* target define exceptions */
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	2b0f      	cmp	r3, #15
     ede:	d909      	bls.n	ef4 <exc_set_pri+0x44>
		NVIC_IP(excno) = (pri & 0xF) << 4;
     ee0:	4908      	ldr	r1, [pc, #32]	; (f04 <exc_set_pri+0x54>)
     ee2:	78fb      	ldrb	r3, [r7, #3]
     ee4:	ea4f 1303 	mov.w	r3, r3, lsl #4
     ee8:	b2da      	uxtb	r2, r3
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	18cb      	adds	r3, r1, r3
     eee:	f503 7340 	add.w	r3, r3, #768	; 0x300
     ef2:	701a      	strb	r2, [r3, #0]
	}
}
     ef4:	f107 070c 	add.w	r7, r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	bc80      	pop	{r7}
     efc:	4770      	bx	lr
     efe:	bf00      	nop
     f00:	e000ed18 	.word	0xe000ed18
     f04:	e000e100 	.word	0xe000e100

00000f08 <exc_enable>:
 * @brief enable exception
 *
 * @param excno exception no
 */
void exc_enable(uint32_t excno)
{
     f08:	b480      	push	{r7}
     f0a:	b085      	sub	sp, #20
     f0c:	af00      	add	r7, sp, #0
     f0e:	6078      	str	r0, [r7, #4]
	uint32_t div;
	uint32_t bits;

	if (excno > 15)
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	2b0f      	cmp	r3, #15
     f14:	d95a      	bls.n	fcc <exc_enable+0xc4>
	{
		/* 将中断向量号转换为中断请求号 */
		excno -= 16;
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	f1a3 0310 	sub.w	r3, r3, #16
     f1c:	607b      	str	r3, [r7, #4]

		div = excno / 32;
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	ea4f 1353 	mov.w	r3, r3, lsr #5
     f24:	60fb      	str	r3, [r7, #12]
		bits = excno % 32;
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	f003 031f 	and.w	r3, r3, #31
     f2c:	60bb      	str	r3, [r7, #8]

		switch (div)
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	2b03      	cmp	r3, #3
     f32:	d874      	bhi.n	101e <exc_enable+0x116>
     f34:	a201      	add	r2, pc, #4	; (adr r2, f3c <exc_enable+0x34>)
     f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f3a:	bf00      	nop
     f3c:	00000f4d 	.word	0x00000f4d
     f40:	00000f6d 	.word	0x00000f6d
     f44:	00000f8f 	.word	0x00000f8f
     f48:	00000fad 	.word	0x00000fad
    	{
    		case 0x0:
              NVICICPR0 = 1 << bits;
     f4c:	4b37      	ldr	r3, [pc, #220]	; (102c <exc_enable+0x124>)
     f4e:	68ba      	ldr	r2, [r7, #8]
     f50:	f04f 0101 	mov.w	r1, #1
     f54:	fa01 f202 	lsl.w	r2, r1, r2
     f58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
              NVICISER0 = 1 << bits;
     f5c:	4b33      	ldr	r3, [pc, #204]	; (102c <exc_enable+0x124>)
     f5e:	68ba      	ldr	r2, [r7, #8]
     f60:	f04f 0101 	mov.w	r1, #1
     f64:	fa01 f202 	lsl.w	r2, r1, r2
     f68:	601a      	str	r2, [r3, #0]
              break;
     f6a:	e059      	b.n	1020 <exc_enable+0x118>
    		case 0x1:
              NVICICPR1 = 1 << bits;
     f6c:	4b2f      	ldr	r3, [pc, #188]	; (102c <exc_enable+0x124>)
     f6e:	68ba      	ldr	r2, [r7, #8]
     f70:	f04f 0101 	mov.w	r1, #1
     f74:	fa01 f202 	lsl.w	r2, r1, r2
     f78:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
              NVICISER1 = 1 << bits;
     f7c:	4b2b      	ldr	r3, [pc, #172]	; (102c <exc_enable+0x124>)
     f7e:	68ba      	ldr	r2, [r7, #8]
     f80:	f04f 0101 	mov.w	r1, #1
     f84:	fa01 f202 	lsl.w	r2, r1, r2
     f88:	605a      	str	r2, [r3, #4]
              break;
     f8a:	bf00      	nop
     f8c:	e048      	b.n	1020 <exc_enable+0x118>
    		case 0x2:
              NVICICPR2 = 1 << bits;
     f8e:	4b27      	ldr	r3, [pc, #156]	; (102c <exc_enable+0x124>)
     f90:	68ba      	ldr	r2, [r7, #8]
     f92:	f04f 0101 	mov.w	r1, #1
     f96:	fa01 f202 	lsl.w	r2, r1, r2
     f9a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
              NVICISER2 = 1 << bits;
     f9e:	4b23      	ldr	r3, [pc, #140]	; (102c <exc_enable+0x124>)
     fa0:	68ba      	ldr	r2, [r7, #8]
     fa2:	f04f 0101 	mov.w	r1, #1
     fa6:	fa01 f202 	lsl.w	r2, r1, r2
     faa:	609a      	str	r2, [r3, #8]
			case 0x3:
			  NVICICPR3 = 1 << bits;
     fac:	4b1f      	ldr	r3, [pc, #124]	; (102c <exc_enable+0x124>)
     fae:	68ba      	ldr	r2, [r7, #8]
     fb0:	f04f 0101 	mov.w	r1, #1
     fb4:	fa01 f202 	lsl.w	r2, r1, r2
     fb8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
              NVICISER3 = 1 << bits; 
     fbc:	4b1b      	ldr	r3, [pc, #108]	; (102c <exc_enable+0x124>)
     fbe:	68ba      	ldr	r2, [r7, #8]
     fc0:	f04f 0101 	mov.w	r1, #1
     fc4:	fa01 f202 	lsl.w	r2, r1, r2
     fc8:	60da      	str	r2, [r3, #12]
              break;
     fca:	e029      	b.n	1020 <exc_enable+0x118>
   		}
	}/* end if */
	else
	{
		switch (excno)
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	2b05      	cmp	r3, #5
     fd0:	d00e      	beq.n	ff0 <exc_enable+0xe8>
     fd2:	2b06      	cmp	r3, #6
     fd4:	d017      	beq.n	1006 <exc_enable+0xfe>
     fd6:	2b04      	cmp	r3, #4
     fd8:	d122      	bne.n	1020 <exc_enable+0x118>
		{
			case INT_Reserved4:
				SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA_MASK;
     fda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     fde:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     fe2:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
     fe6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     fea:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
				break;
     fee:	e017      	b.n	1020 <exc_enable+0x118>
			case INT_Bus_Fault:
				SCB_SHCSR |= SCB_SHCSR_BUSFAULTENA_MASK;
     ff0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     ff4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     ff8:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
     ffc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    1000:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
				break;
    1004:	e00c      	b.n	1020 <exc_enable+0x118>
			case INT_Usage_Fault:
				SCB_SHCSR |= SCB_SHCSR_USGFAULTENA_MASK;
    1006:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    100a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    100e:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
    1012:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    1016:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
				break;
    101a:	bf00      	nop
    101c:	e000      	b.n	1020 <exc_enable+0x118>
              NVICICPR2 = 1 << bits;
              NVICISER2 = 1 << bits;
			case 0x3:
			  NVICICPR3 = 1 << bits;
              NVICISER3 = 1 << bits; 
              break;
    101e:	bf00      	nop
				SCB_SHCSR |= SCB_SHCSR_USGFAULTENA_MASK;
				break;
		}
	}/* end else */
	
}
    1020:	f107 0714 	add.w	r7, r7, #20
    1024:	46bd      	mov	sp, r7
    1026:	bc80      	pop	{r7}
    1028:	4770      	bx	lr
    102a:	bf00      	nop
    102c:	e000e100 	.word	0xe000e100

00001030 <exc_disable>:
 * @brief disable exception
 *
 * @param excno exception no
 */
void exc_disable(uint32_t excno)
{
    1030:	b480      	push	{r7}
    1032:	b085      	sub	sp, #20
    1034:	af00      	add	r7, sp, #0
    1036:	6078      	str	r0, [r7, #4]
	uint32_t div;
	uint32_t bits;

	if (excno > 15) {
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	2b0f      	cmp	r3, #15
    103c:	d93a      	bls.n	10b4 <exc_disable+0x84>
	    /* 将中断向量号转换为中断请求号 */
	    excno -= 16;
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	f1a3 0310 	sub.w	r3, r3, #16
    1044:	607b      	str	r3, [r7, #4]
	    
		div = excno / 32;
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	ea4f 1353 	mov.w	r3, r3, lsr #5
    104c:	60fb      	str	r3, [r7, #12]
		bits = excno % 32;
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	f003 031f 	and.w	r3, r3, #31
    1054:	60bb      	str	r3, [r7, #8]

		switch (div)
    1056:	68fb      	ldr	r3, [r7, #12]
    1058:	2b03      	cmp	r3, #3
    105a:	d854      	bhi.n	1106 <exc_disable+0xd6>
    105c:	a201      	add	r2, pc, #4	; (adr r2, 1064 <exc_disable+0x34>)
    105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1062:	bf00      	nop
    1064:	00001075 	.word	0x00001075
    1068:	00001085 	.word	0x00001085
    106c:	00001097 	.word	0x00001097
    1070:	000010a5 	.word	0x000010a5
    	{
    		case 0x0:
              NVICISER0 = 1 << bits;
    1074:	4b27      	ldr	r3, [pc, #156]	; (1114 <exc_disable+0xe4>)
    1076:	68ba      	ldr	r2, [r7, #8]
    1078:	f04f 0101 	mov.w	r1, #1
    107c:	fa01 f202 	lsl.w	r2, r1, r2
    1080:	601a      	str	r2, [r3, #0]
              break;
    1082:	e041      	b.n	1108 <exc_disable+0xd8>
    		case 0x1:
              NVICISER1 = 1 << bits;
    1084:	4b23      	ldr	r3, [pc, #140]	; (1114 <exc_disable+0xe4>)
    1086:	68ba      	ldr	r2, [r7, #8]
    1088:	f04f 0101 	mov.w	r1, #1
    108c:	fa01 f202 	lsl.w	r2, r1, r2
    1090:	605a      	str	r2, [r3, #4]
              break;
    1092:	bf00      	nop
    1094:	e038      	b.n	1108 <exc_disable+0xd8>
    		case 0x2:
              NVICISER2 = 1 << bits;
    1096:	4b1f      	ldr	r3, [pc, #124]	; (1114 <exc_disable+0xe4>)
    1098:	68ba      	ldr	r2, [r7, #8]
    109a:	f04f 0101 	mov.w	r1, #1
    109e:	fa01 f202 	lsl.w	r2, r1, r2
    10a2:	609a      	str	r2, [r3, #8]
			case 0x3:
              NVICISER3 = 1 << bits; 
    10a4:	4b1b      	ldr	r3, [pc, #108]	; (1114 <exc_disable+0xe4>)
    10a6:	68ba      	ldr	r2, [r7, #8]
    10a8:	f04f 0101 	mov.w	r1, #1
    10ac:	fa01 f202 	lsl.w	r2, r1, r2
    10b0:	60da      	str	r2, [r3, #12]
              break;
    10b2:	e029      	b.n	1108 <exc_disable+0xd8>
    	}
	}
	else {
		switch (excno) {
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	2b05      	cmp	r3, #5
    10b8:	d00e      	beq.n	10d8 <exc_disable+0xa8>
    10ba:	2b06      	cmp	r3, #6
    10bc:	d017      	beq.n	10ee <exc_disable+0xbe>
    10be:	2b04      	cmp	r3, #4
    10c0:	d122      	bne.n	1108 <exc_disable+0xd8>
			case INT_Reserved4:
				SCB_SHCSR &= ~SCB_SHCSR_MEMFAULTENA_MASK;
    10c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    10ca:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
    10ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    10d2:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
				break;
    10d6:	e017      	b.n	1108 <exc_disable+0xd8>
			case INT_Bus_Fault:
				SCB_SHCSR &= ~SCB_SHCSR_BUSFAULTENA_MASK;
    10d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10dc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    10e0:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
    10e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    10e8:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
				break;
    10ec:	e00c      	b.n	1108 <exc_disable+0xd8>
			case INT_Usage_Fault:
				SCB_SHCSR &= ~SCB_SHCSR_USGFAULTENA_MASK;
    10ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    10f6:	f8d2 2d24 	ldr.w	r2, [r2, #3364]	; 0xd24
    10fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    10fe:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
				break;
    1102:	bf00      	nop
    1104:	e000      	b.n	1108 <exc_disable+0xd8>
              break;
    		case 0x2:
              NVICISER2 = 1 << bits;
			case 0x3:
              NVICISER3 = 1 << bits; 
              break;
    1106:	bf00      	nop
			case INT_Usage_Fault:
				SCB_SHCSR &= ~SCB_SHCSR_USGFAULTENA_MASK;
				break;
		}
	}		
}
    1108:	f107 0714 	add.w	r7, r7, #20
    110c:	46bd      	mov	sp, r7
    110e:	bc80      	pop	{r7}
    1110:	4770      	bx	lr
    1112:	bf00      	nop
    1114:	e000e100 	.word	0xe000e100

00001118 <exc_set_vector>:
 * @brief set exception vector table
 *
 * @param vector address of vector table
 */
void exc_set_vector(void * vector)
{
    1118:	b480      	push	{r7}
    111a:	b083      	sub	sp, #12
    111c:	af00      	add	r7, sp, #0
    111e:	6078      	str	r0, [r7, #4]
	SCB_VTOR = (uint32_t)vector;
    1120:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1124:	687a      	ldr	r2, [r7, #4]
    1126:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
}
    112a:	f107 070c 	add.w	r7, r7, #12
    112e:	46bd      	mov	sp, r7
    1130:	bc80      	pop	{r7}
    1132:	4770      	bx	lr

00001134 <exc_init>:

/**
 * @brief init exceptions
 */
void exc_init(void) 
{
    1134:	b580      	push	{r7, lr}
    1136:	af00      	add	r7, sp, #0
	//SCB_AIRCR |= SCB_AIRCR_PRIGROUP(3) | SCB_AIRCR_VECTKEY(0x05FA);  
	exc_set_vector((void *)vector_table);
    1138:	4817      	ldr	r0, [pc, #92]	; (1198 <exc_init+0x64>)
    113a:	f7ff ffed 	bl	1118 <exc_set_vector>
	set_basepri(0x0);
    113e:	f04f 0000 	mov.w	r0, #0
    1142:	f7ff fe89 	bl	e58 <set_basepri>
	exc_set_pri(INT_Reserved4,0x0);
    1146:	f04f 0004 	mov.w	r0, #4
    114a:	f04f 0100 	mov.w	r1, #0
    114e:	f7ff feaf 	bl	eb0 <exc_set_pri>
	exc_set_pri(INT_Bus_Fault,0x0);
    1152:	f04f 0005 	mov.w	r0, #5
    1156:	f04f 0100 	mov.w	r1, #0
    115a:	f7ff fea9 	bl	eb0 <exc_set_pri>
	exc_set_pri(INT_Usage_Fault,0x0);
    115e:	f04f 0006 	mov.w	r0, #6
    1162:	f04f 0100 	mov.w	r1, #0
    1166:	f7ff fea3 	bl	eb0 <exc_set_pri>
	exc_set_pri(INT_DebugMonitor,0x0);
    116a:	f04f 000c 	mov.w	r0, #12
    116e:	f04f 0100 	mov.w	r1, #0
    1172:	f7ff fe9d 	bl	eb0 <exc_set_pri>
	exc_set_pri(INT_PendableSrvReq,0x0);
    1176:	f04f 000e 	mov.w	r0, #14
    117a:	f04f 0100 	mov.w	r1, #0
    117e:	f7ff fe97 	bl	eb0 <exc_set_pri>
	exc_set_pri(INT_SVCall,0x0);
    1182:	f04f 000b 	mov.w	r0, #11
    1186:	f04f 0100 	mov.w	r1, #0
    118a:	f7ff fe91 	bl	eb0 <exc_set_pri>
	clear_faultmask();
    118e:	f7ff fe57 	bl	e40 <clear_faultmask>
	clear_primask();
    1192:	f7ff fe5b 	bl	e4c <clear_primask>
}
    1196:	bd80      	pop	{r7, pc}
    1198:	1fff8200 	.word	0x1fff8200

0000119c <sys_timer_init>:

/**
 * @brief cortex-m3/m4 system timer initialize
 */
void sys_timer_init(void) 
{
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
	uint32_t cyc;
	
	cyc = 1000000;               /* 10ms (100M核心时钟) */
    11a2:	4b11      	ldr	r3, [pc, #68]	; (11e8 <sys_timer_init+0x4c>)
    11a4:	607b      	str	r3, [r7, #4]
	sys_timer_count = 0;
    11a6:	4b11      	ldr	r3, [pc, #68]	; (11ec <sys_timer_init+0x50>)
    11a8:	f04f 0200 	mov.w	r2, #0
    11ac:	601a      	str	r2, [r3, #0]

	/* stop system timer */
	SYST_CSR = 0;
    11ae:	4b10      	ldr	r3, [pc, #64]	; (11f0 <sys_timer_init+0x54>)
    11b0:	f04f 0200 	mov.w	r2, #0
    11b4:	601a      	str	r2, [r3, #0]
	SYST_RVR = cyc;
    11b6:	4b0e      	ldr	r3, [pc, #56]	; (11f0 <sys_timer_init+0x54>)
    11b8:	687a      	ldr	r2, [r7, #4]
    11ba:	605a      	str	r2, [r3, #4]
	SYST_CVR = cyc;
    11bc:	4b0c      	ldr	r3, [pc, #48]	; (11f0 <sys_timer_init+0x54>)
    11be:	687a      	ldr	r2, [r7, #4]
    11c0:	609a      	str	r2, [r3, #8]
	
	/* install exception handler */
	exc_install(INT_SysTick,sys_timer_handler);
    11c2:	f04f 000f 	mov.w	r0, #15
    11c6:	490b      	ldr	r1, [pc, #44]	; (11f4 <sys_timer_init+0x58>)
    11c8:	f7ff fe5e 	bl	e88 <exc_install>
	exc_set_pri(INT_SysTick, 0);
    11cc:	f04f 000f 	mov.w	r0, #15
    11d0:	f04f 0100 	mov.w	r1, #0
    11d4:	f7ff fe6c 	bl	eb0 <exc_set_pri>

	/* enable system timer, use FCLK（内核时钟）,enable int */
	//SYST_CSR = SysTick_CSR_ENABLE_MASK | SysTick_CSR_CLKSOURCE_MASK;
	SYST_CSR = SysTick_CSR_ENABLE_MASK | SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK;
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <sys_timer_init+0x54>)
    11da:	f04f 0207 	mov.w	r2, #7
    11de:	601a      	str	r2, [r3, #0]
}
    11e0:	f107 0708 	add.w	r7, r7, #8
    11e4:	46bd      	mov	sp, r7
    11e6:	bd80      	pop	{r7, pc}
    11e8:	000f4240 	.word	0x000f4240
    11ec:	1fff880c 	.word	0x1fff880c
    11f0:	e000e010 	.word	0xe000e010
    11f4:	000011f9 	.word	0x000011f9

000011f8 <sys_timer_handler>:

/**
 * @brief system timer interrup handler
 */
void sys_timer_handler(void)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	af00      	add	r7, sp, #0
	volatile uint32_t temp;

	/* clear COUNTFLAG */
	temp = 	SYST_CSR;
    11fe:	4b07      	ldr	r3, [pc, #28]	; (121c <sys_timer_handler+0x24>)
    1200:	681b      	ldr	r3, [r3, #0]
    1202:	607b      	str	r3, [r7, #4]

	calculateCurSpeed();
    1204:	f001 fac8 	bl	2798 <calculateCurSpeed>

	sys_timer_count++;
    1208:	4b05      	ldr	r3, [pc, #20]	; (1220 <sys_timer_handler+0x28>)
    120a:	681b      	ldr	r3, [r3, #0]
    120c:	f103 0201 	add.w	r2, r3, #1
    1210:	4b03      	ldr	r3, [pc, #12]	; (1220 <sys_timer_handler+0x28>)
    1212:	601a      	str	r2, [r3, #0]
}
    1214:	f107 0708 	add.w	r7, r7, #8
    1218:	46bd      	mov	sp, r7
    121a:	bd80      	pop	{r7, pc}
    121c:	e000e010 	.word	0xe000e010
    1220:	1fff880c 	.word	0x1fff880c

00001224 <gpio_get_port_addr>:
 *    @return  端口号对应的端口寄存器组指针
 *
 *    @note    将端口号转换成端口寄存器组指针。内部调用。
 */
PORT_MemMapPtr gpio_get_port_addr (PORT port)
{
    1224:	b480      	push	{r7}
    1226:	b085      	sub	sp, #20
    1228:	af00      	add	r7, sp, #0
    122a:	6078      	str	r0, [r7, #4]
	PORT_MemMapPtr p;
    
    switch(PORT_ID_SET(port))
    122c:	687b      	ldr	r3, [r7, #4]
    122e:	f103 0301 	add.w	r3, r3, #1
    1232:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    123a:	d016      	beq.n	126a <gpio_get_port_addr+0x46>
    123c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1240:	dc06      	bgt.n	1250 <gpio_get_port_addr+0x2c>
    1242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1246:	d00a      	beq.n	125e <gpio_get_port_addr+0x3a>
    1248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    124c:	d00a      	beq.n	1264 <gpio_get_port_addr+0x40>
    124e:	e015      	b.n	127c <gpio_get_port_addr+0x58>
    1250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1254:	d00c      	beq.n	1270 <gpio_get_port_addr+0x4c>
    1256:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    125a:	d00c      	beq.n	1276 <gpio_get_port_addr+0x52>
    125c:	e00e      	b.n	127c <gpio_get_port_addr+0x58>
    {
		case PTA:
			p = PORTA_BASE_PTR;
    125e:	4b0c      	ldr	r3, [pc, #48]	; (1290 <gpio_get_port_addr+0x6c>)
    1260:	60fb      	str	r3, [r7, #12]
			break;
    1262:	e00e      	b.n	1282 <gpio_get_port_addr+0x5e>
		case PTB:
			p = PORTB_BASE_PTR;
    1264:	4b0b      	ldr	r3, [pc, #44]	; (1294 <gpio_get_port_addr+0x70>)
    1266:	60fb      	str	r3, [r7, #12]
			break;
    1268:	e00b      	b.n	1282 <gpio_get_port_addr+0x5e>
		case PTC:
			p = PORTC_BASE_PTR;
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <gpio_get_port_addr+0x74>)
    126c:	60fb      	str	r3, [r7, #12]
			break;
    126e:	e008      	b.n	1282 <gpio_get_port_addr+0x5e>
		case PTD:
			p = PORTD_BASE_PTR;
    1270:	4b0a      	ldr	r3, [pc, #40]	; (129c <gpio_get_port_addr+0x78>)
    1272:	60fb      	str	r3, [r7, #12]
			break;
    1274:	e005      	b.n	1282 <gpio_get_port_addr+0x5e>
		case PTE:
			p = PORTE_BASE_PTR;
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <gpio_get_port_addr+0x7c>)
    1278:	60fb      	str	r3, [r7, #12]
			break;
    127a:	e002      	b.n	1282 <gpio_get_port_addr+0x5e>
		default:
			return NULL; /* 输入参数无效返回 */
    127c:	f04f 0300 	mov.w	r3, #0
    1280:	e000      	b.n	1284 <gpio_get_port_addr+0x60>
    }
    
    return p;
    1282:	68fb      	ldr	r3, [r7, #12]
}
    1284:	4618      	mov	r0, r3
    1286:	f107 0714 	add.w	r7, r7, #20
    128a:	46bd      	mov	sp, r7
    128c:	bc80      	pop	{r7}
    128e:	4770      	bx	lr
    1290:	40049000 	.word	0x40049000
    1294:	4004a000 	.word	0x4004a000
    1298:	4004b000 	.word	0x4004b000
    129c:	4004c000 	.word	0x4004c000
    12a0:	4004d000 	.word	0x4004d000

000012a4 <gpio_get_pt_addr>:
 *    @return  端口号对应的端口寄存器组指针
 *
 *    @note    将端口号转换成端口寄存器组指针。内部调用。
 */
GPIO_MemMapPtr gpio_get_pt_addr(PORT port)
{
    12a4:	b480      	push	{r7}
    12a6:	b085      	sub	sp, #20
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
	GPIO_MemMapPtr p;
    
    switch(PORT_ID_SET(port))
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	f103 0301 	add.w	r3, r3, #1
    12b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    12b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    12ba:	d016      	beq.n	12ea <gpio_get_pt_addr+0x46>
    12bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    12c0:	dc06      	bgt.n	12d0 <gpio_get_pt_addr+0x2c>
    12c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    12c6:	d00a      	beq.n	12de <gpio_get_pt_addr+0x3a>
    12c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    12cc:	d00a      	beq.n	12e4 <gpio_get_pt_addr+0x40>
    12ce:	e015      	b.n	12fc <gpio_get_pt_addr+0x58>
    12d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    12d4:	d00c      	beq.n	12f0 <gpio_get_pt_addr+0x4c>
    12d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    12da:	d00c      	beq.n	12f6 <gpio_get_pt_addr+0x52>
    12dc:	e00e      	b.n	12fc <gpio_get_pt_addr+0x58>
    {
		case PTA:
			p = PTA_BASE_PTR;
    12de:	4b0c      	ldr	r3, [pc, #48]	; (1310 <gpio_get_pt_addr+0x6c>)
    12e0:	60fb      	str	r3, [r7, #12]
			break;
    12e2:	e00e      	b.n	1302 <gpio_get_pt_addr+0x5e>
		case PTB:
			p = PTB_BASE_PTR;
    12e4:	4b0b      	ldr	r3, [pc, #44]	; (1314 <gpio_get_pt_addr+0x70>)
    12e6:	60fb      	str	r3, [r7, #12]
			break;
    12e8:	e00b      	b.n	1302 <gpio_get_pt_addr+0x5e>
		case PTC:
			p = PTC_BASE_PTR;
    12ea:	4b0b      	ldr	r3, [pc, #44]	; (1318 <gpio_get_pt_addr+0x74>)
    12ec:	60fb      	str	r3, [r7, #12]
			break;
    12ee:	e008      	b.n	1302 <gpio_get_pt_addr+0x5e>
		case PTD:
			p = PTD_BASE_PTR;
    12f0:	4b0a      	ldr	r3, [pc, #40]	; (131c <gpio_get_pt_addr+0x78>)
    12f2:	60fb      	str	r3, [r7, #12]
			break;
    12f4:	e005      	b.n	1302 <gpio_get_pt_addr+0x5e>
		case PTE:
			p = PTE_BASE_PTR;
    12f6:	4b0a      	ldr	r3, [pc, #40]	; (1320 <gpio_get_pt_addr+0x7c>)
    12f8:	60fb      	str	r3, [r7, #12]
			break;
    12fa:	e002      	b.n	1302 <gpio_get_pt_addr+0x5e>
		default:
			return NULL;  /* 输入参数无效返回 */
    12fc:	f04f 0300 	mov.w	r3, #0
    1300:	e000      	b.n	1304 <gpio_get_pt_addr+0x60>
    }
    
    return p;
    1302:	68fb      	ldr	r3, [r7, #12]
}
    1304:	4618      	mov	r0, r3
    1306:	f107 0714 	add.w	r7, r7, #20
    130a:	46bd      	mov	sp, r7
    130c:	bc80      	pop	{r7}
    130e:	4770      	bx	lr
    1310:	400ff000 	.word	0x400ff000
    1314:	400ff040 	.word	0x400ff040
    1318:	400ff080 	.word	0x400ff080
    131c:	400ff0c0 	.word	0x400ff0c0
    1320:	400ff100 	.word	0x400ff100

00001324 <gpio_init>:
 *    @return  其他  异常
 *
 *    @note    初始化端口作为GPIO引脚的功能。
 */
ER gpio_init(PORT port, PIN pin, uint8_t dir, uint8_t state)
{
    1324:	b580      	push	{r7, lr}
    1326:	b086      	sub	sp, #24
    1328:	af00      	add	r7, sp, #0
    132a:	60f8      	str	r0, [r7, #12]
    132c:	60b9      	str	r1, [r7, #8]
    132e:	71fa      	strb	r2, [r7, #7]
    1330:	71bb      	strb	r3, [r7, #6]
    /* 将GPIO端口号转换成端口寄存器组指针 */
    /* enable clock */
	GPIO_MemMapPtr pt = gpio_get_pt_addr(port);
    1332:	68f8      	ldr	r0, [r7, #12]
    1334:	f7ff ffb6 	bl	12a4 <gpio_get_pt_addr>
    1338:	6178      	str	r0, [r7, #20]
    PORT_MemMapPtr p  = gpio_get_port_addr(port);
    133a:	68f8      	ldr	r0, [r7, #12]
    133c:	f7ff ff72 	bl	1224 <gpio_get_port_addr>
    1340:	6138      	str	r0, [r7, #16]
    
    if (!p) return E_INIT;  /* 初始化失败，参数错误 */
    1342:	693b      	ldr	r3, [r7, #16]
    1344:	2b00      	cmp	r3, #0
    1346:	d102      	bne.n	134e <gpio_init+0x2a>
    1348:	f06f 0306 	mvn.w	r3, #6
    134c:	e03b      	b.n	13c6 <gpio_init+0xa2>
     
    /* 设定通用端口引脚控制寄存器的值，设定为GPIO功能 */
    PORT_PCR_REG(p, pin) = (0|PORT_PCR_MUX(1));
    134e:	693b      	ldr	r3, [r7, #16]
    1350:	68ba      	ldr	r2, [r7, #8]
    1352:	f44f 7180 	mov.w	r1, #256	; 0x100
    1356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if(dir == OUT_PUT) /* 若引脚被定义为输出 */
    135a:	79fb      	ldrb	r3, [r7, #7]
    135c:	2b01      	cmp	r3, #1
    135e:	d124      	bne.n	13aa <gpio_init+0x86>
    {
        GPIO_PDDR_REG(pt) |= (1<<pin);
    1360:	697b      	ldr	r3, [r7, #20]
    1362:	695a      	ldr	r2, [r3, #20]
    1364:	f04f 0101 	mov.w	r1, #1
    1368:	68bb      	ldr	r3, [r7, #8]
    136a:	fa01 f303 	lsl.w	r3, r1, r3
    136e:	431a      	orrs	r2, r3
    1370:	697b      	ldr	r3, [r7, #20]
    1372:	615a      	str	r2, [r3, #20]
    	 
    	/* 设定引脚初始化状态 */
        if(state == HIGH_POWER)
    1374:	79bb      	ldrb	r3, [r7, #6]
    1376:	2b01      	cmp	r3, #1
    1378:	d10a      	bne.n	1390 <gpio_init+0x6c>
		    BSET(pin, GPIO_PDOR_REG(pt));
    137a:	697b      	ldr	r3, [r7, #20]
    137c:	681a      	ldr	r2, [r3, #0]
    137e:	f04f 0101 	mov.w	r1, #1
    1382:	68bb      	ldr	r3, [r7, #8]
    1384:	fa01 f303 	lsl.w	r3, r1, r3
    1388:	431a      	orrs	r2, r3
    138a:	697b      	ldr	r3, [r7, #20]
    138c:	601a      	str	r2, [r3, #0]
    138e:	e018      	b.n	13c2 <gpio_init+0x9e>
        else
        	BCLR(pin, GPIO_PDOR_REG(pt));
    1390:	697b      	ldr	r3, [r7, #20]
    1392:	681a      	ldr	r2, [r3, #0]
    1394:	f04f 0101 	mov.w	r1, #1
    1398:	68bb      	ldr	r3, [r7, #8]
    139a:	fa01 f303 	lsl.w	r3, r1, r3
    139e:	ea6f 0303 	mvn.w	r3, r3
    13a2:	401a      	ands	r2, r3
    13a4:	697b      	ldr	r3, [r7, #20]
    13a6:	601a      	str	r2, [r3, #0]
    13a8:	e00b      	b.n	13c2 <gpio_init+0x9e>
    }
    else /* 若引脚被定义为输入 */
    {
    	BCLR(pin, GPIO_PDDR_REG(pt));
    13aa:	697b      	ldr	r3, [r7, #20]
    13ac:	695a      	ldr	r2, [r3, #20]
    13ae:	f04f 0101 	mov.w	r1, #1
    13b2:	68bb      	ldr	r3, [r7, #8]
    13b4:	fa01 f303 	lsl.w	r3, r1, r3
    13b8:	ea6f 0303 	mvn.w	r3, r3
    13bc:	401a      	ands	r2, r3
    13be:	697b      	ldr	r3, [r7, #20]
    13c0:	615a      	str	r2, [r3, #20]
    }

    return E_OK;  /* 成功返回 */
    13c2:	f04f 0300 	mov.w	r3, #0
}
    13c6:	4618      	mov	r0, r3
    13c8:	f107 0718 	add.w	r7, r7, #24
    13cc:	46bd      	mov	sp, r7
    13ce:	bd80      	pop	{r7, pc}

000013d0 <gpio_set>:
 *    @param   state 引脚初始状态。1=高电平，0=低电平
 *
 *    @return  无
 */
void gpio_set(PORT port, PIN pin, uint8_t state)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b086      	sub	sp, #24
    13d4:	af00      	add	r7, sp, #0
    13d6:	60f8      	str	r0, [r7, #12]
    13d8:	60b9      	str	r1, [r7, #8]
    13da:	4613      	mov	r3, r2
    13dc:	71fb      	strb	r3, [r7, #7]
    /* 将GPIO端口号转换成端口寄存器组指针 */
    GPIO_MemMapPtr pt = gpio_get_pt_addr(port);
    13de:	68f8      	ldr	r0, [r7, #12]
    13e0:	f7ff ff60 	bl	12a4 <gpio_get_pt_addr>
    13e4:	6178      	str	r0, [r7, #20]
	  
	  if (state == LOW_POWER) /* 控制为低电平 */
    13e6:	79fb      	ldrb	r3, [r7, #7]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d10c      	bne.n	1406 <gpio_set+0x36>
	      BCLR(pin, GPIO_PDOR_REG(pt));
    13ec:	697b      	ldr	r3, [r7, #20]
    13ee:	681a      	ldr	r2, [r3, #0]
    13f0:	f04f 0101 	mov.w	r1, #1
    13f4:	68bb      	ldr	r3, [r7, #8]
    13f6:	fa01 f303 	lsl.w	r3, r1, r3
    13fa:	ea6f 0303 	mvn.w	r3, r3
    13fe:	401a      	ands	r2, r3
    1400:	697b      	ldr	r3, [r7, #20]
    1402:	601a      	str	r2, [r3, #0]
    1404:	e009      	b.n	141a <gpio_set+0x4a>
	  else            /* 控制为高电平 */
	      BSET(pin, GPIO_PDOR_REG(pt));
    1406:	697b      	ldr	r3, [r7, #20]
    1408:	681a      	ldr	r2, [r3, #0]
    140a:	f04f 0101 	mov.w	r1, #1
    140e:	68bb      	ldr	r3, [r7, #8]
    1410:	fa01 f303 	lsl.w	r3, r1, r3
    1414:	431a      	orrs	r2, r3
    1416:	697b      	ldr	r3, [r7, #20]
    1418:	601a      	str	r2, [r3, #0]
}
    141a:	f107 0718 	add.w	r7, r7, #24
    141e:	46bd      	mov	sp, r7
    1420:	bd80      	pop	{r7, pc}
    1422:	bf00      	nop

00001424 <get_ftmptr>:
 *    @return  所选模块基地址
 *
 *    @note   
 */
static FTM_MemMapPtr get_ftmptr(ID module)
{
    1424:	b480      	push	{r7}
    1426:	b085      	sub	sp, #20
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
    FTM_MemMapPtr p;
    
    switch(FTM_MOD_SET(module))
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1432:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
    1436:	f243 1210 	movw	r2, #12560	; 0x3110
    143a:	4293      	cmp	r3, r2
    143c:	d009      	beq.n	1452 <get_ftmptr+0x2e>
    143e:	f243 1220 	movw	r2, #12576	; 0x3120
    1442:	4293      	cmp	r3, r2
    1444:	d008      	beq.n	1458 <get_ftmptr+0x34>
    1446:	f5b3 5f44 	cmp.w	r3, #12544	; 0x3100
    144a:	d108      	bne.n	145e <get_ftmptr+0x3a>
	{
		case FTM0:
			p = FTM0_BASE_PTR;
    144c:	4b09      	ldr	r3, [pc, #36]	; (1474 <get_ftmptr+0x50>)
    144e:	60fb      	str	r3, [r7, #12]
			break;
    1450:	e008      	b.n	1464 <get_ftmptr+0x40>
		case FTM1:
			p = FTM1_BASE_PTR;
    1452:	4b09      	ldr	r3, [pc, #36]	; (1478 <get_ftmptr+0x54>)
    1454:	60fb      	str	r3, [r7, #12]
			break;
    1456:	e005      	b.n	1464 <get_ftmptr+0x40>
		case FTM2:
			p = FTM2_BASE_PTR;
    1458:	4b08      	ldr	r3, [pc, #32]	; (147c <get_ftmptr+0x58>)
    145a:	60fb      	str	r3, [r7, #12]
			break;
    145c:	e002      	b.n	1464 <get_ftmptr+0x40>
		default:
		    return NULL;
    145e:	f04f 0300 	mov.w	r3, #0
    1462:	e000      	b.n	1466 <get_ftmptr+0x42>
	}
    
    return p;
    1464:	68fb      	ldr	r3, [r7, #12]
}
    1466:	4618      	mov	r0, r3
    1468:	f107 0714 	add.w	r7, r7, #20
    146c:	46bd      	mov	sp, r7
    146e:	bc80      	pop	{r7}
    1470:	4770      	bx	lr
    1472:	bf00      	nop
    1474:	40038000 	.word	0x40038000
    1478:	40039000 	.word	0x40039000
    147c:	400b8000 	.word	0x400b8000

00001480 <get_portptr>:
 *    @return  所选PORT模块基地址
 *
 *    @note   
 */
static PORT_MemMapPtr get_portptr(ID port)
{
    1480:	b480      	push	{r7}
    1482:	b085      	sub	sp, #20
    1484:	af00      	add	r7, sp, #0
    1486:	6078      	str	r0, [r7, #4]
    PORT_MemMapPtr p;
    
    switch (PORT_ID_SET(port))
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	f103 0301 	add.w	r3, r3, #1
    148e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1496:	d010      	beq.n	14ba <get_portptr+0x3a>
    1498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    149c:	dc03      	bgt.n	14a6 <get_portptr+0x26>
    149e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    14a2:	d007      	beq.n	14b4 <get_portptr+0x34>
    14a4:	e012      	b.n	14cc <get_portptr+0x4c>
    14a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    14aa:	d009      	beq.n	14c0 <get_portptr+0x40>
    14ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    14b0:	d009      	beq.n	14c6 <get_portptr+0x46>
    14b2:	e00b      	b.n	14cc <get_portptr+0x4c>
    {
        case PTA:
            p = PORTA_BASE_PTR;
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <get_portptr+0x60>)
    14b6:	60fb      	str	r3, [r7, #12]
            break;
    14b8:	e00b      	b.n	14d2 <get_portptr+0x52>
        case PTB:
            p = PORTB_BASE_PTR;
    14ba:	4b0a      	ldr	r3, [pc, #40]	; (14e4 <get_portptr+0x64>)
    14bc:	60fb      	str	r3, [r7, #12]
            break;
    14be:	e008      	b.n	14d2 <get_portptr+0x52>
        case PTC:
            p = PORTC_BASE_PTR;
    14c0:	4b09      	ldr	r3, [pc, #36]	; (14e8 <get_portptr+0x68>)
    14c2:	60fb      	str	r3, [r7, #12]
            break;
    14c4:	e005      	b.n	14d2 <get_portptr+0x52>
        case PTD:
            p = PORTD_BASE_PTR;
    14c6:	4b09      	ldr	r3, [pc, #36]	; (14ec <get_portptr+0x6c>)
    14c8:	60fb      	str	r3, [r7, #12]
            break;
    14ca:	e002      	b.n	14d2 <get_portptr+0x52>
        default:
            return NULL;
    14cc:	f04f 0300 	mov.w	r3, #0
    14d0:	e000      	b.n	14d4 <get_portptr+0x54>
    }
    
    return p;
    14d2:	68fb      	ldr	r3, [r7, #12]
}
    14d4:	4618      	mov	r0, r3
    14d6:	f107 0714 	add.w	r7, r7, #20
    14da:	46bd      	mov	sp, r7
    14dc:	bc80      	pop	{r7}
    14de:	4770      	bx	lr
    14e0:	40049000 	.word	0x40049000
    14e4:	4004a000 	.word	0x4004a000
    14e8:	4004b000 	.word	0x4004b000
    14ec:	4004c000 	.word	0x4004c000

000014f0 <port_init>:
 *    @brief 使能所选引脚时钟，将其配置成PWM功能
 *
 *    @param   port_id： 所选引脚 
 */
static void port_init(uint16_t port_id)
{
    14f0:	b580      	push	{r7, lr}
    14f2:	b086      	sub	sp, #24
    14f4:	af00      	add	r7, sp, #0
    14f6:	4603      	mov	r3, r0
    14f8:	80fb      	strh	r3, [r7, #6]
	PORT_MemMapPtr portptr;
	ID port,pin;
	
	port    = PORT_NO_GET(port_id);
    14fa:	88fb      	ldrh	r3, [r7, #6]
    14fc:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1500:	b29b      	uxth	r3, r3
    1502:	f103 33ff 	add.w	r3, r3, #4294967295
    1506:	617b      	str	r3, [r7, #20]
	pin     = PIN_NO_GET(port_id);
    1508:	88fb      	ldrh	r3, [r7, #6]
    150a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    150e:	f103 33ff 	add.w	r3, r3, #4294967295
    1512:	613b      	str	r3, [r7, #16]
	portptr = get_portptr(port);
    1514:	6978      	ldr	r0, [r7, #20]
    1516:	f7ff ffb3 	bl	1480 <get_portptr>
    151a:	60f8      	str	r0, [r7, #12]
	SIM_SCGC5 |= (1 << (port + 9));
    151c:	4913      	ldr	r1, [pc, #76]	; (156c <port_init+0x7c>)
    151e:	4b13      	ldr	r3, [pc, #76]	; (156c <port_init+0x7c>)
    1520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1524:	f103 0338 	add.w	r3, r3, #56	; 0x38
    1528:	681a      	ldr	r2, [r3, #0]
    152a:	697b      	ldr	r3, [r7, #20]
    152c:	f103 0309 	add.w	r3, r3, #9
    1530:	f04f 0001 	mov.w	r0, #1
    1534:	fa00 f303 	lsl.w	r3, r0, r3
    1538:	431a      	orrs	r2, r3
    153a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    153e:	f103 0338 	add.w	r3, r3, #56	; 0x38
    1542:	601a      	str	r2, [r3, #0]
	
	if(port>=PORT_NO_GET(PTC))                           
    1544:	697b      	ldr	r3, [r7, #20]
    1546:	2b01      	cmp	r3, #1
    1548:	dd06      	ble.n	1558 <port_init+0x68>
		PORT_PCR_REG(portptr,pin) = PORT_PCR_MUX(4);
    154a:	68fb      	ldr	r3, [r7, #12]
    154c:	693a      	ldr	r2, [r7, #16]
    154e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    1556:	e005      	b.n	1564 <port_init+0x74>
	else
		PORT_PCR_REG(portptr,pin) = PORT_PCR_MUX(3);
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	693a      	ldr	r2, [r7, #16]
    155c:	f44f 7140 	mov.w	r1, #768	; 0x300
    1560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1564:	f107 0718 	add.w	r7, r7, #24
    1568:	46bd      	mov	sp, r7
    156a:	bd80      	pop	{r7, pc}
    156c:	40047000 	.word	0x40047000

00001570 <pwm_mod0_set>:
 *    @brief   pwm0模块相关寄存器配置
 *
 *    @param   channel  pwm0所选的通道  
 */
static void pwm_mod0_set(ID channel)
{
    1570:	b480      	push	{r7}
    1572:	b083      	sub	sp, #12
    1574:	af00      	add	r7, sp, #0
    1576:	6078      	str	r0, [r7, #4]
	/*使能ftm0模块时钟*/
	SIM_SCGC6 |= SIM_SCGC6_FTM0_MASK;
    1578:	491b      	ldr	r1, [pc, #108]	; (15e8 <pwm_mod0_set+0x78>)
    157a:	4b1b      	ldr	r3, [pc, #108]	; (15e8 <pwm_mod0_set+0x78>)
    157c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1580:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
    158a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    158e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    1592:	601a      	str	r2, [r3, #0]
	
	/*选择时钟源，分频系数，以及计数器计数方式*/
	FTM_SC_REG(FTM0_BASE_PTR) = FTM_SC_CLKS(FTM0_PWM_CLK) | FTM_SC_PS(FTM0_PWM_PRESCALE) | ((FTM0_PWM_MODE & 0x10)<<1);
    1594:	4b15      	ldr	r3, [pc, #84]	; (15ec <pwm_mod0_set+0x7c>)
    1596:	f04f 020a 	mov.w	r2, #10
    159a:	601a      	str	r2, [r3, #0]
	
	/*设置计数器计数初值*/
	FTM_CNTIN_REG(FTM0_BASE_PTR) = CNTIN_VALUE;
    159c:	4b13      	ldr	r3, [pc, #76]	; (15ec <pwm_mod0_set+0x7c>)
    159e:	f04f 0200 	mov.w	r2, #0
    15a2:	64da      	str	r2, [r3, #76]	; 0x4c
	
	/*初始化计数器*/
	FTM_CNT_REG(FTM0_BASE_PTR) = FTM0_INIT_VALUE;
    15a4:	4b11      	ldr	r3, [pc, #68]	; (15ec <pwm_mod0_set+0x7c>)
    15a6:	f04f 0200 	mov.w	r2, #0
    15aa:	605a      	str	r2, [r3, #4]
	
	/*设置计数器最大模值*/
	FTM_MOD_REG(FTM0_BASE_PTR) = FTM0_PWM_CYCLE;
    15ac:	4b0f      	ldr	r3, [pc, #60]	; (15ec <pwm_mod0_set+0x7c>)
    15ae:	f243 02d4 	movw	r2, #12500	; 0x30d4
    15b2:	609a      	str	r2, [r3, #8]
	
	/*设置FTM模块的工作方式*/
	FTM_CnSC_REG(FTM0_BASE_PTR,channel) =((FTM0_PWM_MODE & 0x0f)<<2);
    15b4:	4a0d      	ldr	r2, [pc, #52]	; (15ec <pwm_mod0_set+0x7c>)
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	f103 0301 	add.w	r3, r3, #1
    15bc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    15c0:	18d3      	adds	r3, r2, r3
    15c2:	f04f 0228 	mov.w	r2, #40	; 0x28
    15c6:	605a      	str	r2, [r3, #4]
	
	/*设置初始化占空比*/
	FTM_CnV_REG(FTM0_BASE_PTR,channel) = PWM_INIT_VALUE;
    15c8:	4a08      	ldr	r2, [pc, #32]	; (15ec <pwm_mod0_set+0x7c>)
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	f103 0301 	add.w	r3, r3, #1
    15d0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    15d4:	18d3      	adds	r3, r2, r3
    15d6:	f04f 0200 	mov.w	r2, #0
    15da:	609a      	str	r2, [r3, #8]
}
    15dc:	f107 070c 	add.w	r7, r7, #12
    15e0:	46bd      	mov	sp, r7
    15e2:	bc80      	pop	{r7}
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop
    15e8:	40047000 	.word	0x40047000
    15ec:	40038000 	.word	0x40038000

000015f0 <pwm_mod1_set>:
 *    @brief pwm1模块相关寄存器配置
 *
 *    @param   channel  pwm1所选的通道  
 */
static void pwm_mod1_set(ID channel)
{
    15f0:	b480      	push	{r7}
    15f2:	b083      	sub	sp, #12
    15f4:	af00      	add	r7, sp, #0
    15f6:	6078      	str	r0, [r7, #4]
	/*使能ftm0模块时钟*/
	SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;
    15f8:	491b      	ldr	r1, [pc, #108]	; (1668 <pwm_mod1_set+0x78>)
    15fa:	4b1b      	ldr	r3, [pc, #108]	; (1668 <pwm_mod1_set+0x78>)
    15fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1600:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    1604:	681b      	ldr	r3, [r3, #0]
    1606:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    160a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    160e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    1612:	601a      	str	r2, [r3, #0]
	
	/*选择时钟源，分频系数，以及计数器计数方式*/
	FTM_SC_REG(FTM1_BASE_PTR) = FTM_SC_CLKS(FTM1_PWM_CLK) | FTM_SC_PS(FTM1_PWM_PRESCALE) | ((FTM1_PWM_MODE & 0x10)<<1);
    1614:	4b15      	ldr	r3, [pc, #84]	; (166c <pwm_mod1_set+0x7c>)
    1616:	f04f 020a 	mov.w	r2, #10
    161a:	601a      	str	r2, [r3, #0]
    
	/*设置计数器计数初值*/
	FTM_CNTIN_REG(FTM1_BASE_PTR) = CNTIN_VALUE;
    161c:	4b13      	ldr	r3, [pc, #76]	; (166c <pwm_mod1_set+0x7c>)
    161e:	f04f 0200 	mov.w	r2, #0
    1622:	64da      	str	r2, [r3, #76]	; 0x4c
	
	/*初始化计数器*/
	FTM_CNT_REG(FTM1_BASE_PTR) = FTM1_INIT_VALUE;
    1624:	4b11      	ldr	r3, [pc, #68]	; (166c <pwm_mod1_set+0x7c>)
    1626:	f04f 0200 	mov.w	r2, #0
    162a:	605a      	str	r2, [r3, #4]
	
	/*设置计数器最大模值*/
	FTM_MOD_REG(FTM1_BASE_PTR) = FTM1_PWM_CYCLE;
    162c:	4b0f      	ldr	r3, [pc, #60]	; (166c <pwm_mod1_set+0x7c>)
    162e:	f243 02d4 	movw	r2, #12500	; 0x30d4
    1632:	609a      	str	r2, [r3, #8]
	
	/*设置FTM模块的工作方式*/
	FTM_CnSC_REG(FTM1_BASE_PTR,channel) = ((FTM1_PWM_MODE & 0x0f)<<2);
    1634:	4a0d      	ldr	r2, [pc, #52]	; (166c <pwm_mod1_set+0x7c>)
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	f103 0301 	add.w	r3, r3, #1
    163c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1640:	18d3      	adds	r3, r2, r3
    1642:	f04f 0228 	mov.w	r2, #40	; 0x28
    1646:	605a      	str	r2, [r3, #4]
	
	/*设置初始化占空比*/
	FTM_CnV_REG(FTM1_BASE_PTR,channel) = PWM_INIT_VALUE;
    1648:	4a08      	ldr	r2, [pc, #32]	; (166c <pwm_mod1_set+0x7c>)
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	f103 0301 	add.w	r3, r3, #1
    1650:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1654:	18d3      	adds	r3, r2, r3
    1656:	f04f 0200 	mov.w	r2, #0
    165a:	609a      	str	r2, [r3, #8]
}
    165c:	f107 070c 	add.w	r7, r7, #12
    1660:	46bd      	mov	sp, r7
    1662:	bc80      	pop	{r7}
    1664:	4770      	bx	lr
    1666:	bf00      	nop
    1668:	40047000 	.word	0x40047000
    166c:	40039000 	.word	0x40039000

00001670 <pwm_mod2_set>:
 *    @brief pwm2模块相关寄存器配置
 *
 *    @param   channel  pwm2所选的通道  
 */
static void pwm_mod2_set(ID channel)
{
    1670:	b480      	push	{r7}
    1672:	b083      	sub	sp, #12
    1674:	af00      	add	r7, sp, #0
    1676:	6078      	str	r0, [r7, #4]
	/*使能ftm0模块时钟*/
	SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;
    1678:	491b      	ldr	r1, [pc, #108]	; (16e8 <pwm_mod2_set+0x78>)
    167a:	4b1b      	ldr	r3, [pc, #108]	; (16e8 <pwm_mod2_set+0x78>)
    167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1680:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1684:	681b      	ldr	r3, [r3, #0]
    1686:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
    168a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    168e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    1692:	601a      	str	r2, [r3, #0]
	
	/*选择时钟源，分频系数，以及计数器计数方式*/
	FTM_SC_REG(FTM2_BASE_PTR) = FTM_SC_CLKS(FTM2_PWM_CLK) | FTM_SC_PS(FTM2_PWM_PRESCALE) | ((FTM2_PWM_MODE & 0x10)<<1); 
    1694:	4b15      	ldr	r3, [pc, #84]	; (16ec <pwm_mod2_set+0x7c>)
    1696:	f04f 020b 	mov.w	r2, #11
    169a:	601a      	str	r2, [r3, #0]
	
	/*设置计数器计数初值*/
	FTM_CNTIN_REG(FTM2_BASE_PTR) = CNTIN_VALUE;
    169c:	4b13      	ldr	r3, [pc, #76]	; (16ec <pwm_mod2_set+0x7c>)
    169e:	f04f 0200 	mov.w	r2, #0
    16a2:	64da      	str	r2, [r3, #76]	; 0x4c
	
	/*初始化计数器*/
	FTM_CNT_REG(FTM2_BASE_PTR) = FTM2_INIT_VALUE;
    16a4:	4b11      	ldr	r3, [pc, #68]	; (16ec <pwm_mod2_set+0x7c>)
    16a6:	f04f 0200 	mov.w	r2, #0
    16aa:	605a      	str	r2, [r3, #4]
	
	/*设置计数器最大模值*/
	FTM_MOD_REG(FTM2_BASE_PTR) = FTM2_PWM_CYCLE;
    16ac:	4b0f      	ldr	r3, [pc, #60]	; (16ec <pwm_mod2_set+0x7c>)
    16ae:	f24f 4224 	movw	r2, #62500	; 0xf424
    16b2:	609a      	str	r2, [r3, #8]
	
	/*设置FTM模块的工作方式*/
	FTM_CnSC_REG(FTM2_BASE_PTR,channel) = ((FTM2_PWM_MODE & 0x0f)<<2);
    16b4:	4a0d      	ldr	r2, [pc, #52]	; (16ec <pwm_mod2_set+0x7c>)
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	f103 0301 	add.w	r3, r3, #1
    16bc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    16c0:	18d3      	adds	r3, r2, r3
    16c2:	f04f 0228 	mov.w	r2, #40	; 0x28
    16c6:	605a      	str	r2, [r3, #4]
	
	/*设置初始化占空比*/
	FTM_CnV_REG(FTM2_BASE_PTR,channel) = PWM_INIT_VALUE;
    16c8:	4a08      	ldr	r2, [pc, #32]	; (16ec <pwm_mod2_set+0x7c>)
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	f103 0301 	add.w	r3, r3, #1
    16d0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    16d4:	18d3      	adds	r3, r2, r3
    16d6:	f04f 0200 	mov.w	r2, #0
    16da:	609a      	str	r2, [r3, #8]
}
    16dc:	f107 070c 	add.w	r7, r7, #12
    16e0:	46bd      	mov	sp, r7
    16e2:	bc80      	pop	{r7}
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	40047000 	.word	0x40047000
    16ec:	400b8000 	.word	0x400b8000

000016f0 <ftm_pwm_init>:
 *    @return  错误类型
 *
 *    @note   可在头文件中修改每个模块的工作方式，初始化周期，每个通道所选引脚。
 */
ER ftm_pwm_init(ID module, ID channel)
{   
    16f0:	b580      	push	{r7, lr}
    16f2:	b084      	sub	sp, #16
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
    16f8:	6039      	str	r1, [r7, #0]
	FTM_MemMapPtr ftmptr;
	
	ftmptr=get_ftmptr(module);
    16fa:	6878      	ldr	r0, [r7, #4]
    16fc:	f7ff fe92 	bl	1424 <get_ftmptr>
    1700:	60f8      	str	r0, [r7, #12]
	
	switch(FTM_MOD_SET(module))
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1708:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
    170c:	f243 1210 	movw	r2, #12560	; 0x3110
    1710:	4293      	cmp	r3, r2
    1712:	d05a      	beq.n	17ca <ftm_pwm_init+0xda>
    1714:	f243 1220 	movw	r2, #12576	; 0x3120
    1718:	4293      	cmp	r3, r2
    171a:	d07a      	beq.n	1812 <ftm_pwm_init+0x122>
    171c:	f5b3 5f44 	cmp.w	r3, #12544	; 0x3100
    1720:	f040 809b 	bne.w	185a <ftm_pwm_init+0x16a>
	{
		case FTM0:
			switch( FTM_CH_SET(module,channel) )
    1724:	687b      	ldr	r3, [r7, #4]
    1726:	ea4f 1303 	mov.w	r3, r3, lsl #4
    172a:	f443 5244 	orr.w	r2, r3, #12544	; 0x3100
    172e:	683b      	ldr	r3, [r7, #0]
    1730:	f103 0301 	add.w	r3, r3, #1
    1734:	ea42 0303 	orr.w	r3, r2, r3
    1738:	f5a3 5344 	sub.w	r3, r3, #12544	; 0x3100
    173c:	f103 33ff 	add.w	r3, r3, #4294967295
    1740:	2b07      	cmp	r3, #7
    1742:	d83b      	bhi.n	17bc <ftm_pwm_init+0xcc>
    1744:	a201      	add	r2, pc, #4	; (adr r2, 174c <ftm_pwm_init+0x5c>)
    1746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    174a:	bf00      	nop
    174c:	0000176d 	.word	0x0000176d
    1750:	00001777 	.word	0x00001777
    1754:	00001781 	.word	0x00001781
    1758:	0000178b 	.word	0x0000178b
    175c:	00001795 	.word	0x00001795
    1760:	0000179f 	.word	0x0000179f
    1764:	000017a9 	.word	0x000017a9
    1768:	000017b3 	.word	0x000017b3
			{
				case FTM0_CH0:
					port_init(FTM0CH0_PIN);
    176c:	f240 3002 	movw	r0, #770	; 0x302
    1770:	f7ff febe 	bl	14f0 <port_init>
					break;
    1774:	e025      	b.n	17c2 <ftm_pwm_init+0xd2>
				case FTM0_CH1:
					port_init(FTM0CH1_PIN);
    1776:	f240 3003 	movw	r0, #771	; 0x303
    177a:	f7ff feb9 	bl	14f0 <port_init>
					break;
    177e:	e020      	b.n	17c2 <ftm_pwm_init+0xd2>
			    case FTM0_CH2:
			    	port_init(FTM0CH2_PIN);
    1780:	f44f 7041 	mov.w	r0, #772	; 0x304
    1784:	f7ff feb4 	bl	14f0 <port_init>
			    	break;
    1788:	e01b      	b.n	17c2 <ftm_pwm_init+0xd2>
			    case FTM0_CH3:
			    	port_init(FTM0CH3_PIN);	    	
    178a:	f240 3005 	movw	r0, #773	; 0x305
    178e:	f7ff feaf 	bl	14f0 <port_init>
			    	break;
    1792:	e016      	b.n	17c2 <ftm_pwm_init+0xd2>
			    case FTM0_CH4:
			    	port_init(FTM0CH4_PIN);
    1794:	f240 4005 	movw	r0, #1029	; 0x405
    1798:	f7ff feaa 	bl	14f0 <port_init>
			    	break;
    179c:	e011      	b.n	17c2 <ftm_pwm_init+0xd2>
			    case FTM0_CH5:
			    	port_init(FTM0CH5_PIN);			    	
    179e:	f240 4006 	movw	r0, #1030	; 0x406
    17a2:	f7ff fea5 	bl	14f0 <port_init>
			    	break;
    17a6:	e00c      	b.n	17c2 <ftm_pwm_init+0xd2>
			    case FTM0_CH6:
			    	port_init(FTM0CH6_PIN);			    	
    17a8:	f240 4007 	movw	r0, #1031	; 0x407
    17ac:	f7ff fea0 	bl	14f0 <port_init>
			    	break;
    17b0:	e007      	b.n	17c2 <ftm_pwm_init+0xd2>
			    case FTM0_CH7:
			    	port_init(FTM0CH7_PIN);			    	
    17b2:	f44f 6081 	mov.w	r0, #1032	; 0x408
    17b6:	f7ff fe9b 	bl	14f0 <port_init>
			    	break;
    17ba:	e002      	b.n	17c2 <ftm_pwm_init+0xd2>
			    default:
			    	return E_CHN;
    17bc:	f06f 030a 	mvn.w	r3, #10
    17c0:	e050      	b.n	1864 <ftm_pwm_init+0x174>
			    	break;
			}
			pwm_mod0_set(channel);
    17c2:	6838      	ldr	r0, [r7, #0]
    17c4:	f7ff fed4 	bl	1570 <pwm_mod0_set>
			break;
    17c8:	e04a      	b.n	1860 <ftm_pwm_init+0x170>
			
		case FTM1:
			switch(FTM_CH_SET(module,channel))
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    17d0:	f443 5244 	orr.w	r2, r3, #12544	; 0x3100
    17d4:	683b      	ldr	r3, [r7, #0]
    17d6:	f103 0301 	add.w	r3, r3, #1
    17da:	ea42 0303 	orr.w	r3, r2, r3
    17de:	f243 1211 	movw	r2, #12561	; 0x3111
    17e2:	4293      	cmp	r3, r2
    17e4:	d004      	beq.n	17f0 <ftm_pwm_init+0x100>
    17e6:	f243 1212 	movw	r2, #12562	; 0x3112
    17ea:	4293      	cmp	r3, r2
    17ec:	d005      	beq.n	17fa <ftm_pwm_init+0x10a>
    17ee:	e009      	b.n	1804 <ftm_pwm_init+0x114>
			{
				case FTM1_CH0:
					port_init(FTM1CH0_PIN);
    17f0:	f240 2001 	movw	r0, #513	; 0x201
    17f4:	f7ff fe7c 	bl	14f0 <port_init>
					break;
    17f8:	e007      	b.n	180a <ftm_pwm_init+0x11a>
				case FTM1_CH1:
					port_init(FTM1CH1_PIN);
    17fa:	f240 2002 	movw	r0, #514	; 0x202
    17fe:	f7ff fe77 	bl	14f0 <port_init>
					break;
    1802:	e002      	b.n	180a <ftm_pwm_init+0x11a>
				default:
					return E_CHN;
    1804:	f06f 030a 	mvn.w	r3, #10
    1808:	e02c      	b.n	1864 <ftm_pwm_init+0x174>
			}
			pwm_mod1_set(channel);
    180a:	6838      	ldr	r0, [r7, #0]
    180c:	f7ff fef0 	bl	15f0 <pwm_mod1_set>
			break;
    1810:	e026      	b.n	1860 <ftm_pwm_init+0x170>
			
		case FTM2:
			switch(FTM_CH_SET(module,channel))
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1818:	f443 5244 	orr.w	r2, r3, #12544	; 0x3100
    181c:	683b      	ldr	r3, [r7, #0]
    181e:	f103 0301 	add.w	r3, r3, #1
    1822:	ea42 0303 	orr.w	r3, r2, r3
    1826:	f243 1221 	movw	r2, #12577	; 0x3121
    182a:	4293      	cmp	r3, r2
    182c:	d004      	beq.n	1838 <ftm_pwm_init+0x148>
    182e:	f243 1222 	movw	r2, #12578	; 0x3122
    1832:	4293      	cmp	r3, r2
    1834:	d005      	beq.n	1842 <ftm_pwm_init+0x152>
    1836:	e009      	b.n	184c <ftm_pwm_init+0x15c>
			{
				case FTM2_CH0:
					port_init(FTM2CH0_PIN);
    1838:	f240 100b 	movw	r0, #267	; 0x10b
    183c:	f7ff fe58 	bl	14f0 <port_init>
					break;
    1840:	e007      	b.n	1852 <ftm_pwm_init+0x162>
				case FTM2_CH1:
					port_init(FTM2CH1_PIN);
    1842:	f44f 7005 	mov.w	r0, #532	; 0x214
    1846:	f7ff fe53 	bl	14f0 <port_init>
					break;
    184a:	e002      	b.n	1852 <ftm_pwm_init+0x162>
				default:
					return E_CHN;
    184c:	f06f 030a 	mvn.w	r3, #10
    1850:	e008      	b.n	1864 <ftm_pwm_init+0x174>
			}
			pwm_mod2_set(channel);
    1852:	6838      	ldr	r0, [r7, #0]
    1854:	f7ff ff0c 	bl	1670 <pwm_mod2_set>
			break;
    1858:	e002      	b.n	1860 <ftm_pwm_init+0x170>
			
		default:
			return E_MOD;
    185a:	f06f 030b 	mvn.w	r3, #11
    185e:	e001      	b.n	1864 <ftm_pwm_init+0x174>
			break;
	}
	return E_OK;
    1860:	f04f 0300 	mov.w	r3, #0
}
    1864:	4618      	mov	r0, r3
    1866:	f107 0710 	add.w	r7, r7, #16
    186a:	46bd      	mov	sp, r7
    186c:	bd80      	pop	{r7, pc}
    186e:	bf00      	nop

00001870 <ftm_pwm_output>:
 *    @return  错误类型
 *
 *    @note   
 */
ER ftm_pwm_output(ID module, ID channel, uint32_t duty_count)
{
    1870:	b580      	push	{r7, lr}
    1872:	b086      	sub	sp, #24
    1874:	af00      	add	r7, sp, #0
    1876:	60f8      	str	r0, [r7, #12]
    1878:	60b9      	str	r1, [r7, #8]
    187a:	607a      	str	r2, [r7, #4]
	FTM_MemMapPtr ftmptr = get_ftmptr(module);
    187c:	68f8      	ldr	r0, [r7, #12]
    187e:	f7ff fdd1 	bl	1424 <get_ftmptr>
    1882:	6178      	str	r0, [r7, #20]
	
	if((module<0) || (module>2))
    1884:	68fb      	ldr	r3, [r7, #12]
    1886:	2b00      	cmp	r3, #0
    1888:	db02      	blt.n	1890 <ftm_pwm_output+0x20>
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	2b02      	cmp	r3, #2
    188e:	dd02      	ble.n	1896 <ftm_pwm_output+0x26>
		return E_MOD;
    1890:	f06f 030b 	mvn.w	r3, #11
    1894:	e022      	b.n	18dc <ftm_pwm_output+0x6c>
	else if((module==0) && ((channel<0) || (channel>7)))
    1896:	68fb      	ldr	r3, [r7, #12]
    1898:	2b00      	cmp	r3, #0
    189a:	d108      	bne.n	18ae <ftm_pwm_output+0x3e>
    189c:	68bb      	ldr	r3, [r7, #8]
    189e:	2b00      	cmp	r3, #0
    18a0:	db02      	blt.n	18a8 <ftm_pwm_output+0x38>
    18a2:	68bb      	ldr	r3, [r7, #8]
    18a4:	2b07      	cmp	r3, #7
    18a6:	dd02      	ble.n	18ae <ftm_pwm_output+0x3e>
		return E_CHN;
    18a8:	f06f 030a 	mvn.w	r3, #10
    18ac:	e016      	b.n	18dc <ftm_pwm_output+0x6c>
	else if((module!=0)&&((channel!=0)&&(channel!=1))) 
    18ae:	68fb      	ldr	r3, [r7, #12]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d008      	beq.n	18c6 <ftm_pwm_output+0x56>
    18b4:	68bb      	ldr	r3, [r7, #8]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d005      	beq.n	18c6 <ftm_pwm_output+0x56>
    18ba:	68bb      	ldr	r3, [r7, #8]
    18bc:	2b01      	cmp	r3, #1
    18be:	d002      	beq.n	18c6 <ftm_pwm_output+0x56>
		return E_CHN;
    18c0:	f06f 030a 	mvn.w	r3, #10
    18c4:	e00a      	b.n	18dc <ftm_pwm_output+0x6c>
	
	FTM_CnV_REG(ftmptr,channel) = duty_count;
    18c6:	697a      	ldr	r2, [r7, #20]
    18c8:	68bb      	ldr	r3, [r7, #8]
    18ca:	f103 0301 	add.w	r3, r3, #1
    18ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    18d2:	18d3      	adds	r3, r2, r3
    18d4:	687a      	ldr	r2, [r7, #4]
    18d6:	609a      	str	r2, [r3, #8]
	
	return E_OK;
    18d8:	f04f 0300 	mov.w	r3, #0
}
    18dc:	4618      	mov	r0, r3
    18de:	f107 0718 	add.w	r7, r7, #24
    18e2:	46bd      	mov	sp, r7
    18e4:	bd80      	pop	{r7, pc}
    18e6:	bf00      	nop

000018e8 <lptmr_pulse_capture_init>:
 *    @note    捕捉上升沿；捕捉一次lptmr计数器加1，到compare寄存器中的值后产生中断 
 *    		   移植过程中要注意根据捕捉的脉冲的频率来调整COMPARE寄存器的值，例如要捕捉频率为1000HZ的脉冲则该值设为1000.
 */      

ER lptmr_pulse_capture_init(PIN pin)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b082      	sub	sp, #8
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
    SIM_SCGC5 |= SIM_SCGC5_LPTIMER_MASK; /*使能LPT模块时钟*/
    18f0:	4933      	ldr	r1, [pc, #204]	; (19c0 <lptmr_pulse_capture_init+0xd8>)
    18f2:	4b33      	ldr	r3, [pc, #204]	; (19c0 <lptmr_pulse_capture_init+0xd8>)
    18f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    18f8:	f103 0338 	add.w	r3, r3, #56	; 0x38
    18fc:	681b      	ldr	r3, [r3, #0]
    18fe:	f043 0201 	orr.w	r2, r3, #1
    1902:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    1906:	f103 0338 	add.w	r3, r3, #56	; 0x38
    190a:	601a      	str	r2, [r3, #0]
    lptmr_registers_clear();
    190c:	f000 f860 	bl	19d0 <lptmr_registers_clear>

    switch (pin)
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
    1916:	d004      	beq.n	1922 <lptmr_pulse_capture_init+0x3a>
    1918:	f240 3206 	movw	r2, #774	; 0x306
    191c:	4293      	cmp	r3, r2
    191e:	d017      	beq.n	1950 <lptmr_pulse_capture_init+0x68>
    1920:	e02d      	b.n	197e <lptmr_pulse_capture_init+0x96>
    {
        case PTA19:
            SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; /*打开 PORTA 时钟*/
    1922:	4927      	ldr	r1, [pc, #156]	; (19c0 <lptmr_pulse_capture_init+0xd8>)
    1924:	4b26      	ldr	r3, [pc, #152]	; (19c0 <lptmr_pulse_capture_init+0xd8>)
    1926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    192a:	f103 0338 	add.w	r3, r3, #56	; 0x38
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1934:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    1938:	f103 0338 	add.w	r3, r3, #56	; 0x38
    193c:	601a      	str	r2, [r3, #0]
            PORTA_PCR19 = PORT_PCR_MUX(0x6);   /*在PTA19上使用 ALT6*/
    193e:	4b21      	ldr	r3, [pc, #132]	; (19c4 <lptmr_pulse_capture_init+0xdc>)
    1940:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    1944:	64da      	str	r2, [r3, #76]	; 0x4c
            LPTMR0_CSR = LPTMR_CSR_TPS(0x01);  /*设置LPT使用选择的引脚*/
    1946:	4b20      	ldr	r3, [pc, #128]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    1948:	f04f 0210 	mov.w	r2, #16
    194c:	601a      	str	r2, [r3, #0]
            break;
    194e:	e019      	b.n	1984 <lptmr_pulse_capture_init+0x9c>

        case PTC5:
            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; /*打开 PORTC 时钟*/
    1950:	491b      	ldr	r1, [pc, #108]	; (19c0 <lptmr_pulse_capture_init+0xd8>)
    1952:	4b1b      	ldr	r3, [pc, #108]	; (19c0 <lptmr_pulse_capture_init+0xd8>)
    1954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1958:	f103 0338 	add.w	r3, r3, #56	; 0x38
    195c:	681b      	ldr	r3, [r3, #0]
    195e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1962:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    1966:	f103 0338 	add.w	r3, r3, #56	; 0x38
    196a:	601a      	str	r2, [r3, #0]
            PORTC_PCR5 = PORT_PCR_MUX(0x4);    /*在PTC5上使用 ALT4*/
    196c:	4b17      	ldr	r3, [pc, #92]	; (19cc <lptmr_pulse_capture_init+0xe4>)
    196e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1972:	615a      	str	r2, [r3, #20]
            LPTMR0_CSR = LPTMR_CSR_TPS(0x02);  /*设置LPT使用选择的引脚*/
    1974:	4b14      	ldr	r3, [pc, #80]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    1976:	f04f 0220 	mov.w	r2, #32
    197a:	601a      	str	r2, [r3, #0]
            break;
    197c:	e002      	b.n	1984 <lptmr_pulse_capture_init+0x9c>

        default:
            return E_OBJ;
    197e:	f06f 0309 	mvn.w	r3, #9
    1982:	e017      	b.n	19b4 <lptmr_pulse_capture_init+0xcc>
    }

    LPTMR0_PSR |= LPTMR_PSR_PBYP_MASK; /*设定PBYP为1即每捕捉到一次上升沿计数器累加一次*/
    1984:	4b10      	ldr	r3, [pc, #64]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    1986:	4a10      	ldr	r2, [pc, #64]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    1988:	6852      	ldr	r2, [r2, #4]
    198a:	f042 0204 	orr.w	r2, r2, #4
    198e:	605a      	str	r2, [r3, #4]
    LPTMR0_CMR =  LPTMR_CMR_COMPARE(LPTMR_PULSE_COMPARE); /*设置比较值*/
    1990:	4b0d      	ldr	r3, [pc, #52]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    1992:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1996:	609a      	str	r2, [r3, #8]
    LPTMR0_CSR |= LPTMR_CSR_TMS_MASK; /*进入脉冲累加模式,上升沿捕捉*/
    1998:	4b0b      	ldr	r3, [pc, #44]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    199a:	4a0b      	ldr	r2, [pc, #44]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    199c:	6812      	ldr	r2, [r2, #0]
    199e:	f042 0202 	orr.w	r2, r2, #2
    19a2:	601a      	str	r2, [r3, #0]

    LPTMR0_CSR |= LPTMR_CSR_TEN_MASK; /*开启 LPT模块*/
    19a4:	4b08      	ldr	r3, [pc, #32]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    19a6:	4a08      	ldr	r2, [pc, #32]	; (19c8 <lptmr_pulse_capture_init+0xe0>)
    19a8:	6812      	ldr	r2, [r2, #0]
    19aa:	f042 0201 	orr.w	r2, r2, #1
    19ae:	601a      	str	r2, [r3, #0]
    return E_OK;
    19b0:	f04f 0300 	mov.w	r3, #0
}
    19b4:	4618      	mov	r0, r3
    19b6:	f107 0708 	add.w	r7, r7, #8
    19ba:	46bd      	mov	sp, r7
    19bc:	bd80      	pop	{r7, pc}
    19be:	bf00      	nop
    19c0:	40047000 	.word	0x40047000
    19c4:	40049000 	.word	0x40049000
    19c8:	40040000 	.word	0x40040000
    19cc:	4004b000 	.word	0x4004b000

000019d0 <lptmr_registers_clear>:

/**   
 *    @brief   lptmr寄存器清零
 */   
static void lptmr_registers_clear(void)
{
    19d0:	b480      	push	{r7}
    19d2:	af00      	add	r7, sp, #0
	LPTMR0_CSR=0x00;
    19d4:	4b07      	ldr	r3, [pc, #28]	; (19f4 <lptmr_registers_clear+0x24>)
    19d6:	f04f 0200 	mov.w	r2, #0
    19da:	601a      	str	r2, [r3, #0]
	LPTMR0_PSR=0x00;
    19dc:	4b05      	ldr	r3, [pc, #20]	; (19f4 <lptmr_registers_clear+0x24>)
    19de:	f04f 0200 	mov.w	r2, #0
    19e2:	605a      	str	r2, [r3, #4]
	LPTMR0_CMR=0x00;
    19e4:	4b03      	ldr	r3, [pc, #12]	; (19f4 <lptmr_registers_clear+0x24>)
    19e6:	f04f 0200 	mov.w	r2, #0
    19ea:	609a      	str	r2, [r3, #8]
}
    19ec:	46bd      	mov	sp, r7
    19ee:	bc80      	pop	{r7}
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	40040000 	.word	0x40040000

000019f8 <serial_initialize>:
/**
 * @brief 初始化例程
 */
void
serial_initialize(intptr_t exinf)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b084      	sub	sp, #16
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    uint_t  i;
    SPCB    *p_spcb;

    sio_initialize((intptr_t)(NULL));
    1a00:	f04f 0000 	mov.w	r0, #0
    1a04:	f7ff f88a 	bl	b1c <sio_initialize>

    for (p_spcb = spcb_table, i = 0; i < TNUM_PORT; p_spcb++, i++) {
    1a08:	4b11      	ldr	r3, [pc, #68]	; (1a50 <serial_initialize+0x58>)
    1a0a:	60bb      	str	r3, [r7, #8]
    1a0c:	f04f 0300 	mov.w	r3, #0
    1a10:	60fb      	str	r3, [r7, #12]
    1a12:	e012      	b.n	1a3a <serial_initialize+0x42>
        p_spcb->p_spinib = &(spinib_table[i]);
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	ea4f 1203 	mov.w	r2, r3, lsl #4
    1a1a:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <serial_initialize+0x5c>)
    1a1c:	18d2      	adds	r2, r2, r3
    1a1e:	68bb      	ldr	r3, [r7, #8]
    1a20:	601a      	str	r2, [r3, #0]
        p_spcb->openflag = FALSE;
    1a22:	68bb      	ldr	r3, [r7, #8]
    1a24:	f04f 0200 	mov.w	r2, #0
    1a28:	609a      	str	r2, [r3, #8]
    uint_t  i;
    SPCB    *p_spcb;

    sio_initialize((intptr_t)(NULL));

    for (p_spcb = spcb_table, i = 0; i < TNUM_PORT; p_spcb++, i++) {
    1a2a:	68bb      	ldr	r3, [r7, #8]
    1a2c:	f103 0340 	add.w	r3, r3, #64	; 0x40
    1a30:	60bb      	str	r3, [r7, #8]
    1a32:	68fb      	ldr	r3, [r7, #12]
    1a34:	f103 0301 	add.w	r3, r3, #1
    1a38:	60fb      	str	r3, [r7, #12]
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d0e9      	beq.n	1a14 <serial_initialize+0x1c>
        p_spcb->p_spinib = &(spinib_table[i]);
        p_spcb->openflag = FALSE;
    }
    
    /*打开串口*/
    serial_opn_por(UART_NO_GET(UART_NO));
    1a40:	f04f 0001 	mov.w	r0, #1
    1a44:	f000 f808 	bl	1a58 <serial_opn_por>
}
    1a48:	f107 0710 	add.w	r7, r7, #16
    1a4c:	46bd      	mov	sp, r7
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	1fff8604 	.word	0x1fff8604
    1a54:	00002aec 	.word	0x00002aec

00001a58 <serial_opn_por>:
 *
 * @param portid 串口的序号
 */
ER
serial_opn_por(ID portid)
{
    1a58:	b580      	push	{r7, lr}
    1a5a:	b084      	sub	sp, #16
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	6078      	str	r0, [r7, #4]
    SPCB    *p_spcb;
    ER      ercd;

    if (!(0 <= portid && portid <= TNUM_PORT)) {
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	2b00      	cmp	r3, #0
    1a64:	db02      	blt.n	1a6c <serial_opn_por+0x14>
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	2b01      	cmp	r3, #1
    1a6a:	dd02      	ble.n	1a72 <serial_opn_por+0x1a>
        return(E_ID);               /* ID号错误 */
    1a6c:	f06f 0303 	mvn.w	r3, #3
    1a70:	e058      	b.n	1b24 <serial_opn_por+0xcc>
    }
    p_spcb = get_spcb(portid);
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	f103 33ff 	add.w	r3, r3, #4294967295
    1a78:	ea4f 1383 	mov.w	r3, r3, lsl #6
    1a7c:	461a      	mov	r2, r3
    1a7e:	4b2c      	ldr	r3, [pc, #176]	; (1b30 <serial_opn_por+0xd8>)
    1a80:	18d3      	adds	r3, r2, r3
    1a82:	60bb      	str	r3, [r7, #8]

    if (p_spcb->openflag) {         /* 检查是否已经打开 */
    1a84:	68bb      	ldr	r3, [r7, #8]
    1a86:	689b      	ldr	r3, [r3, #8]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d003      	beq.n	1a94 <serial_opn_por+0x3c>
        ercd = E_OBJ;
    1a8c:	f06f 0309 	mvn.w	r3, #9
    1a90:	60fb      	str	r3, [r7, #12]
    1a92:	e046      	b.n	1b22 <serial_opn_por+0xca>
    else {
        /*
         *  初始化变量，串行口模式：带回显，\n前附加\r, 流控接收和流控发
         *  送
         */
        p_spcb->ioctl = ((~IOCTL_ECHO) | IOCTL_CRLF | IOCTL_FCSND | IOCTL_FCRCV);
    1a94:	68bb      	ldr	r3, [r7, #8]
    1a96:	f06f 0201 	mvn.w	r2, #1
    1a9a:	611a      	str	r2, [r3, #16]

        p_spcb->rcv_read_ptr = p_spcb->rcv_write_ptr = 0U;
    1a9c:	68bb      	ldr	r3, [r7, #8]
    1a9e:	f04f 0200 	mov.w	r2, #0
    1aa2:	619a      	str	r2, [r3, #24]
    1aa4:	68bb      	ldr	r3, [r7, #8]
    1aa6:	699a      	ldr	r2, [r3, #24]
    1aa8:	68bb      	ldr	r3, [r7, #8]
    1aaa:	615a      	str	r2, [r3, #20]
        p_spcb->rcv_count = 0U;
    1aac:	68bb      	ldr	r3, [r7, #8]
    1aae:	f04f 0200 	mov.w	r2, #0
    1ab2:	61da      	str	r2, [r3, #28]
        p_spcb->rcv_fc_chr = '\0';
    1ab4:	68bb      	ldr	r3, [r7, #8]
    1ab6:	f04f 0200 	mov.w	r2, #0
    1aba:	f883 2020 	strb.w	r2, [r3, #32]
        p_spcb->rcv_stopped = FALSE;
    1abe:	68bb      	ldr	r3, [r7, #8]
    1ac0:	f04f 0200 	mov.w	r2, #0
    1ac4:	625a      	str	r2, [r3, #36]	; 0x24
        p_spcb->rcv_buf_empty = TRUE;
    1ac6:	68bb      	ldr	r3, [r7, #8]
    1ac8:	f04f 0201 	mov.w	r2, #1
    1acc:	629a      	str	r2, [r3, #40]	; 0x28

        p_spcb->snd_read_ptr = p_spcb->snd_write_ptr = 0U;
    1ace:	68bb      	ldr	r3, [r7, #8]
    1ad0:	f04f 0200 	mov.w	r2, #0
    1ad4:	631a      	str	r2, [r3, #48]	; 0x30
    1ad6:	68bb      	ldr	r3, [r7, #8]
    1ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1ada:	68bb      	ldr	r3, [r7, #8]
    1adc:	62da      	str	r2, [r3, #44]	; 0x2c
        p_spcb->snd_count = 0U;
    1ade:	68bb      	ldr	r3, [r7, #8]
    1ae0:	f04f 0200 	mov.w	r2, #0
    1ae4:	635a      	str	r2, [r3, #52]	; 0x34
        p_spcb->snd_stopped = FALSE;
    1ae6:	68bb      	ldr	r3, [r7, #8]
    1ae8:	f04f 0200 	mov.w	r2, #0
    1aec:	639a      	str	r2, [r3, #56]	; 0x38
        p_spcb->snd_buf_full = FALSE;
    1aee:	68bb      	ldr	r3, [r7, #8]
    1af0:	f04f 0200 	mov.w	r2, #0
    1af4:	63da      	str	r2, [r3, #60]	; 0x3c

        /**
         *  硬件初始化
         */
        p_spcb->p_siopcb = sio_opn_por(portid, (intptr_t) p_spcb);
    1af6:	68bb      	ldr	r3, [r7, #8]
    1af8:	6878      	ldr	r0, [r7, #4]
    1afa:	4619      	mov	r1, r3
    1afc:	f7ff f834 	bl	b68 <sio_opn_por>
    1b00:	4602      	mov	r2, r0
    1b02:	68bb      	ldr	r3, [r7, #8]
    1b04:	605a      	str	r2, [r3, #4]

        /**
         *  允许接收回调函数，即允许接收中断
         */
        sio_ena_cbr(p_spcb->p_siopcb, SIO_RDY_RCV);
    1b06:	68bb      	ldr	r3, [r7, #8]
    1b08:	685b      	ldr	r3, [r3, #4]
    1b0a:	4618      	mov	r0, r3
    1b0c:	f04f 0102 	mov.w	r1, #2
    1b10:	f7ff f934 	bl	d7c <sio_ena_cbr>
        p_spcb->openflag = TRUE;
    1b14:	68bb      	ldr	r3, [r7, #8]
    1b16:	f04f 0201 	mov.w	r2, #1
    1b1a:	609a      	str	r2, [r3, #8]

        ercd = E_OK;
    1b1c:	f04f 0300 	mov.w	r3, #0
    1b20:	60fb      	str	r3, [r7, #12]
    }
    return(ercd);
    1b22:	68fb      	ldr	r3, [r7, #12]
}
    1b24:	4618      	mov	r0, r3
    1b26:	f107 0710 	add.w	r7, r7, #16
    1b2a:	46bd      	mov	sp, r7
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	bf00      	nop
    1b30:	1fff8604 	.word	0x1fff8604

00001b34 <serial_snd_chr>:
 * @note    如果发送寄存器为空，则直接把待发字符填入串行口寄存器
 *          否则返回，把待发字符填入缓存
 */
Inline bool_t
serial_snd_chr(SPCB *p_spcb, uint8_t c)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b082      	sub	sp, #8
    1b38:	af00      	add	r7, sp, #0
    1b3a:	6078      	str	r0, [r7, #4]
    1b3c:	460b      	mov	r3, r1
    1b3e:	70fb      	strb	r3, [r7, #3]
    if (sio_snd_chr(p_spcb->p_siopcb, c)) {
    1b40:	687b      	ldr	r3, [r7, #4]
    1b42:	685a      	ldr	r2, [r3, #4]
    1b44:	78fb      	ldrb	r3, [r7, #3]
    1b46:	4610      	mov	r0, r2
    1b48:	4619      	mov	r1, r3
    1b4a:	f7ff f8e5 	bl	d18 <sio_snd_chr>
    1b4e:	4603      	mov	r3, r0
    1b50:	2b00      	cmp	r3, #0
    1b52:	d002      	beq.n	1b5a <serial_snd_chr+0x26>
        return(TRUE);
    1b54:	f04f 0301 	mov.w	r3, #1
    1b58:	e008      	b.n	1b6c <serial_snd_chr+0x38>
    }
    else {
        sio_ena_cbr(p_spcb->p_siopcb, SIO_RDY_SND);
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	685b      	ldr	r3, [r3, #4]
    1b5e:	4618      	mov	r0, r3
    1b60:	f04f 0101 	mov.w	r1, #1
    1b64:	f7ff f90a 	bl	d7c <sio_ena_cbr>
        return(FALSE);
    1b68:	f04f 0300 	mov.w	r3, #0
    }
}
    1b6c:	4618      	mov	r0, r3
    1b6e:	f107 0708 	add.w	r7, r7, #8
    1b72:	46bd      	mov	sp, r7
    1b74:	bd80      	pop	{r7, pc}
    1b76:	bf00      	nop

00001b78 <sio_irdy_snd>:
/**
 * @brief 串行口发送回调函数，该函数在串行口接收中断中被调用
 */
void
sio_irdy_snd(intptr_t exinf)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b084      	sub	sp, #16
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	6078      	str	r0, [r7, #4]
    SPCB    *p_spcb;

    p_spcb = (SPCB *) exinf;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	60fb      	str	r3, [r7, #12]
    if (p_spcb->rcv_fc_chr != '\0') {
    1b84:	68fb      	ldr	r3, [r7, #12]
    1b86:	f893 3020 	ldrb.w	r3, [r3, #32]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d00e      	beq.n	1bac <sio_irdy_snd+0x34>
        /*
         *  发送流控字符
         */
        (void) sio_snd_chr(p_spcb->p_siopcb, p_spcb->rcv_fc_chr);
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	685a      	ldr	r2, [r3, #4]
    1b92:	68fb      	ldr	r3, [r7, #12]
    1b94:	f893 3020 	ldrb.w	r3, [r3, #32]
    1b98:	4610      	mov	r0, r2
    1b9a:	4619      	mov	r1, r3
    1b9c:	f7ff f8bc 	bl	d18 <sio_snd_chr>
        p_spcb->rcv_fc_chr = '\0';
    1ba0:	68fb      	ldr	r3, [r7, #12]
    1ba2:	f04f 0200 	mov.w	r2, #0
    1ba6:	f883 2020 	strb.w	r2, [r3, #32]
    1baa:	e03e      	b.n	1c2a <sio_irdy_snd+0xb2>
    }
    else if (!(p_spcb->snd_stopped) && p_spcb->snd_count > 0U) {
    1bac:	68fb      	ldr	r3, [r7, #12]
    1bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d133      	bne.n	1c1c <sio_irdy_snd+0xa4>
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d02f      	beq.n	1c1c <sio_irdy_snd+0xa4>
        /**
         *  从发送缓存中取字符发送
         */
        (void) sio_snd_chr(p_spcb->p_siopcb,
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	685a      	ldr	r2, [r3, #4]
                    p_spcb->p_spinib->snd_buffer[p_spcb->snd_read_ptr]);
    1bc0:	68fb      	ldr	r3, [r7, #12]
    1bc2:	681b      	ldr	r3, [r3, #0]
    1bc4:	68d9      	ldr	r1, [r3, #12]
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bca:	18cb      	adds	r3, r1, r3
    }
    else if (!(p_spcb->snd_stopped) && p_spcb->snd_count > 0U) {
        /**
         *  从发送缓存中取字符发送
         */
        (void) sio_snd_chr(p_spcb->p_siopcb,
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	4610      	mov	r0, r2
    1bd0:	4619      	mov	r1, r3
    1bd2:	f7ff f8a1 	bl	d18 <sio_snd_chr>
                    p_spcb->p_spinib->snd_buffer[p_spcb->snd_read_ptr]);
        INC_PTR(p_spcb->snd_read_ptr, p_spcb->p_spinib->snd_bufsz);
    1bd6:	68fb      	ldr	r3, [r7, #12]
    1bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bda:	f103 0201 	add.w	r2, r3, #1
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	62da      	str	r2, [r3, #44]	; 0x2c
    1be2:	68fb      	ldr	r3, [r7, #12]
    1be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1be6:	68fb      	ldr	r3, [r7, #12]
    1be8:	681b      	ldr	r3, [r3, #0]
    1bea:	689b      	ldr	r3, [r3, #8]
    1bec:	429a      	cmp	r2, r3
    1bee:	d103      	bne.n	1bf8 <sio_irdy_snd+0x80>
    1bf0:	68fb      	ldr	r3, [r7, #12]
    1bf2:	f04f 0200 	mov.w	r2, #0
    1bf6:	62da      	str	r2, [r3, #44]	; 0x2c
        if (p_spcb->snd_count == p_spcb->p_spinib->snd_bufsz) {
    1bf8:	68fb      	ldr	r3, [r7, #12]
    1bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1bfc:	68fb      	ldr	r3, [r7, #12]
    1bfe:	681b      	ldr	r3, [r3, #0]
    1c00:	689b      	ldr	r3, [r3, #8]
    1c02:	429a      	cmp	r2, r3
    1c04:	d103      	bne.n	1c0e <sio_irdy_snd+0x96>
            /* 发送缓存未满 */
            p_spcb->snd_buf_full = FALSE;
    1c06:	68fb      	ldr	r3, [r7, #12]
    1c08:	f04f 0200 	mov.w	r2, #0
    1c0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        p_spcb->snd_count--;
    1c0e:	68fb      	ldr	r3, [r7, #12]
    1c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1c12:	f103 32ff 	add.w	r2, r3, #4294967295
    1c16:	68fb      	ldr	r3, [r7, #12]
    1c18:	635a      	str	r2, [r3, #52]	; 0x34
    1c1a:	e006      	b.n	1c2a <sio_irdy_snd+0xb2>
    }
    else {
        /**
         *  没有后续需要发送的数据，禁止中断.
         */
        sio_dis_cbr(p_spcb->p_siopcb, SIO_RDY_SND);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	685b      	ldr	r3, [r3, #4]
    1c20:	4618      	mov	r0, r3
    1c22:	f04f 0101 	mov.w	r1, #1
    1c26:	f7ff f8bd 	bl	da4 <sio_dis_cbr>
    }
}
    1c2a:	f107 0710 	add.w	r7, r7, #16
    1c2e:	46bd      	mov	sp, r7
    1c30:	bd80      	pop	{r7, pc}
    1c32:	bf00      	nop

00001c34 <sio_irdy_rcv>:
/**
 * @brief 串行口接收回调函数，该函数在接收中断中被调用.
 */
void
sio_irdy_rcv(intptr_t exinf)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	b084      	sub	sp, #16
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
    SPCB    *p_spcb;
    char_t   c;

    p_spcb = (SPCB *) exinf;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	60fb      	str	r3, [r7, #12]
    c = (char_t) sio_rcv_chr(p_spcb->p_siopcb);
    1c40:	68fb      	ldr	r3, [r7, #12]
    1c42:	685b      	ldr	r3, [r3, #4]
    1c44:	4618      	mov	r0, r3
    1c46:	f7ff f883 	bl	d50 <sio_rcv_chr>
    1c4a:	4603      	mov	r3, r0
    1c4c:	72fb      	strb	r3, [r7, #11]
    if ((p_spcb->ioctl & IOCTL_FCSND) != 0U && c == FC_STOP) {
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	691b      	ldr	r3, [r3, #16]
    1c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1c56:	2b00      	cmp	r3, #0
    1c58:	d007      	beq.n	1c6a <sio_irdy_rcv+0x36>
    1c5a:	7afb      	ldrb	r3, [r7, #11]
    1c5c:	2b13      	cmp	r3, #19
    1c5e:	d104      	bne.n	1c6a <sio_irdy_rcv+0x36>
        /**
         *  接收到流控字符，发送停止.
         */
        p_spcb->snd_stopped = TRUE;
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	f04f 0201 	mov.w	r2, #1
    1c66:	639a      	str	r2, [r3, #56]	; 0x38
    1c68:	e0aa      	b.n	1dc0 <sio_irdy_rcv+0x18c>
    }
    else if (p_spcb->snd_stopped && (c == FC_START
    1c6a:	68fb      	ldr	r3, [r7, #12]
    1c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d045      	beq.n	1cfe <sio_irdy_rcv+0xca>
    1c72:	7afb      	ldrb	r3, [r7, #11]
    1c74:	2b11      	cmp	r3, #17
    1c76:	d005      	beq.n	1c84 <sio_irdy_rcv+0x50>
                || (p_spcb->ioctl & IOCTL_FCANY) != 0U)) {
    1c78:	68fb      	ldr	r3, [r7, #12]
    1c7a:	691b      	ldr	r3, [r3, #16]
    1c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1c80:	2b00      	cmp	r3, #0
    1c82:	d03c      	beq.n	1cfe <sio_irdy_rcv+0xca>
        /**
         *  接收到FC_START，开始发送
         */
        p_spcb->snd_stopped = FALSE;
    1c84:	68fb      	ldr	r3, [r7, #12]
    1c86:	f04f 0200 	mov.w	r2, #0
    1c8a:	639a      	str	r2, [r3, #56]	; 0x38
        if (p_spcb->snd_count > 0U) {
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1c90:	2b00      	cmp	r3, #0
    1c92:	f000 8095 	beq.w	1dc0 <sio_irdy_rcv+0x18c>
            c = p_spcb->p_spinib->snd_buffer[p_spcb->snd_read_ptr];
    1c96:	68fb      	ldr	r3, [r7, #12]
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	68da      	ldr	r2, [r3, #12]
    1c9c:	68fb      	ldr	r3, [r7, #12]
    1c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ca0:	18d3      	adds	r3, r2, r3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	72fb      	strb	r3, [r7, #11]
            if (serial_snd_chr(p_spcb, c)) {
    1ca6:	7afb      	ldrb	r3, [r7, #11]
    1ca8:	68f8      	ldr	r0, [r7, #12]
    1caa:	4619      	mov	r1, r3
    1cac:	f7ff ff42 	bl	1b34 <serial_snd_chr>
    1cb0:	4603      	mov	r3, r0
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	f000 8083 	beq.w	1dbe <sio_irdy_rcv+0x18a>
                INC_PTR(p_spcb->snd_read_ptr, p_spcb->p_spinib->snd_bufsz);
    1cb8:	68fb      	ldr	r3, [r7, #12]
    1cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cbc:	f103 0201 	add.w	r2, r3, #1
    1cc0:	68fb      	ldr	r3, [r7, #12]
    1cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cc8:	68fb      	ldr	r3, [r7, #12]
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	689b      	ldr	r3, [r3, #8]
    1cce:	429a      	cmp	r2, r3
    1cd0:	d103      	bne.n	1cda <sio_irdy_rcv+0xa6>
    1cd2:	68fb      	ldr	r3, [r7, #12]
    1cd4:	f04f 0200 	mov.w	r2, #0
    1cd8:	62da      	str	r2, [r3, #44]	; 0x2c
                if (p_spcb->snd_count == p_spcb->p_spinib->snd_bufsz) {
    1cda:	68fb      	ldr	r3, [r7, #12]
    1cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1cde:	68fb      	ldr	r3, [r7, #12]
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	689b      	ldr	r3, [r3, #8]
    1ce4:	429a      	cmp	r2, r3
    1ce6:	d103      	bne.n	1cf0 <sio_irdy_rcv+0xbc>
                    /* 发送缓存未满 */
                    p_spcb->snd_buf_full = FALSE;
    1ce8:	68fb      	ldr	r3, [r7, #12]
    1cea:	f04f 0200 	mov.w	r2, #0
    1cee:	63da      	str	r2, [r3, #60]	; 0x3c
                }
                p_spcb->snd_count--;
    1cf0:	68fb      	ldr	r3, [r7, #12]
    1cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1cf4:	f103 32ff 	add.w	r2, r3, #4294967295
    1cf8:	68fb      	ldr	r3, [r7, #12]
    1cfa:	635a      	str	r2, [r3, #52]	; 0x34
                || (p_spcb->ioctl & IOCTL_FCANY) != 0U)) {
        /**
         *  接收到FC_START，开始发送
         */
        p_spcb->snd_stopped = FALSE;
        if (p_spcb->snd_count > 0U) {
    1cfc:	e060      	b.n	1dc0 <sio_irdy_rcv+0x18c>
                }
                p_spcb->snd_count--;
            }
        }
    }
    else if ((p_spcb->ioctl & IOCTL_FCSND) != 0U && c == FC_START) {
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	691b      	ldr	r3, [r3, #16]
    1d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1d06:	2b00      	cmp	r3, #0
    1d08:	d002      	beq.n	1d10 <sio_irdy_rcv+0xdc>
    1d0a:	7afb      	ldrb	r3, [r7, #11]
    1d0c:	2b11      	cmp	r3, #17
    1d0e:	d057      	beq.n	1dc0 <sio_irdy_rcv+0x18c>
        /**
         *  丢弃流控字符
         */
    }
    else if (p_spcb->rcv_count == p_spcb->p_spinib->rcv_bufsz) {
    1d10:	68fb      	ldr	r3, [r7, #12]
    1d12:	69da      	ldr	r2, [r3, #28]
    1d14:	68fb      	ldr	r3, [r7, #12]
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	681b      	ldr	r3, [r3, #0]
    1d1a:	429a      	cmp	r2, r3
    1d1c:	d050      	beq.n	1dc0 <sio_irdy_rcv+0x18c>
    }
    else {
        /**
         *  已接收到的数据送入接收缓存
         */
        p_spcb->p_spinib->rcv_buffer[p_spcb->rcv_write_ptr] = c;
    1d1e:	68fb      	ldr	r3, [r7, #12]
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	685a      	ldr	r2, [r3, #4]
    1d24:	68fb      	ldr	r3, [r7, #12]
    1d26:	699b      	ldr	r3, [r3, #24]
    1d28:	18d3      	adds	r3, r2, r3
    1d2a:	7afa      	ldrb	r2, [r7, #11]
    1d2c:	701a      	strb	r2, [r3, #0]
        INC_PTR(p_spcb->rcv_write_ptr, p_spcb->p_spinib->rcv_bufsz);
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	699b      	ldr	r3, [r3, #24]
    1d32:	f103 0201 	add.w	r2, r3, #1
    1d36:	68fb      	ldr	r3, [r7, #12]
    1d38:	619a      	str	r2, [r3, #24]
    1d3a:	68fb      	ldr	r3, [r7, #12]
    1d3c:	699a      	ldr	r2, [r3, #24]
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	429a      	cmp	r2, r3
    1d46:	d103      	bne.n	1d50 <sio_irdy_rcv+0x11c>
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	f04f 0200 	mov.w	r2, #0
    1d4e:	619a      	str	r2, [r3, #24]
        if (p_spcb->rcv_count == 0U) {
    1d50:	68fb      	ldr	r3, [r7, #12]
    1d52:	69db      	ldr	r3, [r3, #28]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d103      	bne.n	1d60 <sio_irdy_rcv+0x12c>
            /* 接收缓存不为空 */
            p_spcb->rcv_buf_empty = FALSE;
    1d58:	68fb      	ldr	r3, [r7, #12]
    1d5a:	f04f 0200 	mov.w	r2, #0
    1d5e:	629a      	str	r2, [r3, #40]	; 0x28
        }
        p_spcb->rcv_count++;
    1d60:	68fb      	ldr	r3, [r7, #12]
    1d62:	69db      	ldr	r3, [r3, #28]
    1d64:	f103 0201 	add.w	r2, r3, #1
    1d68:	68fb      	ldr	r3, [r7, #12]
    1d6a:	61da      	str	r2, [r3, #28]

        /**
         *  是否需要发送流控字符
         */
        if ((p_spcb->ioctl & IOCTL_FCRCV) != 0U && !(p_spcb->rcv_stopped)
    1d6c:	68fb      	ldr	r3, [r7, #12]
    1d6e:	691b      	ldr	r3, [r3, #16]
    1d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1d74:	2b00      	cmp	r3, #0
    1d76:	d023      	beq.n	1dc0 <sio_irdy_rcv+0x18c>
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d11f      	bne.n	1dc0 <sio_irdy_rcv+0x18c>
                        && p_spcb->rcv_count
    1d80:	68fb      	ldr	r3, [r7, #12]
    1d82:	69d9      	ldr	r1, [r3, #28]
                            >= BUFCNT_STOP(p_spcb->p_spinib->rcv_bufsz)) {
    1d84:	68fb      	ldr	r3, [r7, #12]
    1d86:	681b      	ldr	r3, [r3, #0]
    1d88:	681a      	ldr	r2, [r3, #0]
    1d8a:	4613      	mov	r3, r2
    1d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1d90:	189b      	adds	r3, r3, r2
    1d92:	ea4f 0393 	mov.w	r3, r3, lsr #2

        /**
         *  是否需要发送流控字符
         */
        if ((p_spcb->ioctl & IOCTL_FCRCV) != 0U && !(p_spcb->rcv_stopped)
                        && p_spcb->rcv_count
    1d96:	4299      	cmp	r1, r3
    1d98:	d312      	bcc.n	1dc0 <sio_irdy_rcv+0x18c>
                            >= BUFCNT_STOP(p_spcb->p_spinib->rcv_bufsz)) {
            if (!serial_snd_chr(p_spcb, FC_STOP)) {
    1d9a:	68f8      	ldr	r0, [r7, #12]
    1d9c:	f04f 0113 	mov.w	r1, #19
    1da0:	f7ff fec8 	bl	1b34 <serial_snd_chr>
    1da4:	4603      	mov	r3, r0
    1da6:	2b00      	cmp	r3, #0
    1da8:	d104      	bne.n	1db4 <sio_irdy_rcv+0x180>
                p_spcb->rcv_fc_chr = FC_STOP;
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	f04f 0213 	mov.w	r2, #19
    1db0:	f883 2020 	strb.w	r2, [r3, #32]
            }
            p_spcb->rcv_stopped = TRUE;
    1db4:	68fb      	ldr	r3, [r7, #12]
    1db6:	f04f 0201 	mov.w	r2, #1
    1dba:	625a      	str	r2, [r3, #36]	; 0x24
    1dbc:	e000      	b.n	1dc0 <sio_irdy_rcv+0x18c>
                || (p_spcb->ioctl & IOCTL_FCANY) != 0U)) {
        /**
         *  接收到FC_START，开始发送
         */
        p_spcb->snd_stopped = FALSE;
        if (p_spcb->snd_count > 0U) {
    1dbe:	bf00      	nop
                p_spcb->rcv_fc_chr = FC_STOP;
            }
            p_spcb->rcv_stopped = TRUE;
        }
    }
}
    1dc0:	f107 0710 	add.w	r7, r7, #16
    1dc4:	46bd      	mov	sp, r7
    1dc6:	bd80      	pop	{r7, pc}

00001dc8 <light_init>:

/**
 *    @brief   light初始化
 */
void light_init(void)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	b082      	sub	sp, #8
    1dcc:	af00      	add	r7, sp, #0
    uint_t i;
    LGCB *p_lgcb;

    for (p_lgcb = lgcb_table, i = 0; i < LIGHT_NUM; p_lgcb++, i++)
    1dce:	4b1f      	ldr	r3, [pc, #124]	; (1e4c <light_init+0x84>)
    1dd0:	603b      	str	r3, [r7, #0]
    1dd2:	f04f 0300 	mov.w	r3, #0
    1dd6:	607b      	str	r3, [r7, #4]
    1dd8:	e00f      	b.n	1dfa <light_init+0x32>
    {
        p_lgcb->openflag = FALSE;
    1dda:	683b      	ldr	r3, [r7, #0]
    1ddc:	f04f 0200 	mov.w	r2, #0
    1de0:	605a      	str	r2, [r3, #4]
        p_lgcb->errorflag = E_SYS;
    1de2:	683b      	ldr	r3, [r7, #0]
    1de4:	f04f 32ff 	mov.w	r2, #4294967295
    1de8:	609a      	str	r2, [r3, #8]
void light_init(void)
{
    uint_t i;
    LGCB *p_lgcb;

    for (p_lgcb = lgcb_table, i = 0; i < LIGHT_NUM; p_lgcb++, i++)
    1dea:	683b      	ldr	r3, [r7, #0]
    1dec:	f103 030c 	add.w	r3, r3, #12
    1df0:	603b      	str	r3, [r7, #0]
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	f103 0301 	add.w	r3, r3, #1
    1df8:	607b      	str	r3, [r7, #4]
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	2b07      	cmp	r3, #7
    1dfe:	d9ec      	bls.n	1dda <light_init+0x12>
        p_lgcb->openflag = FALSE;
        p_lgcb->errorflag = E_SYS;
    }

    /* 打开IO口 */
    light_open_port(LIGHT0);
    1e00:	f04f 7045 	mov.w	r0, #51642368	; 0x3140000
    1e04:	f000 f82a 	bl	1e5c <light_open_port>
    light_open_port(LIGHT1);
    1e08:	4811      	ldr	r0, [pc, #68]	; (1e50 <light_init+0x88>)
    1e0a:	f000 f827 	bl	1e5c <light_open_port>
    light_open_port(LIGHT2);
    1e0e:	4811      	ldr	r0, [pc, #68]	; (1e54 <light_init+0x8c>)
    1e10:	f000 f824 	bl	1e5c <light_open_port>
    light_open_port(LIGHT3);
    1e14:	4810      	ldr	r0, [pc, #64]	; (1e58 <light_init+0x90>)
    1e16:	f000 f821 	bl	1e5c <light_open_port>

    /* 初始化灯带端口 */
    gpio_init(LIGHT_PORT_GET(LIGHT_BAR0), LIGHT_PIN_GET(LIGHT_BAR0), OUT_PUT,0);
    1e1a:	f04f 0003 	mov.w	r0, #3
    1e1e:	f04f 010e 	mov.w	r1, #14
    1e22:	f04f 0201 	mov.w	r2, #1
    1e26:	f04f 0300 	mov.w	r3, #0
    1e2a:	f7ff fa7b 	bl	1324 <gpio_init>
    gpio_init(LIGHT_PORT_GET(LIGHT_BAR1), LIGHT_PIN_GET(LIGHT_BAR1), OUT_PUT,0);
    1e2e:	f04f 0003 	mov.w	r0, #3
    1e32:	f04f 010d 	mov.w	r1, #13
    1e36:	f04f 0201 	mov.w	r2, #1
    1e3a:	f04f 0300 	mov.w	r3, #0
    1e3e:	f7ff fa71 	bl	1324 <gpio_init>
}
    1e42:	f107 0708 	add.w	r7, r7, #8
    1e46:	46bd      	mov	sp, r7
    1e48:	bd80      	pop	{r7, pc}
    1e4a:	bf00      	nop
    1e4c:	1fff8644 	.word	0x1fff8644
    1e50:	05080001 	.word	0x05080001
    1e54:	050a0002 	.word	0x050a0002
    1e58:	05090003 	.word	0x05090003

00001e5c <light_open_port>:
 *    @param   lightid  灯的ID号
 *
 *    @return  ercd 错误码
 */
static ER light_open_port(ID lightid)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b086      	sub	sp, #24
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
    LGCB *p_lgcb;
    ER ercd = 0;
    1e64:	f04f 0300 	mov.w	r3, #0
    1e68:	617b      	str	r3, [r7, #20]
    ID light_no;

    light_no = LIGHT_NO_GET(lightid);
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1e70:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1e74:	613b      	str	r3, [r7, #16]

    if (!(0 <= light_no && light_no < LIGHT_NUM))
    1e76:	693b      	ldr	r3, [r7, #16]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	db02      	blt.n	1e82 <light_open_port+0x26>
    1e7c:	693b      	ldr	r3, [r7, #16]
    1e7e:	2b07      	cmp	r3, #7
    1e80:	dd02      	ble.n	1e88 <light_open_port+0x2c>
    {
        return (E_ID); /* ID号错误 */
    1e82:	f06f 0303 	mvn.w	r3, #3
    1e86:	e036      	b.n	1ef6 <light_open_port+0x9a>
    }
    p_lgcb = get_lgcb(light_no);
    1e88:	693a      	ldr	r2, [r7, #16]
    1e8a:	4613      	mov	r3, r2
    1e8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1e90:	189b      	adds	r3, r3, r2
    1e92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1e96:	461a      	mov	r2, r3
    1e98:	4b19      	ldr	r3, [pc, #100]	; (1f00 <light_open_port+0xa4>)
    1e9a:	18d3      	adds	r3, r2, r3
    1e9c:	60fb      	str	r3, [r7, #12]

    if (p_lgcb->openflag)
    1e9e:	68fb      	ldr	r3, [r7, #12]
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d003      	beq.n	1eae <light_open_port+0x52>
    { /* 检查是否已经打开 */
        ercd = E_OBJ;
    1ea6:	f06f 0309 	mvn.w	r3, #9
    1eaa:	617b      	str	r3, [r7, #20]
    1eac:	e022      	b.n	1ef4 <light_open_port+0x98>
    else
    {
        /**
         *  硬件初始化
         */
        gpio_init(LIGHT_PORT_GET(lightid), LIGHT_PIN_GET(lightid), OUT_PUT,
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	ea4f 4323 	mov.w	r3, r3, asr #16
    1eb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1eb8:	ea4f 2323 	mov.w	r3, r3, asr #8
    1ebc:	f103 32ff 	add.w	r2, r3, #4294967295
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	ea4f 4323 	mov.w	r3, r3, asr #16
    1ec6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    1eca:	f103 33ff 	add.w	r3, r3, #4294967295
    1ece:	4610      	mov	r0, r2
    1ed0:	4619      	mov	r1, r3
    1ed2:	f04f 0201 	mov.w	r2, #1
    1ed6:	f04f 0301 	mov.w	r3, #1
    1eda:	f7ff fa23 	bl	1324 <gpio_init>
                LIGHT_OFF);

        p_lgcb->openflag = TRUE;
    1ede:	68fb      	ldr	r3, [r7, #12]
    1ee0:	f04f 0201 	mov.w	r2, #1
    1ee4:	605a      	str	r2, [r3, #4]
        p_lgcb->state = LIGHT_OFF;
    1ee6:	68fb      	ldr	r3, [r7, #12]
    1ee8:	f04f 0201 	mov.w	r2, #1
    1eec:	601a      	str	r2, [r3, #0]

        ercd = E_OK;
    1eee:	f04f 0300 	mov.w	r3, #0
    1ef2:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    1ef4:	697b      	ldr	r3, [r7, #20]
}
    1ef6:	4618      	mov	r0, r3
    1ef8:	f107 0718 	add.w	r7, r7, #24
    1efc:	46bd      	mov	sp, r7
    1efe:	bd80      	pop	{r7, pc}
    1f00:	1fff8644 	.word	0x1fff8644

00001f04 <light_open>:
 *    @return  ercd 错误码
 *
 *    @note   控制指示灯亮暗
 */
ER light_open(ID lightid)
{
    1f04:	b580      	push	{r7, lr}
    1f06:	b086      	sub	sp, #24
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
    LGCB *p_lgcb;
    ER ercd = 0;
    1f0c:	f04f 0300 	mov.w	r3, #0
    1f10:	617b      	str	r3, [r7, #20]
    ID light_no;

    light_no = LIGHT_NO_GET(lightid);
    1f12:	687b      	ldr	r3, [r7, #4]
    1f14:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1f18:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1f1c:	613b      	str	r3, [r7, #16]

    if (!(0 <= light_no && light_no < LIGHT_NUM))
    1f1e:	693b      	ldr	r3, [r7, #16]
    1f20:	2b00      	cmp	r3, #0
    1f22:	db02      	blt.n	1f2a <light_open+0x26>
    1f24:	693b      	ldr	r3, [r7, #16]
    1f26:	2b07      	cmp	r3, #7
    1f28:	dd02      	ble.n	1f30 <light_open+0x2c>
    {
        return (E_ID); /* ID号错误 */
    1f2a:	f06f 0303 	mvn.w	r3, #3
    1f2e:	e030      	b.n	1f92 <light_open+0x8e>
    }
    p_lgcb = get_lgcb(light_no);
    1f30:	693a      	ldr	r2, [r7, #16]
    1f32:	4613      	mov	r3, r2
    1f34:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1f38:	189b      	adds	r3, r3, r2
    1f3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1f3e:	461a      	mov	r2, r3
    1f40:	4b16      	ldr	r3, [pc, #88]	; (1f9c <light_open+0x98>)
    1f42:	18d3      	adds	r3, r2, r3
    1f44:	60fb      	str	r3, [r7, #12]

    if (p_lgcb->openflag)
    1f46:	68fb      	ldr	r3, [r7, #12]
    1f48:	685b      	ldr	r3, [r3, #4]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d01d      	beq.n	1f8a <light_open+0x86>
    { /* 检查是否已经打开 */
        gpio_set(LIGHT_PORT_GET(lightid), LIGHT_PIN_GET(lightid), LIGHT_ON);
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	ea4f 4323 	mov.w	r3, r3, asr #16
    1f54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1f58:	ea4f 2323 	mov.w	r3, r3, asr #8
    1f5c:	f103 32ff 	add.w	r2, r3, #4294967295
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	ea4f 4323 	mov.w	r3, r3, asr #16
    1f66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    1f6a:	f103 33ff 	add.w	r3, r3, #4294967295
    1f6e:	4610      	mov	r0, r2
    1f70:	4619      	mov	r1, r3
    1f72:	f04f 0200 	mov.w	r2, #0
    1f76:	f7ff fa2b 	bl	13d0 <gpio_set>
        p_lgcb->state = LIGHT_ON;
    1f7a:	68fb      	ldr	r3, [r7, #12]
    1f7c:	f04f 0200 	mov.w	r2, #0
    1f80:	601a      	str	r2, [r3, #0]
        
        ercd = E_OK;
    1f82:	f04f 0300 	mov.w	r3, #0
    1f86:	617b      	str	r3, [r7, #20]
    1f88:	e002      	b.n	1f90 <light_open+0x8c>
    }
    else
    {
        ercd = E_ILUSE;
    1f8a:	f06f 0304 	mvn.w	r3, #4
    1f8e:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    1f90:	697b      	ldr	r3, [r7, #20]
}
    1f92:	4618      	mov	r0, r3
    1f94:	f107 0718 	add.w	r7, r7, #24
    1f98:	46bd      	mov	sp, r7
    1f9a:	bd80      	pop	{r7, pc}
    1f9c:	1fff8644 	.word	0x1fff8644

00001fa0 <motor_init>:

/**
 *    @brief   motor初始化
 */
void motor_init(void)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b082      	sub	sp, #8
    1fa4:	af00      	add	r7, sp, #0
    uint_t i;
    MTCB *p_mtcb;

    for (p_mtcb = mtcb_table, i = 0; i < MOTOR_NUM; p_mtcb++, i++)
    1fa6:	4b28      	ldr	r3, [pc, #160]	; (2048 <motor_init+0xa8>)
    1fa8:	603b      	str	r3, [r7, #0]
    1faa:	f04f 0300 	mov.w	r3, #0
    1fae:	607b      	str	r3, [r7, #4]
    1fb0:	e01f      	b.n	1ff2 <motor_init+0x52>
    {
        p_mtcb->type = MOTOR_DC;
    1fb2:	683b      	ldr	r3, [r7, #0]
    1fb4:	f04f 0200 	mov.w	r2, #0
    1fb8:	711a      	strb	r2, [r3, #4]
        p_mtcb->speed = 0;
    1fba:	683b      	ldr	r3, [r7, #0]
    1fbc:	f04f 0200 	mov.w	r2, #0
    1fc0:	609a      	str	r2, [r3, #8]
        p_mtcb->voltage = 0;
    1fc2:	683b      	ldr	r3, [r7, #0]
    1fc4:	f04f 0200 	mov.w	r2, #0
    1fc8:	60da      	str	r2, [r3, #12]
        p_mtcb->current = 0;
    1fca:	683b      	ldr	r3, [r7, #0]
    1fcc:	f04f 0200 	mov.w	r2, #0
    1fd0:	611a      	str	r2, [r3, #16]
        p_mtcb->openflag = FALSE;
    1fd2:	683b      	ldr	r3, [r7, #0]
    1fd4:	f04f 0200 	mov.w	r2, #0
    1fd8:	615a      	str	r2, [r3, #20]
        p_mtcb->errorflag = E_SYS;
    1fda:	683b      	ldr	r3, [r7, #0]
    1fdc:	f04f 32ff 	mov.w	r2, #4294967295
    1fe0:	619a      	str	r2, [r3, #24]
void motor_init(void)
{
    uint_t i;
    MTCB *p_mtcb;

    for (p_mtcb = mtcb_table, i = 0; i < MOTOR_NUM; p_mtcb++, i++)
    1fe2:	683b      	ldr	r3, [r7, #0]
    1fe4:	f103 031c 	add.w	r3, r3, #28
    1fe8:	603b      	str	r3, [r7, #0]
    1fea:	687b      	ldr	r3, [r7, #4]
    1fec:	f103 0301 	add.w	r3, r3, #1
    1ff0:	607b      	str	r3, [r7, #4]
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	2b01      	cmp	r3, #1
    1ff6:	d9dc      	bls.n	1fb2 <motor_init+0x12>
        p_mtcb->openflag = FALSE;
        p_mtcb->errorflag = E_SYS;
    }
    
    /* 打开电机端口 */
    motor_open_port(MOTOR_LEFT);
    1ff8:	4814      	ldr	r0, [pc, #80]	; (204c <motor_init+0xac>)
    1ffa:	f000 f82b 	bl	2054 <motor_open_port>
    motor_open_port(MOTOR_RIGHT);
    1ffe:	4814      	ldr	r0, [pc, #80]	; (2050 <motor_init+0xb0>)
    2000:	f000 f828 	bl	2054 <motor_open_port>
    
    gpio_init(PORT_NO_GET(MOTOR_LEFT_DIR_PIN), PIN_NO_GET(MOTOR_LEFT_DIR_PIN),
    2004:	f04f 0004 	mov.w	r0, #4
    2008:	f04f 0104 	mov.w	r1, #4
    200c:	f04f 0201 	mov.w	r2, #1
    2010:	f04f 0301 	mov.w	r3, #1
    2014:	f7ff f986 	bl	1324 <gpio_init>
              OUT_PUT, MOTOR_LEFT_FORWARD);
    gpio_init(PORT_NO_GET(MOTOR_RIGHT_DIR_PIN), PIN_NO_GET(MOTOR_RIGHT_DIR_PIN),
    2018:	f04f 0000 	mov.w	r0, #0
    201c:	f04f 0108 	mov.w	r1, #8
    2020:	f04f 0201 	mov.w	r2, #1
    2024:	f04f 0300 	mov.w	r3, #0
    2028:	f7ff f97c 	bl	1324 <gpio_init>
                  OUT_PUT, MOTOR_RIGHT_FORWARD);

    motor_output(MOTOR_LEFT, 0);
    202c:	4807      	ldr	r0, [pc, #28]	; (204c <motor_init+0xac>)
    202e:	f04f 0100 	mov.w	r1, #0
    2032:	f000 f857 	bl	20e4 <motor_output>
    motor_output(MOTOR_RIGHT, 0);
    2036:	4806      	ldr	r0, [pc, #24]	; (2050 <motor_init+0xb0>)
    2038:	f04f 0100 	mov.w	r1, #0
    203c:	f000 f852 	bl	20e4 <motor_output>
}
    2040:	f107 0708 	add.w	r7, r7, #8
    2044:	46bd      	mov	sp, r7
    2046:	bd80      	pop	{r7, pc}
    2048:	1fff86a4 	.word	0x1fff86a4
    204c:	31020000 	.word	0x31020000
    2050:	31010001 	.word	0x31010001

00002054 <motor_open_port>:
 *    @param   motorid  电机的ID号
 *
 *    @return  ercd 错误码
 */
static ER motor_open_port(ID motorid)
{
    2054:	b580      	push	{r7, lr}
    2056:	b086      	sub	sp, #24
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    MTCB *p_mtcb;
    ER ercd;
    ID motor_no;

    motor_no = MOTOR_NO_GET(motorid);
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2062:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2066:	613b      	str	r3, [r7, #16]

    if (!(0 <= motor_no && motor_no < MOTOR_NUM))
    2068:	693b      	ldr	r3, [r7, #16]
    206a:	2b00      	cmp	r3, #0
    206c:	db02      	blt.n	2074 <motor_open_port+0x20>
    206e:	693b      	ldr	r3, [r7, #16]
    2070:	2b01      	cmp	r3, #1
    2072:	dd02      	ble.n	207a <motor_open_port+0x26>
    {
        return (E_ID); /* ID号错误 */
    2074:	f06f 0303 	mvn.w	r3, #3
    2078:	e02d      	b.n	20d6 <motor_open_port+0x82>
    }
    p_mtcb = get_mtcb(motor_no);
    207a:	693a      	ldr	r2, [r7, #16]
    207c:	4613      	mov	r3, r2
    207e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2082:	1a9b      	subs	r3, r3, r2
    2084:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2088:	461a      	mov	r2, r3
    208a:	4b15      	ldr	r3, [pc, #84]	; (20e0 <motor_open_port+0x8c>)
    208c:	18d3      	adds	r3, r2, r3
    208e:	60fb      	str	r3, [r7, #12]

    if (p_mtcb->openflag)
    2090:	68fb      	ldr	r3, [r7, #12]
    2092:	695b      	ldr	r3, [r3, #20]
    2094:	2b00      	cmp	r3, #0
    2096:	d003      	beq.n	20a0 <motor_open_port+0x4c>
    { /* 检查是否已经打开 */
        ercd = E_OBJ;
    2098:	f06f 0309 	mvn.w	r3, #9
    209c:	617b      	str	r3, [r7, #20]
    209e:	e019      	b.n	20d4 <motor_open_port+0x80>
    else
    {
        /**
         *  硬件初始化
         */
        ftm_pwm_init(MOTOR_MOD_GET(motorid), MOTOR_CH_GET(motorid));
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    20a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    20aa:	ea4f 1313 	mov.w	r3, r3, lsr #4
    20ae:	461a      	mov	r2, r3
    20b0:	687b      	ldr	r3, [r7, #4]
    20b2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    20b6:	f003 030f 	and.w	r3, r3, #15
    20ba:	f103 33ff 	add.w	r3, r3, #4294967295
    20be:	4610      	mov	r0, r2
    20c0:	4619      	mov	r1, r3
    20c2:	f7ff fb15 	bl	16f0 <ftm_pwm_init>

        p_mtcb->openflag = TRUE;
    20c6:	68fb      	ldr	r3, [r7, #12]
    20c8:	f04f 0201 	mov.w	r2, #1
    20cc:	615a      	str	r2, [r3, #20]

        ercd = E_OK;
    20ce:	f04f 0300 	mov.w	r3, #0
    20d2:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    20d4:	697b      	ldr	r3, [r7, #20]
}
    20d6:	4618      	mov	r0, r3
    20d8:	f107 0718 	add.w	r7, r7, #24
    20dc:	46bd      	mov	sp, r7
    20de:	bd80      	pop	{r7, pc}
    20e0:	1fff86a4 	.word	0x1fff86a4

000020e4 <motor_output>:
 *    @param   motor_duty 电机占空比
 *
 *    @return  ercd 错误码
 */
ER motor_output(ID motorid, int32_t motor_duty)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b086      	sub	sp, #24
    20e8:	af00      	add	r7, sp, #0
    20ea:	6078      	str	r0, [r7, #4]
    20ec:	6039      	str	r1, [r7, #0]
    MTCB *p_mtcb;
    ER ercd = 0;
    20ee:	f04f 0300 	mov.w	r3, #0
    20f2:	617b      	str	r3, [r7, #20]
    ID motor_no;
    int32_t motor_value;

    motor_no = MOTOR_NO_GET(motorid);
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	ea4f 4303 	mov.w	r3, r3, lsl #16
    20fa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    20fe:	613b      	str	r3, [r7, #16]

    if (!(0 <= motor_no && motor_no < MOTOR_NUM))
    2100:	693b      	ldr	r3, [r7, #16]
    2102:	2b00      	cmp	r3, #0
    2104:	db02      	blt.n	210c <motor_output+0x28>
    2106:	693b      	ldr	r3, [r7, #16]
    2108:	2b01      	cmp	r3, #1
    210a:	dd02      	ble.n	2112 <motor_output+0x2e>
    {
        return (E_ID); /* ID号错误 */
    210c:	f06f 0303 	mvn.w	r3, #3
    2110:	e051      	b.n	21b6 <motor_output+0xd2>
    }
    
    /* 占空比范围保护 */
    if(motor_duty > MOTOR_MAX_VAL)
    2112:	683b      	ldr	r3, [r7, #0]
    2114:	2b64      	cmp	r3, #100	; 0x64
    2116:	dd03      	ble.n	2120 <motor_output+0x3c>
    {
        motor_duty = MOTOR_MAX_VAL;
    2118:	f04f 0364 	mov.w	r3, #100	; 0x64
    211c:	603b      	str	r3, [r7, #0]
    211e:	e006      	b.n	212e <motor_output+0x4a>
    }
    else if (motor_duty < MOTOR_MIN_VAL)
    2120:	683b      	ldr	r3, [r7, #0]
    2122:	f113 0f64 	cmn.w	r3, #100	; 0x64
    2126:	da02      	bge.n	212e <motor_output+0x4a>
    {
        motor_duty = MOTOR_MIN_VAL;
    2128:	f06f 0363 	mvn.w	r3, #99	; 0x63
    212c:	603b      	str	r3, [r7, #0]
    }
    
    p_mtcb = get_mtcb(motor_no);
    212e:	693a      	ldr	r2, [r7, #16]
    2130:	4613      	mov	r3, r2
    2132:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2136:	1a9b      	subs	r3, r3, r2
    2138:	ea4f 0383 	mov.w	r3, r3, lsl #2
    213c:	461a      	mov	r2, r3
    213e:	4b20      	ldr	r3, [pc, #128]	; (21c0 <motor_output+0xdc>)
    2140:	18d3      	adds	r3, r2, r3
    2142:	60fb      	str	r3, [r7, #12]

    if (p_mtcb->openflag)
    2144:	68fb      	ldr	r3, [r7, #12]
    2146:	695b      	ldr	r3, [r3, #20]
    2148:	2b00      	cmp	r3, #0
    214a:	d030      	beq.n	21ae <motor_output+0xca>
    { /* 检查是否已经打开 */
        
        /* for "H" Bridge Drive,there is an "IO" Port to Control Motor Direction */
        if (motor_duty >= 0)
    214c:	683b      	ldr	r3, [r7, #0]
    214e:	2b00      	cmp	r3, #0
    2150:	db03      	blt.n	215a <motor_output+0x76>
        {
            /*  If PWM is Positive Number,Motor Running Forward. */
            motor_output_dir_fw(motorid);
    2152:	6878      	ldr	r0, [r7, #4]
    2154:	f000 f836 	bl	21c4 <motor_output_dir_fw>
    2158:	e006      	b.n	2168 <motor_output+0x84>
            //motor_duty = 100 - motor_duty;     /* 电磁组电机默认高点平，需要取反 */
        }
        else
        {
            /*  Else,Motor Running Backward.*/
            motor_output_dir_bw(motorid);
    215a:	6878      	ldr	r0, [r7, #4]
    215c:	f000 f852 	bl	2204 <motor_output_dir_bw>
            motor_duty = -motor_duty;
    2160:	683b      	ldr	r3, [r7, #0]
    2162:	f1c3 0300 	rsb	r3, r3, #0
    2166:	603b      	str	r3, [r7, #0]
            //motor_duty = 100 + motor_duty;  /* 电磁组电机默认高点平，需要取反 */
        }
        motor_value = motor_duty * MOTOR_PWM_PRESCALE;
    2168:	683a      	ldr	r2, [r7, #0]
    216a:	4613      	mov	r3, r2
    216c:	ea4f 1343 	mov.w	r3, r3, lsl #5
    2170:	1a9b      	subs	r3, r3, r2
    2172:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2176:	189b      	adds	r3, r3, r2
    2178:	60bb      	str	r3, [r7, #8]
        ftm_pwm_output(MOTOR_MOD_GET(motorid), MOTOR_CH_GET(motorid), motor_value);
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2184:	ea4f 1313 	mov.w	r3, r3, lsr #4
    2188:	4619      	mov	r1, r3
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2190:	f003 030f 	and.w	r3, r3, #15
    2194:	f103 33ff 	add.w	r3, r3, #4294967295
    2198:	461a      	mov	r2, r3
    219a:	68bb      	ldr	r3, [r7, #8]
    219c:	4608      	mov	r0, r1
    219e:	4611      	mov	r1, r2
    21a0:	461a      	mov	r2, r3
    21a2:	f7ff fb65 	bl	1870 <ftm_pwm_output>
    
        ercd = E_OK;
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	617b      	str	r3, [r7, #20]
    21ac:	e002      	b.n	21b4 <motor_output+0xd0>
    }
    else
    {
        ercd = E_ILUSE;
    21ae:	f06f 0304 	mvn.w	r3, #4
    21b2:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    21b4:	697b      	ldr	r3, [r7, #20]
}
    21b6:	4618      	mov	r0, r3
    21b8:	f107 0718 	add.w	r7, r7, #24
    21bc:	46bd      	mov	sp, r7
    21be:	bd80      	pop	{r7, pc}
    21c0:	1fff86a4 	.word	0x1fff86a4

000021c4 <motor_output_dir_fw>:
 *    @brief   motor前进方向设置
 *
 *    @param   motorid    电机的ID号
 */
void motor_output_dir_fw(ID motorid)
{
    21c4:	b580      	push	{r7, lr}
    21c6:	b082      	sub	sp, #8
    21c8:	af00      	add	r7, sp, #0
    21ca:	6078      	str	r0, [r7, #4]
	if(motorid == MOTOR_LEFT)
    21cc:	687a      	ldr	r2, [r7, #4]
    21ce:	4b0c      	ldr	r3, [pc, #48]	; (2200 <motor_output_dir_fw+0x3c>)
    21d0:	429a      	cmp	r2, r3
    21d2:	d108      	bne.n	21e6 <motor_output_dir_fw+0x22>
	{
		gpio_set(PORT_NO_GET(MOTOR_LEFT_DIR_PIN), PIN_NO_GET(MOTOR_LEFT_DIR_PIN),
    21d4:	f04f 0004 	mov.w	r0, #4
    21d8:	f04f 0104 	mov.w	r1, #4
    21dc:	f04f 0201 	mov.w	r2, #1
    21e0:	f7ff f8f6 	bl	13d0 <gpio_set>
    21e4:	e007      	b.n	21f6 <motor_output_dir_fw+0x32>
                 MOTOR_LEFT_FORWARD);
	}
	else
	{
		gpio_set(PORT_NO_GET(MOTOR_RIGHT_DIR_PIN), PIN_NO_GET(MOTOR_RIGHT_DIR_PIN),
    21e6:	f04f 0000 	mov.w	r0, #0
    21ea:	f04f 0108 	mov.w	r1, #8
    21ee:	f04f 0200 	mov.w	r2, #0
    21f2:	f7ff f8ed 	bl	13d0 <gpio_set>
                 MOTOR_RIGHT_FORWARD);
	}
}
    21f6:	f107 0708 	add.w	r7, r7, #8
    21fa:	46bd      	mov	sp, r7
    21fc:	bd80      	pop	{r7, pc}
    21fe:	bf00      	nop
    2200:	31020000 	.word	0x31020000

00002204 <motor_output_dir_bw>:
 *    @brief   motor后退方向设置
 *
 *    @param   motorid    电机的ID号
 */
void motor_output_dir_bw(ID motorid)
{
    2204:	b580      	push	{r7, lr}
    2206:	b082      	sub	sp, #8
    2208:	af00      	add	r7, sp, #0
    220a:	6078      	str	r0, [r7, #4]
	if(motorid == MOTOR_LEFT)
    220c:	687a      	ldr	r2, [r7, #4]
    220e:	4b0c      	ldr	r3, [pc, #48]	; (2240 <motor_output_dir_bw+0x3c>)
    2210:	429a      	cmp	r2, r3
    2212:	d108      	bne.n	2226 <motor_output_dir_bw+0x22>
	{
	    gpio_set(PORT_NO_GET(MOTOR_LEFT_DIR_PIN), PIN_NO_GET(MOTOR_LEFT_DIR_PIN),
    2214:	f04f 0004 	mov.w	r0, #4
    2218:	f04f 0104 	mov.w	r1, #4
    221c:	f04f 0200 	mov.w	r2, #0
    2220:	f7ff f8d6 	bl	13d0 <gpio_set>
    2224:	e007      	b.n	2236 <motor_output_dir_bw+0x32>
	            MOTOR_LEFT_BACKWARD);
	}
	else
	{
		gpio_set(PORT_NO_GET(MOTOR_RIGHT_DIR_PIN), PIN_NO_GET(MOTOR_RIGHT_DIR_PIN),
    2226:	f04f 0000 	mov.w	r0, #0
    222a:	f04f 0108 	mov.w	r1, #8
    222e:	f04f 0201 	mov.w	r2, #1
    2232:	f7ff f8cd 	bl	13d0 <gpio_set>
                 MOTOR_RIGHT_BACKWARD);
	}
}
    2236:	f107 0708 	add.w	r7, r7, #8
    223a:	46bd      	mov	sp, r7
    223c:	bd80      	pop	{r7, pc}
    223e:	bf00      	nop
    2240:	31020000 	.word	0x31020000

00002244 <steer_init>:

/**
 *    @brief   steer初始化
 */
void steer_init(void)
{
    2244:	b580      	push	{r7, lr}
    2246:	b082      	sub	sp, #8
    2248:	af00      	add	r7, sp, #0
    uint_t i;
    STCB *p_stcb;

    for (p_stcb = stcb_table, i = 0; i < STEER_NUM; p_stcb++, i++)
    224a:	4b30      	ldr	r3, [pc, #192]	; (230c <steer_init+0xc8>)
    224c:	603b      	str	r3, [r7, #0]
    224e:	f04f 0300 	mov.w	r3, #0
    2252:	607b      	str	r3, [r7, #4]
    2254:	e04b      	b.n	22ee <steer_init+0xaa>
    {
        if(i==0)
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	2b00      	cmp	r3, #0
    225a:	d120      	bne.n	229e <steer_init+0x5a>
        {
            p_stcb->type  = STEER_ANALOG;
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	f04f 0280 	mov.w	r2, #128	; 0x80
    2262:	711a      	strb	r2, [r3, #4]
            p_stcb->angle = 0;          
    2264:	683b      	ldr	r3, [r7, #0]
    2266:	f04f 0200 	mov.w	r2, #0
    226a:	80da      	strh	r2, [r3, #6]
            p_stcb->value = 0;                
    226c:	683b      	ldr	r3, [r7, #0]
    226e:	f04f 0200 	mov.w	r2, #0
    2272:	609a      	str	r2, [r3, #8]
            p_stcb->value_vary = 0;    
    2274:	683b      	ldr	r3, [r7, #0]
    2276:	f04f 0200 	mov.w	r2, #0
    227a:	60da      	str	r2, [r3, #12]
            p_stcb->voltage    = 0;       
    227c:	683b      	ldr	r3, [r7, #0]
    227e:	f04f 0200 	mov.w	r2, #0
    2282:	611a      	str	r2, [r3, #16]
            p_stcb->func       = STEER_DIR_FUNC;         
    2284:	683b      	ldr	r3, [r7, #0]
    2286:	f04f 0200 	mov.w	r2, #0
    228a:	751a      	strb	r2, [r3, #20]
            p_stcb->openflag   = FALSE;
    228c:	683b      	ldr	r3, [r7, #0]
    228e:	f04f 0200 	mov.w	r2, #0
    2292:	619a      	str	r2, [r3, #24]
            p_stcb->errorflag  = E_SYS;
    2294:	683b      	ldr	r3, [r7, #0]
    2296:	f04f 32ff 	mov.w	r2, #4294967295
    229a:	61da      	str	r2, [r3, #28]
    229c:	e01f      	b.n	22de <steer_init+0x9a>
        }
        else
        {
            p_stcb->type  = STEER_ANALOG;
    229e:	683b      	ldr	r3, [r7, #0]
    22a0:	f04f 0280 	mov.w	r2, #128	; 0x80
    22a4:	711a      	strb	r2, [r3, #4]
            p_stcb->angle = 0;          
    22a6:	683b      	ldr	r3, [r7, #0]
    22a8:	f04f 0200 	mov.w	r2, #0
    22ac:	80da      	strh	r2, [r3, #6]
            p_stcb->value = 0;                
    22ae:	683b      	ldr	r3, [r7, #0]
    22b0:	f04f 0200 	mov.w	r2, #0
    22b4:	609a      	str	r2, [r3, #8]
            p_stcb->value_vary = 0;    
    22b6:	683b      	ldr	r3, [r7, #0]
    22b8:	f04f 0200 	mov.w	r2, #0
    22bc:	60da      	str	r2, [r3, #12]
            p_stcb->voltage    = 0;       
    22be:	683b      	ldr	r3, [r7, #0]
    22c0:	f04f 0200 	mov.w	r2, #0
    22c4:	611a      	str	r2, [r3, #16]
            p_stcb->func       = STEER_SERVO_FUNC;         
    22c6:	683b      	ldr	r3, [r7, #0]
    22c8:	f04f 0201 	mov.w	r2, #1
    22cc:	751a      	strb	r2, [r3, #20]
            p_stcb->openflag   = FALSE;
    22ce:	683b      	ldr	r3, [r7, #0]
    22d0:	f04f 0200 	mov.w	r2, #0
    22d4:	619a      	str	r2, [r3, #24]
            p_stcb->errorflag  = E_SYS;
    22d6:	683b      	ldr	r3, [r7, #0]
    22d8:	f04f 32ff 	mov.w	r2, #4294967295
    22dc:	61da      	str	r2, [r3, #28]
void steer_init(void)
{
    uint_t i;
    STCB *p_stcb;

    for (p_stcb = stcb_table, i = 0; i < STEER_NUM; p_stcb++, i++)
    22de:	683b      	ldr	r3, [r7, #0]
    22e0:	f103 0320 	add.w	r3, r3, #32
    22e4:	603b      	str	r3, [r7, #0]
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	f103 0301 	add.w	r3, r3, #1
    22ec:	607b      	str	r3, [r7, #4]
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	2b01      	cmp	r3, #1
    22f2:	d9b0      	bls.n	2256 <steer_init+0x12>
            
        }
    }
    
    /* 打开端口 */
    steer_open_port(STEER_DIR);
    22f4:	4806      	ldr	r0, [pc, #24]	; (2310 <steer_init+0xcc>)
    22f6:	f000 f80d 	bl	2314 <steer_open_port>
    steer_output_angle(STEER_DIR, 0);
    22fa:	4805      	ldr	r0, [pc, #20]	; (2310 <steer_init+0xcc>)
    22fc:	f04f 0100 	mov.w	r1, #0
    2300:	f000 f84c 	bl	239c <steer_output_angle>
}
    2304:	f107 0708 	add.w	r7, r7, #8
    2308:	46bd      	mov	sp, r7
    230a:	bd80      	pop	{r7, pc}
    230c:	1fff86dc 	.word	0x1fff86dc
    2310:	31010000 	.word	0x31010000

00002314 <steer_open_port>:
 *    @param   steerid  舵机的ID号
 *
 *    @return  ercd 错误码
 */
static ER steer_open_port(ID steerid)
{
    2314:	b580      	push	{r7, lr}
    2316:	b086      	sub	sp, #24
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    STCB *p_stcb;
    ER ercd;
    ID steer_no;

    steer_no = STEER_NO_GET(steerid);
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2322:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2326:	613b      	str	r3, [r7, #16]

    if (!((0 <= steer_no) && (steer_no < STEER_NUM)))
    2328:	693b      	ldr	r3, [r7, #16]
    232a:	2b00      	cmp	r3, #0
    232c:	db02      	blt.n	2334 <steer_open_port+0x20>
    232e:	693b      	ldr	r3, [r7, #16]
    2330:	2b01      	cmp	r3, #1
    2332:	dd02      	ble.n	233a <steer_open_port+0x26>
    {
        return (E_ID); /* ID号错误 */
    2334:	f06f 0303 	mvn.w	r3, #3
    2338:	e028      	b.n	238c <steer_open_port+0x78>
    }
    p_stcb = get_stcb(steer_no);
    233a:	693b      	ldr	r3, [r7, #16]
    233c:	ea4f 1243 	mov.w	r2, r3, lsl #5
    2340:	4b15      	ldr	r3, [pc, #84]	; (2398 <steer_open_port+0x84>)
    2342:	18d3      	adds	r3, r2, r3
    2344:	60fb      	str	r3, [r7, #12]

    if (p_stcb->openflag)
    2346:	68fb      	ldr	r3, [r7, #12]
    2348:	699b      	ldr	r3, [r3, #24]
    234a:	2b00      	cmp	r3, #0
    234c:	d003      	beq.n	2356 <steer_open_port+0x42>
    { /* 检查是否已经打开 */
        ercd = E_OBJ;
    234e:	f06f 0309 	mvn.w	r3, #9
    2352:	617b      	str	r3, [r7, #20]
    2354:	e019      	b.n	238a <steer_open_port+0x76>
    else
    {
        /**
         *  硬件初始化
         */
        ftm_pwm_init(STEER_MOD_GET(steerid), STEER_CH_GET(steerid));
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	ea4f 4313 	mov.w	r3, r3, lsr #16
    235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2360:	ea4f 1313 	mov.w	r3, r3, lsr #4
    2364:	461a      	mov	r2, r3
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	ea4f 4313 	mov.w	r3, r3, lsr #16
    236c:	f003 030f 	and.w	r3, r3, #15
    2370:	f103 33ff 	add.w	r3, r3, #4294967295
    2374:	4610      	mov	r0, r2
    2376:	4619      	mov	r1, r3
    2378:	f7ff f9ba 	bl	16f0 <ftm_pwm_init>

        p_stcb->openflag = TRUE;
    237c:	68fb      	ldr	r3, [r7, #12]
    237e:	f04f 0201 	mov.w	r2, #1
    2382:	619a      	str	r2, [r3, #24]

        ercd = E_OK;
    2384:	f04f 0300 	mov.w	r3, #0
    2388:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    238a:	697b      	ldr	r3, [r7, #20]
}
    238c:	4618      	mov	r0, r3
    238e:	f107 0718 	add.w	r7, r7, #24
    2392:	46bd      	mov	sp, r7
    2394:	bd80      	pop	{r7, pc}
    2396:	bf00      	nop
    2398:	1fff86dc 	.word	0x1fff86dc

0000239c <steer_output_angle>:
 *    @param   steer_angle 舵机占空比
 *
 *    @return  ercd 错误码
 */
ER steer_output_angle(ID steerid, int16_t steer_angle)
{
    239c:	b580      	push	{r7, lr}
    239e:	b086      	sub	sp, #24
    23a0:	af00      	add	r7, sp, #0
    23a2:	6078      	str	r0, [r7, #4]
    23a4:	460b      	mov	r3, r1
    23a6:	807b      	strh	r3, [r7, #2]
    STCB *p_stcb;
    ER ercd;
    ID steer_no;
    int32_t steer_value;

    steer_no = STEER_NO_GET(steerid);
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    23ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    23b2:	60fb      	str	r3, [r7, #12]

    if (!((0 <= steer_no) && (steer_no < STEER_NUM)))
    23b4:	68fb      	ldr	r3, [r7, #12]
    23b6:	2b00      	cmp	r3, #0
    23b8:	db02      	blt.n	23c0 <steer_output_angle+0x24>
    23ba:	68fb      	ldr	r3, [r7, #12]
    23bc:	2b01      	cmp	r3, #1
    23be:	dd02      	ble.n	23c6 <steer_output_angle+0x2a>
    {
        return (E_ID); /* ID号错误 */
    23c0:	f06f 0303 	mvn.w	r3, #3
    23c4:	e083      	b.n	24ce <steer_output_angle+0x132>
    }
       
    p_stcb = get_stcb(steer_no);
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	ea4f 1243 	mov.w	r2, r3, lsl #5
    23cc:	4b42      	ldr	r3, [pc, #264]	; (24d8 <steer_output_angle+0x13c>)
    23ce:	18d3      	adds	r3, r2, r3
    23d0:	60bb      	str	r3, [r7, #8]

    if (p_stcb->openflag)
    23d2:	68bb      	ldr	r3, [r7, #8]
    23d4:	699b      	ldr	r3, [r3, #24]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d075      	beq.n	24c6 <steer_output_angle+0x12a>
    { /* 检查是否已经打开 */
        if(p_stcb->func == STEER_DIR_FUNC)
    23da:	68bb      	ldr	r3, [r7, #8]
    23dc:	7d1b      	ldrb	r3, [r3, #20]
    23de:	2b00      	cmp	r3, #0
    23e0:	d12b      	bne.n	243a <steer_output_angle+0x9e>
        {
            /* 占空比范围保护 */
            if(steer_angle > STEER_DIR_MAX_ANGLE)
    23e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    23e6:	2b28      	cmp	r3, #40	; 0x28
    23e8:	dd03      	ble.n	23f2 <steer_output_angle+0x56>
            {
                steer_angle = STEER_DIR_MAX_ANGLE;
    23ea:	f04f 0328 	mov.w	r3, #40	; 0x28
    23ee:	807b      	strh	r3, [r7, #2]
    23f0:	e007      	b.n	2402 <steer_output_angle+0x66>
            }
            else if (steer_angle < STEER_DIR_MIN_ANGLE)
    23f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    23f6:	f113 0f28 	cmn.w	r3, #40	; 0x28
    23fa:	da02      	bge.n	2402 <steer_output_angle+0x66>
            {
                steer_angle = STEER_DIR_MIN_ANGLE;
    23fc:	f64f 73d8 	movw	r3, #65496	; 0xffd8
    2400:	807b      	strh	r3, [r7, #2]
            }
            
            if (steer_angle < 0)
    2402:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    2406:	2b00      	cmp	r3, #0
    2408:	da0b      	bge.n	2422 <steer_output_angle+0x86>
            {
                steer_value = (STEER_DIR_CENTER - steer_angle * LEFT_STEER_DIR_PRES);
    240a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    240e:	f06f 0239 	mvn.w	r2, #57	; 0x39
    2412:	fb02 f303 	mul.w	r3, r2, r3
    2416:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    241a:	f103 030c 	add.w	r3, r3, #12
    241e:	613b      	str	r3, [r7, #16]
    2420:	e03a      	b.n	2498 <steer_output_angle+0xfc>
            }
            else
            {
                steer_value = (STEER_DIR_CENTER - steer_angle * RIGHT_STEER_DIR_PRES);
    2422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    2426:	f06f 0239 	mvn.w	r2, #57	; 0x39
    242a:	fb02 f303 	mul.w	r3, r2, r3
    242e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    2432:	f103 030c 	add.w	r3, r3, #12
    2436:	613b      	str	r3, [r7, #16]
    2438:	e02e      	b.n	2498 <steer_output_angle+0xfc>
            }
        }
        else
        {
            /* 占空比范围保护 */
            if(steer_angle > STEER_SERVO_MAX_ANGLE)
    243a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    243e:	2b2d      	cmp	r3, #45	; 0x2d
    2440:	dd03      	ble.n	244a <steer_output_angle+0xae>
            {
                steer_angle = STEER_SERVO_MAX_ANGLE;
    2442:	f04f 032d 	mov.w	r3, #45	; 0x2d
    2446:	807b      	strh	r3, [r7, #2]
    2448:	e007      	b.n	245a <steer_output_angle+0xbe>
            }
            else if (steer_angle < STEER_SERVO_MIN_ANGLE)
    244a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    244e:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
    2452:	da02      	bge.n	245a <steer_output_angle+0xbe>
            {
                steer_angle = STEER_SERVO_MIN_ANGLE;
    2454:	f64f 73d3 	movw	r3, #65491	; 0xffd3
    2458:	807b      	strh	r3, [r7, #2]
            }
            
            if (steer_angle < 0)
    245a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    245e:	2b00      	cmp	r3, #0
    2460:	da0d      	bge.n	247e <steer_output_angle+0xe2>
            {
                steer_value = (STEER_SERVO_CENTER + steer_angle * LEFT_STEER_SERVO_PRES);
    2462:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    2466:	4613      	mov	r3, r2
    2468:	ea4f 1303 	mov.w	r3, r3, lsl #4
    246c:	1a9b      	subs	r3, r3, r2
    246e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2472:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
    2476:	f103 031f 	add.w	r3, r3, #31
    247a:	613b      	str	r3, [r7, #16]
    247c:	e00c      	b.n	2498 <steer_output_angle+0xfc>
            }
            else
            {
                steer_value = (STEER_SERVO_CENTER + steer_angle * RIGHT_STEER_SERVO_PRES);
    247e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    2482:	4613      	mov	r3, r2
    2484:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2488:	1a9b      	subs	r3, r3, r2
    248a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    248e:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
    2492:	f103 031f 	add.w	r3, r3, #31
    2496:	613b      	str	r3, [r7, #16]
            }
        }
        
        /* 舵机输出 */
        ftm_pwm_output(STEER_MOD_GET(steerid), STEER_CH_GET(steerid), steer_value);
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    249e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    24a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
    24a6:	4619      	mov	r1, r3
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    24ae:	f003 030f 	and.w	r3, r3, #15
    24b2:	f103 33ff 	add.w	r3, r3, #4294967295
    24b6:	461a      	mov	r2, r3
    24b8:	693b      	ldr	r3, [r7, #16]
    24ba:	4608      	mov	r0, r1
    24bc:	4611      	mov	r1, r2
    24be:	461a      	mov	r2, r3
    24c0:	f7ff f9d6 	bl	1870 <ftm_pwm_output>
    24c4:	e002      	b.n	24cc <steer_output_angle+0x130>
    }
    else
    {
        ercd = E_ILUSE;
    24c6:	f06f 0304 	mvn.w	r3, #4
    24ca:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    24cc:	697b      	ldr	r3, [r7, #20]
}
    24ce:	4618      	mov	r0, r3
    24d0:	f107 0718 	add.w	r7, r7, #24
    24d4:	46bd      	mov	sp, r7
    24d6:	bd80      	pop	{r7, pc}
    24d8:	1fff86dc 	.word	0x1fff86dc

000024dc <switch_init>:

/**
 *    @brief   开关初始化
 */
void switch_init(void)
{
    24dc:	b580      	push	{r7, lr}
    24de:	b084      	sub	sp, #16
    24e0:	af00      	add	r7, sp, #0
    uint_t i;
    SWCB *p_swcb;
    SWGP *p_swgp;

    for (p_swcb = swcb_table, i = 0; i < SWITCH_NUM; p_swcb++, i++)
    24e2:	4b29      	ldr	r3, [pc, #164]	; (2588 <switch_init+0xac>)
    24e4:	60bb      	str	r3, [r7, #8]
    24e6:	f04f 0300 	mov.w	r3, #0
    24ea:	60fb      	str	r3, [r7, #12]
    24ec:	e00f      	b.n	250e <switch_init+0x32>
    {
        p_swcb->openflag  = FALSE;
    24ee:	68bb      	ldr	r3, [r7, #8]
    24f0:	f04f 0200 	mov.w	r2, #0
    24f4:	601a      	str	r2, [r3, #0]
        p_swcb->errorflag = E_SYS;
    24f6:	68bb      	ldr	r3, [r7, #8]
    24f8:	f04f 32ff 	mov.w	r2, #4294967295
    24fc:	605a      	str	r2, [r3, #4]
{
    uint_t i;
    SWCB *p_swcb;
    SWGP *p_swgp;

    for (p_swcb = swcb_table, i = 0; i < SWITCH_NUM; p_swcb++, i++)
    24fe:	68bb      	ldr	r3, [r7, #8]
    2500:	f103 0308 	add.w	r3, r3, #8
    2504:	60bb      	str	r3, [r7, #8]
    2506:	68fb      	ldr	r3, [r7, #12]
    2508:	f103 0301 	add.w	r3, r3, #1
    250c:	60fb      	str	r3, [r7, #12]
    250e:	68fb      	ldr	r3, [r7, #12]
    2510:	2b09      	cmp	r3, #9
    2512:	d9ec      	bls.n	24ee <switch_init+0x12>
    {
        p_swcb->openflag  = FALSE;
        p_swcb->errorflag = E_SYS;
    }
    for (p_swgp = swgp_table, i = 0; i < SWITCH_GROUP_NUM; p_swgp++, i++)
    2514:	4b1d      	ldr	r3, [pc, #116]	; (258c <switch_init+0xb0>)
    2516:	607b      	str	r3, [r7, #4]
    2518:	f04f 0300 	mov.w	r3, #0
    251c:	60fb      	str	r3, [r7, #12]
    251e:	e01f      	b.n	2560 <switch_init+0x84>
    {
        p_swgp->switch0 = SWITCH0;
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	4a1b      	ldr	r2, [pc, #108]	; (2590 <switch_init+0xb4>)
    2524:	601a      	str	r2, [r3, #0]
        p_swgp->switch1 = SWITCH1;
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	4a1a      	ldr	r2, [pc, #104]	; (2594 <switch_init+0xb8>)
    252a:	605a      	str	r2, [r3, #4]
        p_swgp->switch2 = SWITCH2;
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	4a1a      	ldr	r2, [pc, #104]	; (2598 <switch_init+0xbc>)
    2530:	609a      	str	r2, [r3, #8]
        p_swgp->switch3 = SWITCH3;
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	4a19      	ldr	r2, [pc, #100]	; (259c <switch_init+0xc0>)
    2536:	60da      	str	r2, [r3, #12]
        p_swgp->switch4 = SWITCH0;
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	4a15      	ldr	r2, [pc, #84]	; (2590 <switch_init+0xb4>)
    253c:	611a      	str	r2, [r3, #16]
        p_swgp->switch5 = SWITCH1;
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	4a14      	ldr	r2, [pc, #80]	; (2594 <switch_init+0xb8>)
    2542:	615a      	str	r2, [r3, #20]
        p_swgp->switch6 = SWITCH2;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	4a14      	ldr	r2, [pc, #80]	; (2598 <switch_init+0xbc>)
    2548:	619a      	str	r2, [r3, #24]
        p_swgp->switch7 = SWITCH3;
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	4a13      	ldr	r2, [pc, #76]	; (259c <switch_init+0xc0>)
    254e:	61da      	str	r2, [r3, #28]
    for (p_swcb = swcb_table, i = 0; i < SWITCH_NUM; p_swcb++, i++)
    {
        p_swcb->openflag  = FALSE;
        p_swcb->errorflag = E_SYS;
    }
    for (p_swgp = swgp_table, i = 0; i < SWITCH_GROUP_NUM; p_swgp++, i++)
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	f103 0320 	add.w	r3, r3, #32
    2556:	607b      	str	r3, [r7, #4]
    2558:	68fb      	ldr	r3, [r7, #12]
    255a:	f103 0301 	add.w	r3, r3, #1
    255e:	60fb      	str	r3, [r7, #12]
    2560:	68fb      	ldr	r3, [r7, #12]
    2562:	2b00      	cmp	r3, #0
    2564:	d0dc      	beq.n	2520 <switch_init+0x44>
        p_swgp->switch5 = SWITCH1;
        p_swgp->switch6 = SWITCH2;
        p_swgp->switch7 = SWITCH3;
    }
    
    switch_open_port(SWITCH0);
    2566:	480a      	ldr	r0, [pc, #40]	; (2590 <switch_init+0xb4>)
    2568:	f000 f81a 	bl	25a0 <switch_open_port>
    switch_open_port(SWITCH1);
    256c:	4809      	ldr	r0, [pc, #36]	; (2594 <switch_init+0xb8>)
    256e:	f000 f817 	bl	25a0 <switch_open_port>
    switch_open_port(SWITCH2);
    2572:	4809      	ldr	r0, [pc, #36]	; (2598 <switch_init+0xbc>)
    2574:	f000 f814 	bl	25a0 <switch_open_port>
    switch_open_port(SWITCH3);
    2578:	4808      	ldr	r0, [pc, #32]	; (259c <switch_init+0xc0>)
    257a:	f000 f811 	bl	25a0 <switch_open_port>
}
    257e:	f107 0710 	add.w	r7, r7, #16
    2582:	46bd      	mov	sp, r7
    2584:	bd80      	pop	{r7, pc}
    2586:	bf00      	nop
    2588:	1fff871c 	.word	0x1fff871c
    258c:	1fff8810 	.word	0x1fff8810
    2590:	051d0002 	.word	0x051d0002
    2594:	01070003 	.word	0x01070003
    2598:	01080004 	.word	0x01080004
    259c:	010a0005 	.word	0x010a0005

000025a0 <switch_open_port>:
 *    @param   switchid  开关的ID号
 *
 *    @return  ercd 错误码
 */
static ER switch_open_port(ID switchid)
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b086      	sub	sp, #24
    25a4:	af00      	add	r7, sp, #0
    25a6:	6078      	str	r0, [r7, #4]
    SWCB *p_swcb;
    ER ercd;
    ID switch_no;

    switch_no = SWITCH_NO_GET(switchid);
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    25ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    25b2:	613b      	str	r3, [r7, #16]

    if (!(0 <= switch_no && switch_no < SWITCH_NUM))
    25b4:	693b      	ldr	r3, [r7, #16]
    25b6:	2b00      	cmp	r3, #0
    25b8:	db02      	blt.n	25c0 <switch_open_port+0x20>
    25ba:	693b      	ldr	r3, [r7, #16]
    25bc:	2b09      	cmp	r3, #9
    25be:	dd02      	ble.n	25c6 <switch_open_port+0x26>
    {
        return (E_ID); /* ID号错误 */
    25c0:	f06f 0303 	mvn.w	r3, #3
    25c4:	e02d      	b.n	2622 <switch_open_port+0x82>
    }
    p_swcb = get_swcb(switch_no);
    25c6:	693b      	ldr	r3, [r7, #16]
    25c8:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    25cc:	4b17      	ldr	r3, [pc, #92]	; (262c <switch_open_port+0x8c>)
    25ce:	18d3      	adds	r3, r2, r3
    25d0:	60fb      	str	r3, [r7, #12]

    if (p_swcb->openflag)
    25d2:	68fb      	ldr	r3, [r7, #12]
    25d4:	681b      	ldr	r3, [r3, #0]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d003      	beq.n	25e2 <switch_open_port+0x42>
    { /* 检查是否已经打开 */
        ercd = E_OBJ;
    25da:	f06f 0309 	mvn.w	r3, #9
    25de:	617b      	str	r3, [r7, #20]
    25e0:	e01e      	b.n	2620 <switch_open_port+0x80>
    else
    {
        /**
         *  硬件初始化
         */
        gpio_init(SWITCH_PORT_GET(switchid), SWITCH_PIN_GET(switchid), IN_PUT, 0);
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	ea4f 4323 	mov.w	r3, r3, asr #16
    25e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    25ec:	ea4f 2323 	mov.w	r3, r3, asr #8
    25f0:	f103 32ff 	add.w	r2, r3, #4294967295
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	ea4f 4323 	mov.w	r3, r3, asr #16
    25fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    25fe:	f103 33ff 	add.w	r3, r3, #4294967295
    2602:	4610      	mov	r0, r2
    2604:	4619      	mov	r1, r3
    2606:	f04f 0200 	mov.w	r2, #0
    260a:	f04f 0300 	mov.w	r3, #0
    260e:	f7fe fe89 	bl	1324 <gpio_init>

        p_swcb->openflag = TRUE;
    2612:	68fb      	ldr	r3, [r7, #12]
    2614:	f04f 0201 	mov.w	r2, #1
    2618:	601a      	str	r2, [r3, #0]

        ercd = E_OK;
    261a:	f04f 0300 	mov.w	r3, #0
    261e:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    2620:	697b      	ldr	r3, [r7, #20]
}
    2622:	4618      	mov	r0, r3
    2624:	f107 0718 	add.w	r7, r7, #24
    2628:	46bd      	mov	sp, r7
    262a:	bd80      	pop	{r7, pc}
    262c:	1fff871c 	.word	0x1fff871c

00002630 <decoder_init>:

/**
 *    @brief   编码器初始化
 */
void decoder_init(intptr_t exinf)
{
    2630:	b580      	push	{r7, lr}
    2632:	b084      	sub	sp, #16
    2634:	af00      	add	r7, sp, #0
    2636:	6078      	str	r0, [r7, #4]
    uint_t i;
    DECB *p_decb;

    for (p_decb = decb_table, i = 0; i < DECODER_NUM; p_decb++, i++)
    2638:	4b12      	ldr	r3, [pc, #72]	; (2684 <decoder_init+0x54>)
    263a:	60bb      	str	r3, [r7, #8]
    263c:	f04f 0300 	mov.w	r3, #0
    2640:	60fb      	str	r3, [r7, #12]
    2642:	e013      	b.n	266c <decoder_init+0x3c>
    {
        p_decb->openflag  = FALSE;
    2644:	68bb      	ldr	r3, [r7, #8]
    2646:	f04f 0200 	mov.w	r2, #0
    264a:	601a      	str	r2, [r3, #0]
        p_decb->errorflag = E_SYS;
    264c:	68bb      	ldr	r3, [r7, #8]
    264e:	f04f 32ff 	mov.w	r2, #4294967295
    2652:	605a      	str	r2, [r3, #4]
        p_decb->value     = 0;
    2654:	68bb      	ldr	r3, [r7, #8]
    2656:	f04f 0200 	mov.w	r2, #0
    265a:	609a      	str	r2, [r3, #8]
void decoder_init(intptr_t exinf)
{
    uint_t i;
    DECB *p_decb;

    for (p_decb = decb_table, i = 0; i < DECODER_NUM; p_decb++, i++)
    265c:	68bb      	ldr	r3, [r7, #8]
    265e:	f103 030c 	add.w	r3, r3, #12
    2662:	60bb      	str	r3, [r7, #8]
    2664:	68fb      	ldr	r3, [r7, #12]
    2666:	f103 0301 	add.w	r3, r3, #1
    266a:	60fb      	str	r3, [r7, #12]
    266c:	68fb      	ldr	r3, [r7, #12]
    266e:	2b00      	cmp	r3, #0
    2670:	d0e8      	beq.n	2644 <decoder_init+0x14>
        p_decb->errorflag = E_SYS;
        p_decb->value     = 0;
    }
    
    /* 打开IO口 */
    decoder_open_port(DECODER);
    2672:	f04f 504c 	mov.w	r0, #855638016	; 0x33000000
    2676:	f000 f807 	bl	2688 <decoder_open_port>
}
    267a:	f107 0710 	add.w	r7, r7, #16
    267e:	46bd      	mov	sp, r7
    2680:	bd80      	pop	{r7, pc}
    2682:	bf00      	nop
    2684:	1fff876c 	.word	0x1fff876c

00002688 <decoder_open_port>:
 *    @param   decoderid  电机的ID号
 *
 *    @return  ercd 错误码
 */
static ER decoder_open_port(ID decoderid)
{
    2688:	b580      	push	{r7, lr}
    268a:	b086      	sub	sp, #24
    268c:	af00      	add	r7, sp, #0
    268e:	6078      	str	r0, [r7, #4]
    DECB *p_decb;
    ER ercd;
    ID decoder_no;

    decoder_no = DECODER_NO_GET(decoderid);
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2696:	ea4f 4313 	mov.w	r3, r3, lsr #16
    269a:	613b      	str	r3, [r7, #16]

    if (!((0 <= decoder_no) && (decoder_no < DECODER_NUM)))
    269c:	693b      	ldr	r3, [r7, #16]
    269e:	2b00      	cmp	r3, #0
    26a0:	db02      	blt.n	26a8 <decoder_open_port+0x20>
    26a2:	693b      	ldr	r3, [r7, #16]
    26a4:	2b00      	cmp	r3, #0
    26a6:	dd02      	ble.n	26ae <decoder_open_port+0x26>
    {
        return (E_ID); /* ID号错误 */
    26a8:	f06f 0303 	mvn.w	r3, #3
    26ac:	e01e      	b.n	26ec <decoder_open_port+0x64>
    }
    p_decb = get_decb(decoder_no);
    26ae:	693a      	ldr	r2, [r7, #16]
    26b0:	4613      	mov	r3, r2
    26b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    26b6:	189b      	adds	r3, r3, r2
    26b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    26bc:	461a      	mov	r2, r3
    26be:	4b0e      	ldr	r3, [pc, #56]	; (26f8 <decoder_open_port+0x70>)
    26c0:	18d3      	adds	r3, r2, r3
    26c2:	60fb      	str	r3, [r7, #12]

    if (p_decb->openflag)
    26c4:	68fb      	ldr	r3, [r7, #12]
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	2b00      	cmp	r3, #0
    26ca:	d003      	beq.n	26d4 <decoder_open_port+0x4c>
    { /* 检查是否已经打开 */
        ercd = E_OBJ;
    26cc:	f06f 0309 	mvn.w	r3, #9
    26d0:	617b      	str	r3, [r7, #20]
    26d2:	e00a      	b.n	26ea <decoder_open_port+0x62>
    else
    {
        /**
         *  硬件初始化
         */
    	lptmr_pulse_capture_init(DECODER_PIN);
    26d4:	f240 3006 	movw	r0, #774	; 0x306
    26d8:	f7ff f906 	bl	18e8 <lptmr_pulse_capture_init>
        p_decb->openflag = TRUE;
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	f04f 0201 	mov.w	r2, #1
    26e2:	601a      	str	r2, [r3, #0]
        ercd = E_OK;
    26e4:	f04f 0300 	mov.w	r3, #0
    26e8:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    26ea:	697b      	ldr	r3, [r7, #20]
}
    26ec:	4618      	mov	r0, r3
    26ee:	f107 0718 	add.w	r7, r7, #24
    26f2:	46bd      	mov	sp, r7
    26f4:	bd80      	pop	{r7, pc}
    26f6:	bf00      	nop
    26f8:	1fff876c 	.word	0x1fff876c

000026fc <decoder_read>:
 *    @param   decoderid  编码器的ID号
 *
 *    @return  pulse_num  编码器的寄存器值
 */
volatile uint32_t decoder_read(ID decoderid)
{
    26fc:	b480      	push	{r7}
    26fe:	b087      	sub	sp, #28
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
    DECB *p_decb;
    ID decoder_no;
    volatile uint32_t pulse_num = 0;
    2704:	f04f 0300 	mov.w	r3, #0
    2708:	60fb      	str	r3, [r7, #12]

    decoder_no = DECODER_NO_GET(decoderid);
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2710:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2714:	617b      	str	r3, [r7, #20]

    if (!((0 <= decoder_no) && (decoder_no < DECODER_NUM)))
    2716:	697b      	ldr	r3, [r7, #20]
    2718:	2b00      	cmp	r3, #0
    271a:	db02      	blt.n	2722 <decoder_read+0x26>
    271c:	697b      	ldr	r3, [r7, #20]
    271e:	2b00      	cmp	r3, #0
    2720:	dd02      	ble.n	2728 <decoder_read+0x2c>
    {
        return ((volatile uint32_t)E_ID); /* ID号错误 */
    2722:	f06f 0303 	mvn.w	r3, #3
    2726:	e018      	b.n	275a <decoder_read+0x5e>
    }
    p_decb = get_decb(decoder_no);
    2728:	697a      	ldr	r2, [r7, #20]
    272a:	4613      	mov	r3, r2
    272c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2730:	189b      	adds	r3, r3, r2
    2732:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2736:	461a      	mov	r2, r3
    2738:	4b0b      	ldr	r3, [pc, #44]	; (2768 <decoder_read+0x6c>)
    273a:	18d3      	adds	r3, r2, r3
    273c:	613b      	str	r3, [r7, #16]

    if (p_decb->openflag)
    273e:	693b      	ldr	r3, [r7, #16]
    2740:	681b      	ldr	r3, [r3, #0]
    2742:	2b00      	cmp	r3, #0
    2744:	d007      	beq.n	2756 <decoder_read+0x5a>
    { /* 检查是否已经打开 */
        pulse_num = LPTMR_CNR_REG(DECODER_CNT);                     //读LPTMR的CNT寄存器的值即当前编码器捕捉次数
    2746:	4b09      	ldr	r3, [pc, #36]	; (276c <decoder_read+0x70>)
    2748:	68db      	ldr	r3, [r3, #12]
    274a:	60fb      	str	r3, [r7, #12]
        p_decb->value = pulse_num;
    274c:	68fa      	ldr	r2, [r7, #12]
    274e:	693b      	ldr	r3, [r7, #16]
    2750:	609a      	str	r2, [r3, #8]
    else
    {
        return ((volatile uint32_t)E_ILUSE);
    }

    return (pulse_num);
    2752:	68fb      	ldr	r3, [r7, #12]
    2754:	e001      	b.n	275a <decoder_read+0x5e>
        pulse_num = LPTMR_CNR_REG(DECODER_CNT);                     //读LPTMR的CNT寄存器的值即当前编码器捕捉次数
        p_decb->value = pulse_num;
    }
    else
    {
        return ((volatile uint32_t)E_ILUSE);
    2756:	f06f 0304 	mvn.w	r3, #4
    }

    return (pulse_num);
}
    275a:	4618      	mov	r0, r3
    275c:	f107 071c 	add.w	r7, r7, #28
    2760:	46bd      	mov	sp, r7
    2762:	bc80      	pop	{r7}
    2764:	4770      	bx	lr
    2766:	bf00      	nop
    2768:	1fff876c 	.word	0x1fff876c
    276c:	40040000 	.word	0x40040000

00002770 <decoder_clear>:
 *    @brief   清零当前的计数值
 *
 *    @note  关闭lptmr寄存器的使能即可以清零，打开使能便重新从零开始计数。
 */
void decoder_clear(void)
{
    2770:	b480      	push	{r7}
    2772:	af00      	add	r7, sp, #0
	 	 LPTMR0_CSR &=(~ LPTMR_CSR_TEN_MASK);                        //关闭使能位
    2774:	4b07      	ldr	r3, [pc, #28]	; (2794 <decoder_clear+0x24>)
    2776:	4a07      	ldr	r2, [pc, #28]	; (2794 <decoder_clear+0x24>)
    2778:	6812      	ldr	r2, [r2, #0]
    277a:	f022 0201 	bic.w	r2, r2, #1
    277e:	601a      	str	r2, [r3, #0]
	 	 LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;                              //打开使能位
    2780:	4b04      	ldr	r3, [pc, #16]	; (2794 <decoder_clear+0x24>)
    2782:	4a04      	ldr	r2, [pc, #16]	; (2794 <decoder_clear+0x24>)
    2784:	6812      	ldr	r2, [r2, #0]
    2786:	f042 0201 	orr.w	r2, r2, #1
    278a:	601a      	str	r2, [r3, #0]
}
    278c:	46bd      	mov	sp, r7
    278e:	bc80      	pop	{r7}
    2790:	4770      	bx	lr
    2792:	bf00      	nop
    2794:	40040000 	.word	0x40040000

00002798 <calculateCurSpeed>:

/**
 *    @brief   Calculate Current Speed and distance
 */
void calculateCurSpeed(void)
{
    2798:	b580      	push	{r7, lr}
    279a:	b082      	sub	sp, #8
    279c:	af00      	add	r7, sp, #0
    uint32_t	encoderCurrent = 0;
    279e:	f04f 0300 	mov.w	r3, #0
    27a2:	607b      	str	r3, [r7, #4]

    encoderCurrent = decoder_read(DECODER);
    27a4:	f04f 504c 	mov.w	r0, #855638016	; 0x33000000
    27a8:	f7ff ffa8 	bl	26fc <decoder_read>
    27ac:	6078      	str	r0, [r7, #4]
	gl_encoderTotal = gl_encoderTotal + encoderCurrent;
    27ae:	4b14      	ldr	r3, [pc, #80]	; (2800 <calculateCurSpeed+0x68>)
    27b0:	681a      	ldr	r2, [r3, #0]
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	18d2      	adds	r2, r2, r3
    27b6:	4b12      	ldr	r3, [pc, #72]	; (2800 <calculateCurSpeed+0x68>)
    27b8:	601a      	str	r2, [r3, #0]
    gl_curSpeed = (encoderCurrent * 14) / 5 ;  //10ms
    27ba:	687a      	ldr	r2, [r7, #4]
    27bc:	4613      	mov	r3, r2
    27be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    27c2:	1a9b      	subs	r3, r3, r2
    27c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    27c8:	461a      	mov	r2, r3
    27ca:	4b0e      	ldr	r3, [pc, #56]	; (2804 <calculateCurSpeed+0x6c>)
    27cc:	fba3 1302 	umull	r1, r3, r3, r2
    27d0:	ea4f 0393 	mov.w	r3, r3, lsr #2
    27d4:	b29a      	uxth	r2, r3
    27d6:	4b0c      	ldr	r3, [pc, #48]	; (2808 <calculateCurSpeed+0x70>)
    27d8:	801a      	strh	r2, [r3, #0]

    decoder_clear();                   /*清零当前计数器*/
    27da:	f7ff ffc9 	bl	2770 <decoder_clear>

    gl_distanceTotal = (uint32_t)(gl_encoderTotal / DISTANCE_PRESCALE);  // cm
    27de:	4b08      	ldr	r3, [pc, #32]	; (2800 <calculateCurSpeed+0x68>)
    27e0:	681a      	ldr	r2, [r3, #0]
    27e2:	4b0a      	ldr	r3, [pc, #40]	; (280c <calculateCurSpeed+0x74>)
    27e4:	fba3 1302 	umull	r1, r3, r3, r2
    27e8:	1ad2      	subs	r2, r2, r3
    27ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
    27ee:	189b      	adds	r3, r3, r2
    27f0:	ea4f 1253 	mov.w	r2, r3, lsr #5
    27f4:	4b06      	ldr	r3, [pc, #24]	; (2810 <calculateCurSpeed+0x78>)
    27f6:	601a      	str	r2, [r3, #0]
}
    27f8:	f107 0708 	add.w	r7, r7, #8
    27fc:	46bd      	mov	sp, r7
    27fe:	bd80      	pop	{r7, pc}
    2800:	1fff877c 	.word	0x1fff877c
    2804:	cccccccd 	.word	0xcccccccd
    2808:	1fff8778 	.word	0x1fff8778
    280c:	d41d41d5 	.word	0xd41d41d5
    2810:	1fff8780 	.word	0x1fff8780

00002814 <infrared_init>:

/**
 *    @brief   红外初始化
 */
void infrared_init(void)
{
    2814:	b580      	push	{r7, lr}
    2816:	b082      	sub	sp, #8
    2818:	af00      	add	r7, sp, #0
    uint_t i;
    IRCB *p_ircb;

    for (p_ircb = ircb_table, i = 0; i < INFRARED_NUM; p_ircb++, i++)
    281a:	4b20      	ldr	r3, [pc, #128]	; (289c <infrared_init+0x88>)
    281c:	603b      	str	r3, [r7, #0]
    281e:	f04f 0300 	mov.w	r3, #0
    2822:	607b      	str	r3, [r7, #4]
    2824:	e00f      	b.n	2846 <infrared_init+0x32>
    {
        p_ircb->openflag  = FALSE;
    2826:	683b      	ldr	r3, [r7, #0]
    2828:	f04f 0200 	mov.w	r2, #0
    282c:	601a      	str	r2, [r3, #0]
        p_ircb->errorflag = E_SYS;
    282e:	683b      	ldr	r3, [r7, #0]
    2830:	f04f 32ff 	mov.w	r2, #4294967295
    2834:	605a      	str	r2, [r3, #4]
void infrared_init(void)
{
    uint_t i;
    IRCB *p_ircb;

    for (p_ircb = ircb_table, i = 0; i < INFRARED_NUM; p_ircb++, i++)
    2836:	683b      	ldr	r3, [r7, #0]
    2838:	f103 0308 	add.w	r3, r3, #8
    283c:	603b      	str	r3, [r7, #0]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	f103 0301 	add.w	r3, r3, #1
    2844:	607b      	str	r3, [r7, #4]
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	2b0b      	cmp	r3, #11
    284a:	d9ec      	bls.n	2826 <infrared_init+0x12>
    {
        p_ircb->openflag  = FALSE;
        p_ircb->errorflag = E_SYS;
    }

    infrared_open_port(INFRARED0);
    284c:	4814      	ldr	r0, [pc, #80]	; (28a0 <infrared_init+0x8c>)
    284e:	f000 f83f 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED1);
    2852:	4814      	ldr	r0, [pc, #80]	; (28a4 <infrared_init+0x90>)
    2854:	f000 f83c 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED2);
    2858:	4813      	ldr	r0, [pc, #76]	; (28a8 <infrared_init+0x94>)
    285a:	f000 f839 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED3);
    285e:	4813      	ldr	r0, [pc, #76]	; (28ac <infrared_init+0x98>)
    2860:	f000 f836 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED4);
    2864:	4812      	ldr	r0, [pc, #72]	; (28b0 <infrared_init+0x9c>)
    2866:	f000 f833 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED5);
    286a:	4812      	ldr	r0, [pc, #72]	; (28b4 <infrared_init+0xa0>)
    286c:	f000 f830 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED6);
    2870:	4811      	ldr	r0, [pc, #68]	; (28b8 <infrared_init+0xa4>)
    2872:	f000 f82d 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED7);
    2876:	4811      	ldr	r0, [pc, #68]	; (28bc <infrared_init+0xa8>)
    2878:	f000 f82a 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED8);
    287c:	4810      	ldr	r0, [pc, #64]	; (28c0 <infrared_init+0xac>)
    287e:	f000 f827 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED9);
    2882:	4810      	ldr	r0, [pc, #64]	; (28c4 <infrared_init+0xb0>)
    2884:	f000 f824 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED10);
    2888:	480f      	ldr	r0, [pc, #60]	; (28c8 <infrared_init+0xb4>)
    288a:	f000 f821 	bl	28d0 <infrared_open_port>
    infrared_open_port(INFRARED11);
    288e:	480f      	ldr	r0, [pc, #60]	; (28cc <infrared_init+0xb8>)
    2890:	f000 f81e 	bl	28d0 <infrared_open_port>
}
    2894:	f107 0708 	add.w	r7, r7, #8
    2898:	46bd      	mov	sp, r7
    289a:	bd80      	pop	{r7, pc}
    289c:	1fff8784 	.word	0x1fff8784
    28a0:	020b0000 	.word	0x020b0000
    28a4:	02070001 	.word	0x02070001
    28a8:	02030002 	.word	0x02030002
    28ac:	011d0003 	.word	0x011d0003
    28b0:	02050004 	.word	0x02050004
    28b4:	02090005 	.word	0x02090005
    28b8:	010d0006 	.word	0x010d0006
    28bc:	010f0007 	.word	0x010f0007
    28c0:	050c0008 	.word	0x050c0008
    28c4:	050b0009 	.word	0x050b0009
    28c8:	050d000a 	.word	0x050d000a
    28cc:	051b000b 	.word	0x051b000b

000028d0 <infrared_open_port>:
 *    @param   infraredid  开关的ID号
 *
 *    @return  ercd 错误码
 */
static ER infrared_open_port(ID infraredid)
{
    28d0:	b580      	push	{r7, lr}
    28d2:	b086      	sub	sp, #24
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
	IRCB *p_ircb;
    ER ercd;
    ID infrared_no;

    infrared_no = INFRARED_NO_GET(infraredid);
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	ea4f 4303 	mov.w	r3, r3, lsl #16
    28de:	ea4f 4313 	mov.w	r3, r3, lsr #16
    28e2:	613b      	str	r3, [r7, #16]

    if (!(0 <= infrared_no && infrared_no < INFRARED_NUM))
    28e4:	693b      	ldr	r3, [r7, #16]
    28e6:	2b00      	cmp	r3, #0
    28e8:	db02      	blt.n	28f0 <infrared_open_port+0x20>
    28ea:	693b      	ldr	r3, [r7, #16]
    28ec:	2b0b      	cmp	r3, #11
    28ee:	dd02      	ble.n	28f6 <infrared_open_port+0x26>
    {
        return (E_ID); /* ID号错误 */
    28f0:	f06f 0303 	mvn.w	r3, #3
    28f4:	e02d      	b.n	2952 <infrared_open_port+0x82>
    }
    p_ircb = get_ircb(infrared_no);
    28f6:	693b      	ldr	r3, [r7, #16]
    28f8:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    28fc:	4b17      	ldr	r3, [pc, #92]	; (295c <infrared_open_port+0x8c>)
    28fe:	18d3      	adds	r3, r2, r3
    2900:	60fb      	str	r3, [r7, #12]

    if (p_ircb->openflag)
    2902:	68fb      	ldr	r3, [r7, #12]
    2904:	681b      	ldr	r3, [r3, #0]
    2906:	2b00      	cmp	r3, #0
    2908:	d003      	beq.n	2912 <infrared_open_port+0x42>
    { /* 检查是否已经打开 */
        ercd = E_OBJ;
    290a:	f06f 0309 	mvn.w	r3, #9
    290e:	617b      	str	r3, [r7, #20]
    2910:	e01e      	b.n	2950 <infrared_open_port+0x80>
    else
    {
        /**
         *  硬件初始化
         */
        gpio_init(INFRARED_PORT_GET(infraredid), INFRARED_PIN_GET(infraredid), IN_PUT, 0);
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	ea4f 4323 	mov.w	r3, r3, asr #16
    2918:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    291c:	ea4f 2323 	mov.w	r3, r3, asr #8
    2920:	f103 32ff 	add.w	r2, r3, #4294967295
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	ea4f 4323 	mov.w	r3, r3, asr #16
    292a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    292e:	f103 33ff 	add.w	r3, r3, #4294967295
    2932:	4610      	mov	r0, r2
    2934:	4619      	mov	r1, r3
    2936:	f04f 0200 	mov.w	r2, #0
    293a:	f04f 0300 	mov.w	r3, #0
    293e:	f7fe fcf1 	bl	1324 <gpio_init>

        p_ircb->openflag = TRUE;
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	f04f 0201 	mov.w	r2, #1
    2948:	601a      	str	r2, [r3, #0]

        ercd = E_OK;
    294a:	f04f 0300 	mov.w	r3, #0
    294e:	617b      	str	r3, [r7, #20]
    }

    return (ercd);
    2950:	697b      	ldr	r3, [r7, #20]
}
    2952:	4618      	mov	r0, r3
    2954:	f107 0718 	add.w	r7, r7, #24
    2958:	46bd      	mov	sp, r7
    295a:	bd80      	pop	{r7, pc}
    295c:	1fff8784 	.word	0x1fff8784

00002960 <main>:
void pwm_output_backward(int pwm_duty, int angle);
void speed_control_forward(int expect_speed, int angle);
void speed_control_backward(int expect_speed, int angle);

int main(int argc, char **argv)
{
    2960:	b580      	push	{r7, lr}
    2962:	b092      	sub	sp, #72	; 0x48
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	6039      	str	r1, [r7, #0]
	int robot_state = FORWARD;
    296a:	f04f 0300 	mov.w	r3, #0
    296e:	647b      	str	r3, [r7, #68]	; 0x44
	int last_robot_state = FORWARD;
    2970:	f04f 0300 	mov.w	r3, #0
    2974:	643b      	str	r3, [r7, #64]	; 0x40
	int front_infrared_value = 0;
    2976:	f04f 0300 	mov.w	r3, #0
    297a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int back_infrared_value = 0;
    297c:	f04f 0300 	mov.w	r3, #0
    2980:	63bb      	str	r3, [r7, #56]	; 0x38
	int front_infrared_num = 0;
    2982:	f04f 0300 	mov.w	r3, #0
    2986:	637b      	str	r3, [r7, #52]	; 0x34
	int back_infrared_num = 0;
    2988:	f04f 0300 	mov.w	r3, #0
    298c:	633b      	str	r3, [r7, #48]	; 0x30
	int front_infrared_amount = 0;
    298e:	f04f 0300 	mov.w	r3, #0
    2992:	62fb      	str	r3, [r7, #44]	; 0x2c
	int back_infrared_amount = 0;
    2994:	f04f 0300 	mov.w	r3, #0
    2998:	62bb      	str	r3, [r7, #40]	; 0x28
	int front_infrared_weight = 0;
    299a:	f04f 0300 	mov.w	r3, #0
    299e:	627b      	str	r3, [r7, #36]	; 0x24
	int back_infrared_weight = 0;
    29a0:	f04f 0300 	mov.w	r3, #0
    29a4:	623b      	str	r3, [r7, #32]
	uint32_t car_distence = 0;
    29a6:	f04f 0300 	mov.w	r3, #0
    29aa:	61fb      	str	r3, [r7, #28]
	uint8_t get_char = 0;
    29ac:	f04f 0300 	mov.w	r3, #0
    29b0:	76fb      	strb	r3, [r7, #27]
	int change_num = 0;
    29b2:	f04f 0300 	mov.w	r3, #0
    29b6:	617b      	str	r3, [r7, #20]
	bool_t switch_state = 0;
    29b8:	f04f 0300 	mov.w	r3, #0
    29bc:	613b      	str	r3, [r7, #16]
	int detect_num = 0;
    29be:	f04f 0300 	mov.w	r3, #0
    29c2:	60fb      	str	r3, [r7, #12]
	int angle = 0;
    29c4:	f04f 0300 	mov.w	r3, #0
    29c8:	60bb      	str	r3, [r7, #8]

	/* 模块初始化 */
	exc_init(); /* 中断初始化 */
    29ca:	f7fe fbb3 	bl	1134 <exc_init>
	sys_timer_init(); /* 系统时钟初始化 */
    29ce:	f7fe fbe5 	bl	119c <sys_timer_init>
	light_init(); /* 灯初始化 */
    29d2:	f7ff f9f9 	bl	1dc8 <light_init>
	switch_init(); /* 开关初始化 */
    29d6:	f7ff fd81 	bl	24dc <switch_init>
	serial_initialize((intptr_t) (NULL)); /* 初始化串口 */
    29da:	f04f 0000 	mov.w	r0, #0
    29de:	f7ff f80b 	bl	19f8 <serial_initialize>
	motor_init(); /* 电机初始化 */
    29e2:	f7ff fadd 	bl	1fa0 <motor_init>
	steer_init(); /* 舵机初始化 */
    29e6:	f7ff fc2d 	bl	2244 <steer_init>
	decoder_init((intptr_t) (NULL)); /* 编码器初始化 */
    29ea:	f04f 0000 	mov.w	r0, #0
    29ee:	f7ff fe1f 	bl	2630 <decoder_init>
	infrared_init(); /* 红外初始化 */
    29f2:	f7ff ff0f 	bl	2814 <infrared_init>

	while(1)
	{
		light_open(LIGHT2);
    29f6:	4803      	ldr	r0, [pc, #12]	; (2a04 <main+0xa4>)
    29f8:	f7ff fa84 	bl	1f04 <light_open>
		light_open(LIGHT3);
    29fc:	4802      	ldr	r0, [pc, #8]	; (2a08 <main+0xa8>)
    29fe:	f7ff fa81 	bl	1f04 <light_open>
	}
    2a02:	e7f8      	b.n	29f6 <main+0x96>
    2a04:	050a0002 	.word	0x050a0002
    2a08:	05090003 	.word	0x05090003

00002a0c <__cs3_premain>:
    2a0c:	b508      	push	{r3, lr}
    2a0e:	f000 f83d 	bl	2a8c <__libc_init_array>
    2a12:	4807      	ldr	r0, [pc, #28]	; (2a30 <__cs3_premain+0x24>)
    2a14:	b100      	cbz	r0, 2a18 <__cs3_premain+0xc>
    2a16:	6800      	ldr	r0, [r0, #0]
    2a18:	4906      	ldr	r1, [pc, #24]	; (2a34 <__cs3_premain+0x28>)
    2a1a:	b101      	cbz	r1, 2a1e <__cs3_premain+0x12>
    2a1c:	6809      	ldr	r1, [r1, #0]
    2a1e:	2200      	movs	r2, #0
    2a20:	f7ff ff9e 	bl	2960 <main>
    2a24:	4b04      	ldr	r3, [pc, #16]	; (2a38 <__cs3_premain+0x2c>)
    2a26:	b10b      	cbz	r3, 2a2c <__cs3_premain+0x20>
    2a28:	f3af 8000 	nop.w
    2a2c:	e7fe      	b.n	2a2c <__cs3_premain+0x20>
    2a2e:	bf00      	nop
	...

00002a3c <__cs3_start_c>:
    2a3c:	b580      	push	{r7, lr}
    2a3e:	4911      	ldr	r1, [pc, #68]	; (2a84 <__cs3_start_c+0x48>)
    2a40:	4a11      	ldr	r2, [pc, #68]	; (2a88 <__cs3_start_c+0x4c>)
    2a42:	e01a      	b.n	2a7a <__cs3_start_c+0x3e>
    2a44:	6855      	ldr	r5, [r2, #4]
    2a46:	6893      	ldr	r3, [r2, #8]
    2a48:	68d4      	ldr	r4, [r2, #12]
    2a4a:	429d      	cmp	r5, r3
    2a4c:	d009      	beq.n	2a62 <__cs3_start_c+0x26>
    2a4e:	2000      	movs	r0, #0
    2a50:	e004      	b.n	2a5c <__cs3_start_c+0x20>
    2a52:	e8f5 6702 	ldrd	r6, r7, [r5], #8
    2a56:	3008      	adds	r0, #8
    2a58:	e8e3 6702 	strd	r6, r7, [r3], #8
    2a5c:	42a0      	cmp	r0, r4
    2a5e:	d1f8      	bne.n	2a52 <__cs3_start_c+0x16>
    2a60:	e000      	b.n	2a64 <__cs3_start_c+0x28>
    2a62:	191b      	adds	r3, r3, r4
    2a64:	6914      	ldr	r4, [r2, #16]
    2a66:	2000      	movs	r0, #0
    2a68:	e004      	b.n	2a74 <__cs3_start_c+0x38>
    2a6a:	3008      	adds	r0, #8
    2a6c:	2600      	movs	r6, #0
    2a6e:	2700      	movs	r7, #0
    2a70:	e8e3 6702 	strd	r6, r7, [r3], #8
    2a74:	42a0      	cmp	r0, r4
    2a76:	d1f8      	bne.n	2a6a <__cs3_start_c+0x2e>
    2a78:	3214      	adds	r2, #20
    2a7a:	3901      	subs	r1, #1
    2a7c:	d2e2      	bcs.n	2a44 <__cs3_start_c+0x8>
    2a7e:	f7ff ffc5 	bl	2a0c <__cs3_premain>
    2a82:	bf00      	nop
    2a84:	00000001 	.word	0x00000001
    2a88:	00002b1c 	.word	0x00002b1c

00002a8c <__libc_init_array>:
    2a8c:	b570      	push	{r4, r5, r6, lr}
    2a8e:	f642 3608 	movw	r6, #11016	; 0x2b08
    2a92:	f642 3508 	movw	r5, #11016	; 0x2b08
    2a96:	f2c0 0600 	movt	r6, #0
    2a9a:	f2c0 0500 	movt	r5, #0
    2a9e:	1b76      	subs	r6, r6, r5
    2aa0:	10b6      	asrs	r6, r6, #2
    2aa2:	d006      	beq.n	2ab2 <__libc_init_array+0x26>
    2aa4:	2400      	movs	r4, #0
    2aa6:	f855 3b04 	ldr.w	r3, [r5], #4
    2aaa:	3401      	adds	r4, #1
    2aac:	4798      	blx	r3
    2aae:	42a6      	cmp	r6, r4
    2ab0:	d1f9      	bne.n	2aa6 <__libc_init_array+0x1a>
    2ab2:	f642 360c 	movw	r6, #11020	; 0x2b0c
    2ab6:	f642 3508 	movw	r5, #11016	; 0x2b08
    2aba:	f2c0 0600 	movt	r6, #0
    2abe:	f2c0 0500 	movt	r5, #0
    2ac2:	1b76      	subs	r6, r6, r5
    2ac4:	f000 f81a 	bl	2afc <_init>
    2ac8:	10b6      	asrs	r6, r6, #2
    2aca:	d006      	beq.n	2ada <__libc_init_array+0x4e>
    2acc:	2400      	movs	r4, #0
    2ace:	f855 3b04 	ldr.w	r3, [r5], #4
    2ad2:	3401      	adds	r4, #1
    2ad4:	4798      	blx	r3
    2ad6:	42a6      	cmp	r6, r4
    2ad8:	d1f9      	bne.n	2ace <__libc_init_array+0x42>
    2ada:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .rodata:

00002adc <siopinib_table>:
    2adc:	a000 4006 003d 0000 a000 400e 0045 0000     ...@=......@E...

00002aec <spinib_table>:
    2aec:	0100 0000 8404 1fff 0100 0000 8504 1fff     ................

00002afc <_init>:
    2afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2afe:	bf00      	nop
    2b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b02:	bc08      	pop	{r3}
    2b04:	469e      	mov	lr, r3
    2b06:	4770      	bx	lr

00002b08 <__init_array_start>:
    2b08:	00000425 	.word	0x00000425

00002b0c <_fini>:
    2b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b0e:	bf00      	nop
    2b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b12:	bc08      	pop	{r3}
    2b14:	469e      	mov	lr, r3
    2b16:	4770      	bx	lr

00002b18 <__fini_array_start>:
    2b18:	00000411 	.word	0x00000411

00002b1c <__cs3_regions>:
    2b1c:	00000000 	.word	0x00000000
    2b20:	00002b30 	.word	0x00002b30
    2b24:	1fff8000 	.word	0x1fff8000
    2b28:	00000400 	.word	0x00000400
    2b2c:	00000430 	.word	0x00000430
