/*
 * =====================================================================================
 *        COPYRIGHT NOTICE
 *        Copyright (c) 2012  HUST-Renesas Lab
 *        ALL rights reserved.
 *//**        
 *        @file     test_speaker.c
 *
 *        @brief    测试speaker模块
 *
 *        @version  0.1
 *        @date     2012/5/8 20:24
 *
 *        @author   Hu Chunxu , hcx196@gmail.com
 *        
 *        @note     
 *//* ==================================================================================
 *  @0.1    Hu Chunxu   2012/5/8   create orignal file
 * =====================================================================================
 */

#include <stdio.h>

#include "common.h"
#include "exception.h"
#include "sys_timer.h"
#include "task_ntshell.h"

#include "speaker.h"
#include "serial.h"

void delay(uint32_t ntime);

int main(int argc, char **argv)
{
    uint8_t speaker_no = 0;
    uint8_t speaker_total_no = 2;
    uint8_t get_char = 0;
    uint8_t n = 0;
    ER speaker_msg = 0;
    
    /* 模块初始化 */
    exc_init();                                          /* 中断初始化 */
    sys_timer_init();                                    /* 系统时钟初始化 */
    speaker_init();                                      /* 蜂鸣器初始化 */
    serial_initialize((intptr_t)(NULL));                 /* 初始化串口 */
    
    printf("\n Welcome to k60 software platform! \n");
    
    while(1)
    {
        printf(" *** This is a test for speaker module! *** \n");
        
        printf(" \n>>>> The speaker will be ringing! \n");
        for(speaker_no = 0; speaker_no < speaker_total_no; speaker_no++)
        {
            delay(200);
            switch (speaker_no)
            {
                case 0:
                    speaker_msg = speaker_open(SPEAKER0);
                    break;
                case 1:
                    speaker_msg = speaker_open(SPEAKER1);
                    break;
                default:
                    printf("The speaker number is error!\n");
                    break;

            }
            if (speaker_msg == E_ID)
            {
                printf(" The ID of speaker%d is error!\n", speaker_no);
            }
            else if (speaker_msg == E_ILUSE)
            {
                printf(" The port of speaker%d is not open!\n", speaker_no);
            }
            else
            {
                printf(" The speaker%d is ringing now!\n", speaker_no);
            }
        }
        
        printf(" \n>>>> The speaker will be not ringing! \n");
        for (speaker_no = 0; speaker_no < speaker_total_no; speaker_no++)
        {
            delay(200);
            switch (speaker_no)
            {
                case 0:
                    speaker_msg = speaker_close(SPEAKER0);
                    break;
                case 1:
                    speaker_msg = speaker_close(SPEAKER1);
                    break;
                default:
                    printf("The speaker number is error!");
                    break;

            }
            if (speaker_msg == E_ID)
            {
                printf(" The ID of speaker%d is error !\n", speaker_no);
            }
            else if (speaker_msg == E_ILUSE)
            {
                printf(" The port of speaker%d is not open!\n", speaker_no);
            }
            else
            {
                printf(" The speaker%d is not ringing now!\n", speaker_no);
            }
        }
        
        printf(" \n>>>> The speaker will change frequence! \n");
        
        for(n=0;n<10;n++)
        {
            delay(10);
            if(speaker_read(SPEAKER0))
            {
                speaker_close(SPEAKER0);
            }
            else
            {
                speaker_open(SPEAKER0);
            }
        }
        for(n=0;n<10;n++)
        {
            delay(5);
            if(speaker_read(SPEAKER0))
            {
                speaker_close(SPEAKER0);
            }
            else
            {
                speaker_open(SPEAKER0);
            }
        }
        for(n=0;n<20;n++)
        {
            delay(1);
            if(speaker_read(SPEAKER0))
            {
                speaker_close(SPEAKER0);
            }
            else
            {
                speaker_open(SPEAKER0);
            }
        }
        for(n=0;n<10;n++)
        {
            delay(10);
            if(speaker_read(SPEAKER0))
            {
                speaker_close(SPEAKER0);
            }
            else
            {
                speaker_open(SPEAKER0);
            }
        }
        for(n=0;n<10;n++)
        {
            delay(20);
            if(speaker_read(SPEAKER0))
            {
                speaker_close(SPEAKER0);
            }
            else
            {
                speaker_open(SPEAKER0);
            }
        }
            
        speaker_close(SPEAKER0);
        printf(" \n>>>> A test for speaker module is over!\n");
        while (1)
        {
            printf(" \n>>>> Press 'n' to test once more.\n");
            serial_rea_dat(NTSHELL_PORTID, &get_char, 1);

            if (get_char == 'n')
            {
                printf("Once more \n");
                delay(200);
                break;
            }
        }
    }
    
}

/**
 *    @brief   简单的延时函数
 *
 *    @param   ntime  延时周期
 */
void delay(uint32_t ntime)
{
    uint32_t i = 0, j = 0;
    
    for(i=0;i<ntime;i++)
        for(j=0;j<100000;j++);
}
